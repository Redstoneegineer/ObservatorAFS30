
UART_HyperTerminal_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a360  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  0000c104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a814  0800a814  0000c104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800a81c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000104  0800a920  0000c104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800a920  0000c38c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c104  2**0
                  CONTENTS, READONLY
 12 .debug_line   00011fb0  00000000  00000000  0000c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000084  00000000  00000000  0001e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000120c9  00000000  00000000  0001e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002585  00000000  00000000  00030237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf0  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00144806  00000000  00000000  000334b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000009e0  00000000  00000000  00177cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000339fa  00000000  00000000  00178696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ac090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000403c  00000000  00000000  001ac0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000104 	.word	0x20000104
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a594 	.word	0x0800a594

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000108 	.word	0x20000108
 8000288:	0800a594 	.word	0x0800a594

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b9b0 	b.w	8000614 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	4688      	mov	r8, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	468e      	mov	lr, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14a      	bne.n	8000372 <__udivmoddi4+0xa6>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4617      	mov	r7, r2
 80002e0:	d95f      	bls.n	80003a2 <__udivmoddi4+0xd6>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	b14e      	cbz	r6, 80002fc <__udivmoddi4+0x30>
 80002e8:	f1c6 0320 	rsb	r3, r6, #32
 80002ec:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f0:	40b7      	lsls	r7, r6
 80002f2:	40b4      	lsls	r4, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	0c23      	lsrs	r3, r4, #16
 8000306:	fbbe f1f8 	udiv	r1, lr, r8
 800030a:	fb08 ee11 	mls	lr, r8, r1, lr
 800030e:	fb01 f20c 	mul.w	r2, r1, ip
 8000312:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000316:	429a      	cmp	r2, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x5e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	429a      	cmp	r2, r3
 8000324:	f200 8154 	bhi.w	80005d0 <__udivmoddi4+0x304>
 8000328:	4601      	mov	r1, r0
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	b2a2      	uxth	r2, r4
 800032e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000332:	fb08 3310 	mls	r3, r8, r0, r3
 8000336:	fb00 fc0c 	mul.w	ip, r0, ip
 800033a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800033e:	4594      	cmp	ip, r2
 8000340:	d90b      	bls.n	800035a <__udivmoddi4+0x8e>
 8000342:	18ba      	adds	r2, r7, r2
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	bf2c      	ite	cs
 800034a:	2401      	movcs	r4, #1
 800034c:	2400      	movcc	r4, #0
 800034e:	4594      	cmp	ip, r2
 8000350:	d902      	bls.n	8000358 <__udivmoddi4+0x8c>
 8000352:	2c00      	cmp	r4, #0
 8000354:	f000 813f 	beq.w	80005d6 <__udivmoddi4+0x30a>
 8000358:	4618      	mov	r0, r3
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	eba2 020c 	sub.w	r2, r2, ip
 8000362:	2100      	movs	r1, #0
 8000364:	b11d      	cbz	r5, 800036e <__udivmoddi4+0xa2>
 8000366:	40f2      	lsrs	r2, r6
 8000368:	2300      	movs	r3, #0
 800036a:	e9c5 2300 	strd	r2, r3, [r5]
 800036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d905      	bls.n	8000382 <__udivmoddi4+0xb6>
 8000376:	b10d      	cbz	r5, 800037c <__udivmoddi4+0xb0>
 8000378:	e9c5 0100 	strd	r0, r1, [r5]
 800037c:	2100      	movs	r1, #0
 800037e:	4608      	mov	r0, r1
 8000380:	e7f5      	b.n	800036e <__udivmoddi4+0xa2>
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14e      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038a:	4543      	cmp	r3, r8
 800038c:	f0c0 8112 	bcc.w	80005b4 <__udivmoddi4+0x2e8>
 8000390:	4282      	cmp	r2, r0
 8000392:	f240 810f 	bls.w	80005b4 <__udivmoddi4+0x2e8>
 8000396:	4608      	mov	r0, r1
 8000398:	2d00      	cmp	r5, #0
 800039a:	d0e8      	beq.n	800036e <__udivmoddi4+0xa2>
 800039c:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a0:	e7e5      	b.n	800036e <__udivmoddi4+0xa2>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	f000 80ac 	beq.w	8000500 <__udivmoddi4+0x234>
 80003a8:	fab2 f682 	clz	r6, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	f040 80bb 	bne.w	8000528 <__udivmoddi4+0x25c>
 80003b2:	1a8b      	subs	r3, r1, r2
 80003b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b8:	b2bc      	uxth	r4, r7
 80003ba:	2101      	movs	r1, #1
 80003bc:	0c02      	lsrs	r2, r0, #16
 80003be:	b280      	uxth	r0, r0
 80003c0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003cc:	fb04 f20c 	mul.w	r2, r4, ip
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d90e      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80ec 	beq.w	80005c8 <__udivmoddi4+0x2fc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	fb04 f408 	mul.w	r4, r4, r8
 8000400:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000404:	4294      	cmp	r4, r2
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x154>
 8000408:	18ba      	adds	r2, r7, r2
 800040a:	f108 33ff 	add.w	r3, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	2001      	movcs	r0, #1
 8000412:	2000      	movcc	r0, #0
 8000414:	4294      	cmp	r4, r2
 8000416:	d902      	bls.n	800041e <__udivmoddi4+0x152>
 8000418:	2800      	cmp	r0, #0
 800041a:	f000 80d1 	beq.w	80005c0 <__udivmoddi4+0x2f4>
 800041e:	4698      	mov	r8, r3
 8000420:	1b12      	subs	r2, r2, r4
 8000422:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa08 f401 	lsl.w	r4, r8, r1
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	fa28 f806 	lsr.w	r8, r8, r6
 800043e:	408a      	lsls	r2, r1
 8000440:	431f      	orrs	r7, r3
 8000442:	fa20 f306 	lsr.w	r3, r0, r6
 8000446:	0c38      	lsrs	r0, r7, #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa1f fc87 	uxth.w	ip, r7
 800044e:	0c1c      	lsrs	r4, r3, #16
 8000450:	fbb8 fef0 	udiv	lr, r8, r0
 8000454:	fb00 881e 	mls	r8, r0, lr, r8
 8000458:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800045c:	fb0e f80c 	mul.w	r8, lr, ip
 8000460:	45a0      	cmp	r8, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1b6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a0      	cmp	r8, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b4>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 80b8 	beq.w	80005f0 <__udivmoddi4+0x324>
 8000480:	46d6      	mov	lr, sl
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fa1f f883 	uxth.w	r8, r3
 800048a:	fbb4 f3f0 	udiv	r3, r4, r0
 800048e:	fb00 4413 	mls	r4, r0, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d90e      	bls.n	80004bc <__udivmoddi4+0x1f0>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a4:	bf2c      	ite	cs
 80004a6:	f04f 0801 	movcs.w	r8, #1
 80004aa:	f04f 0800 	movcc.w	r8, #0
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d903      	bls.n	80004ba <__udivmoddi4+0x1ee>
 80004b2:	f1b8 0f00 	cmp.w	r8, #0
 80004b6:	f000 809f 	beq.w	80005f8 <__udivmoddi4+0x32c>
 80004ba:	4603      	mov	r3, r0
 80004bc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c0:	eba4 040c 	sub.w	r4, r4, ip
 80004c4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c8:	4564      	cmp	r4, ip
 80004ca:	4673      	mov	r3, lr
 80004cc:	46e0      	mov	r8, ip
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x20a>
 80004d0:	d107      	bne.n	80004e2 <__udivmoddi4+0x216>
 80004d2:	45f1      	cmp	r9, lr
 80004d4:	d205      	bcs.n	80004e2 <__udivmoddi4+0x216>
 80004d6:	ebbe 0302 	subs.w	r3, lr, r2
 80004da:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004de:	3801      	subs	r0, #1
 80004e0:	46e0      	mov	r8, ip
 80004e2:	b15d      	cbz	r5, 80004fc <__udivmoddi4+0x230>
 80004e4:	ebb9 0203 	subs.w	r2, r9, r3
 80004e8:	eb64 0408 	sbc.w	r4, r4, r8
 80004ec:	fa04 f606 	lsl.w	r6, r4, r6
 80004f0:	fa22 f301 	lsr.w	r3, r2, r1
 80004f4:	40cc      	lsrs	r4, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	e9c5 6400 	strd	r6, r4, [r5]
 80004fc:	2100      	movs	r1, #0
 80004fe:	e736      	b.n	800036e <__udivmoddi4+0xa2>
 8000500:	fbb1 fcf2 	udiv	ip, r1, r2
 8000504:	0c01      	lsrs	r1, r0, #16
 8000506:	4614      	mov	r4, r2
 8000508:	b280      	uxth	r0, r0
 800050a:	4696      	mov	lr, r2
 800050c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000510:	2620      	movs	r6, #32
 8000512:	4690      	mov	r8, r2
 8000514:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000518:	4610      	mov	r0, r2
 800051a:	fbb1 f1f2 	udiv	r1, r1, r2
 800051e:	eba3 0308 	sub.w	r3, r3, r8
 8000522:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000526:	e74b      	b.n	80003c0 <__udivmoddi4+0xf4>
 8000528:	40b7      	lsls	r7, r6
 800052a:	f1c6 0320 	rsb	r3, r6, #32
 800052e:	fa01 f206 	lsl.w	r2, r1, r6
 8000532:	fa21 f803 	lsr.w	r8, r1, r3
 8000536:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053a:	fa20 f303 	lsr.w	r3, r0, r3
 800053e:	b2bc      	uxth	r4, r7
 8000540:	40b0      	lsls	r0, r6
 8000542:	4313      	orrs	r3, r2
 8000544:	0c02      	lsrs	r2, r0, #16
 8000546:	0c19      	lsrs	r1, r3, #16
 8000548:	b280      	uxth	r0, r0
 800054a:	fbb8 f9fe 	udiv	r9, r8, lr
 800054e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000552:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000556:	fb09 f804 	mul.w	r8, r9, r4
 800055a:	4588      	cmp	r8, r1
 800055c:	d951      	bls.n	8000602 <__udivmoddi4+0x336>
 800055e:	1879      	adds	r1, r7, r1
 8000560:	f109 3cff 	add.w	ip, r9, #4294967295
 8000564:	bf2c      	ite	cs
 8000566:	f04f 0a01 	movcs.w	sl, #1
 800056a:	f04f 0a00 	movcc.w	sl, #0
 800056e:	4588      	cmp	r8, r1
 8000570:	d902      	bls.n	8000578 <__udivmoddi4+0x2ac>
 8000572:	f1ba 0f00 	cmp.w	sl, #0
 8000576:	d031      	beq.n	80005dc <__udivmoddi4+0x310>
 8000578:	eba1 0108 	sub.w	r1, r1, r8
 800057c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000580:	fb09 f804 	mul.w	r8, r9, r4
 8000584:	fb0e 1119 	mls	r1, lr, r9, r1
 8000588:	b29b      	uxth	r3, r3
 800058a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058e:	4543      	cmp	r3, r8
 8000590:	d235      	bcs.n	80005fe <__udivmoddi4+0x332>
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	f109 31ff 	add.w	r1, r9, #4294967295
 8000598:	bf2c      	ite	cs
 800059a:	f04f 0a01 	movcs.w	sl, #1
 800059e:	f04f 0a00 	movcc.w	sl, #0
 80005a2:	4543      	cmp	r3, r8
 80005a4:	d2bb      	bcs.n	800051e <__udivmoddi4+0x252>
 80005a6:	f1ba 0f00 	cmp.w	sl, #0
 80005aa:	d1b8      	bne.n	800051e <__udivmoddi4+0x252>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e7b4      	b.n	800051e <__udivmoddi4+0x252>
 80005b4:	1a84      	subs	r4, r0, r2
 80005b6:	eb68 0203 	sbc.w	r2, r8, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	4696      	mov	lr, r2
 80005be:	e6eb      	b.n	8000398 <__udivmoddi4+0xcc>
 80005c0:	443a      	add	r2, r7
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	e72b      	b.n	8000420 <__udivmoddi4+0x154>
 80005c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005cc:	443b      	add	r3, r7
 80005ce:	e710      	b.n	80003f2 <__udivmoddi4+0x126>
 80005d0:	3902      	subs	r1, #2
 80005d2:	443b      	add	r3, r7
 80005d4:	e6a9      	b.n	800032a <__udivmoddi4+0x5e>
 80005d6:	443a      	add	r2, r7
 80005d8:	3802      	subs	r0, #2
 80005da:	e6be      	b.n	800035a <__udivmoddi4+0x8e>
 80005dc:	eba7 0808 	sub.w	r8, r7, r8
 80005e0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e4:	4441      	add	r1, r8
 80005e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ea:	fb09 f804 	mul.w	r8, r9, r4
 80005ee:	e7c9      	b.n	8000584 <__udivmoddi4+0x2b8>
 80005f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f4:	443c      	add	r4, r7
 80005f6:	e744      	b.n	8000482 <__udivmoddi4+0x1b6>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e75e      	b.n	80004bc <__udivmoddi4+0x1f0>
 80005fe:	4649      	mov	r1, r9
 8000600:	e78d      	b.n	800051e <__udivmoddi4+0x252>
 8000602:	eba1 0108 	sub.w	r1, r1, r8
 8000606:	46cc      	mov	ip, r9
 8000608:	fbb1 f9fe 	udiv	r9, r1, lr
 800060c:	fb09 f804 	mul.w	r8, r9, r4
 8000610:	e7b8      	b.n	8000584 <__udivmoddi4+0x2b8>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f001 f82a 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	@ (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	@ (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f009 f9e1 	bl	8009a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f000 f917 	bl	800087c <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800065c:	0800a81c 	.word	0x0800a81c
  ldr r2, =_sbss
 8000660:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000664:	2000038c 	.word	0x2000038c

08000668 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_IRQHandler>
	...

0800066c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db12      	blt.n	80006a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <__NVIC_DisableIRQ+0x44>)
 8000686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	3320      	adds	r3, #32
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	@ 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	e853 3f00 	ldrex	r3, [r3]
 80006c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	61ba      	str	r2, [r7, #24]
 80006d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006d8:	6979      	ldr	r1, [r7, #20]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	e841 2300 	strex	r3, r2, [r1]
 80006e0:	613b      	str	r3, [r7, #16]
   return(result);
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e9      	bne.n	80006bc <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3724      	adds	r7, #36	@ 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b089      	sub	sp, #36	@ 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	e853 3f00 	ldrex	r3, [r3]
 8000708:	60bb      	str	r3, [r7, #8]
   return(result);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	61ba      	str	r2, [r7, #24]
 8000718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800071a:	6979      	ldr	r1, [r7, #20]
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	e841 2300 	strex	r3, r2, [r1]
 8000722:	613b      	str	r3, [r7, #16]
   return(result);
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1e9      	bne.n	80006fe <LL_USART_EnableIT_TC+0x8>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3724      	adds	r7, #36	@ 0x24
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	e853 3f00 	ldrex	r3, [r3]
 800074a:	60bb      	str	r3, [r7, #8]
   return(result);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	69fa      	ldr	r2, [r7, #28]
 8000758:	61ba      	str	r2, [r7, #24]
 800075a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800075c:	6979      	ldr	r1, [r7, #20]
 800075e:	69ba      	ldr	r2, [r7, #24]
 8000760:	e841 2300 	strex	r3, r2, [r1]
 8000764:	613b      	str	r3, [r7, #16]
   return(result);
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e9      	bne.n	8000740 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3724      	adds	r7, #36	@ 0x24
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800077a:	b480      	push	{r7}
 800077c:	b089      	sub	sp, #36	@ 0x24
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3308      	adds	r3, #8
 8000786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	e853 3f00 	ldrex	r3, [r3]
 800078e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3308      	adds	r3, #8
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	61ba      	str	r2, [r7, #24]
 80007a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007a2:	6979      	ldr	r1, [r7, #20]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	e841 2300 	strex	r3, r2, [r1]
 80007aa:	613b      	str	r3, [r7, #16]
   return(result);
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1e7      	bne.n	8000782 <LL_USART_EnableIT_ERROR+0x8>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3724      	adds	r7, #36	@ 0x24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	e853 3f00 	ldrex	r3, [r3]
 80007d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	69fa      	ldr	r2, [r7, #28]
 80007e0:	61ba      	str	r2, [r7, #24]
 80007e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007e4:	6979      	ldr	r1, [r7, #20]
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	e841 2300 	strex	r3, r2, [r1]
 80007ec:	613b      	str	r3, [r7, #16]
   return(result);
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1e9      	bne.n	80007c8 <LL_USART_DisableIT_TC+0x8>
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3724      	adds	r7, #36	@ 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000802:	b480      	push	{r7}
 8000804:	b089      	sub	sp, #36	@ 0x24
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	e853 3f00 	ldrex	r3, [r3]
 8000814:	60bb      	str	r3, [r7, #8]
   return(result);
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	61ba      	str	r2, [r7, #24]
 8000824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000826:	6979      	ldr	r1, [r7, #20]
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	e841 2300 	strex	r3, r2, [r1]
 800082e:	613b      	str	r3, [r7, #16]
   return(result);
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1e9      	bne.n	800080a <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3724      	adds	r7, #36	@ 0x24
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000850:	b2db      	uxtb	r3, r3
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800086a:	78fa      	ldrb	r2, [r7, #3]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 ff74 	bl	800176c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure leds */
  BSP_LED_Init(LED2);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fe2b 	bl	80014e0 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fe28 	bl	80014e0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000890:	2002      	movs	r0, #2
 8000892:	f000 fe25 	bl	80014e0 <BSP_LED_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f857 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 f91d 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800089e:	f000 f8cf 	bl	8000a40 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 80008a2:	f000 f8c1 	bl	8000a28 <MX_ICACHE_Init>

  /*## Configure UART peripheral for reception process (using LL) ##########*/  
  /* Any data received will be stored "aRxBuffer" buffer : the number max of 
     data received is RXBUFFERSIZE */
  /* Enable RXNE and Error interrupts */  
  LL_USART_EnableIT_RXNE(USART3);
 80008a6:	4820      	ldr	r0, [pc, #128]	@ (8000928 <main+0xac>)
 80008a8:	f7ff ff04 	bl	80006b4 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USART3);
 80008ac:	481e      	ldr	r0, [pc, #120]	@ (8000928 <main+0xac>)
 80008ae:	f7ff ff64 	bl	800077a <LL_USART_EnableIT_ERROR>

  /*## Start the transmission process (using LL) *##########################*/  
  /* While the UART in reception process, user can transmit data from 
     "aTxStartMessage" buffer */
  /* Start USART transmission : Will initiate TXE interrupt after TDR register is empty */
  LL_USART_TransmitData8(USART3, aTxStartMessage[uwTxIndex++]); 
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <main+0xb0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	491c      	ldr	r1, [pc, #112]	@ (800092c <main+0xb0>)
 80008ba:	600a      	str	r2, [r1, #0]
 80008bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <main+0xb4>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4819      	ldr	r0, [pc, #100]	@ (8000928 <main+0xac>)
 80008c4:	f7ff ffcb 	bl	800085e <LL_USART_TransmitData8>

  /* Enable TXE interrupt */
  LL_USART_EnableIT_TXE(USART3); 
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <main+0xac>)
 80008ca:	f7ff ff35 	bl	8000738 <LL_USART_EnableIT_TXE_TXFNF>
  /* USART IRQ handler is not anymore routed to HAL_UART_IRQHandler() function 
     and is now based on LL API functions use. 
     Therefore, use of HAL IT based services is no more possible. */
  /*  Once TX transfer is completed, LED2 will turn On.
      Then, when RX transfer is completed, LED1 will turn On. */
  while (ubTxComplete == 0)
 80008ce:	bf00      	nop
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <main+0xb8>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0fa      	beq.n	80008d0 <main+0x54>
  {
  }
  BSP_LED_On(LED2);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fe76 	bl	80015cc <BSP_LED_On>
   
  while (ubRxComplete == 0)
 80008e0:	bf00      	nop
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <main+0xbc>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0fa      	beq.n	80008e2 <main+0x66>
  {
  }
  BSP_LED_On(LED1);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fe6d 	bl	80015cc <BSP_LED_On>


  /*## Send the received Buffer ###########################################*/
  /* Even if use of HAL IT based services is no more possible, use of HAL Polling based services
     (as Transmit in polling mode) is still possible. */
  if(HAL_UART_Transmit(&huart3, (uint8_t*)aRxBuffer, MAX_NMEA_LENGTH, 1000)!= HAL_OK)
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	2252      	movs	r2, #82	@ 0x52
 80008f8:	4910      	ldr	r1, [pc, #64]	@ (800093c <main+0xc0>)
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <main+0xc4>)
 80008fc:	f007 fc10 	bl	8008120 <HAL_UART_Transmit>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <main+0x8e>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 8000906:	f000 fb5f 	bl	8000fc8 <Error_Handler>
  }
  
  /*## Send the End Message ###############################################*/  
  if(HAL_UART_Transmit(&huart3, (uint8_t*)aTxEndMessage, TXENDMESSAGESIZE, 1000)!= HAL_OK)
 800090a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090e:	2215      	movs	r2, #21
 8000910:	490c      	ldr	r1, [pc, #48]	@ (8000944 <main+0xc8>)
 8000912:	480b      	ldr	r0, [pc, #44]	@ (8000940 <main+0xc4>)
 8000914:	f007 fc04 	bl	8008120 <HAL_UART_Transmit>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <main+0xa8>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 800091e:	f000 fb53 	bl	8000fc8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <main+0xa8>
 8000928:	40004800 	.word	0x40004800
 800092c:	200001b8 	.word	0x200001b8
 8000930:	20000000 	.word	0x20000000
 8000934:	200001b4 	.word	0x200001b4
 8000938:	200001b5 	.word	0x200001b5
 800093c:	200001bc 	.word	0x200001bc
 8000940:	20000120 	.word	0x20000120
 8000944:	20000078 	.word	0x20000078

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	@ 0x70
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2250      	movs	r2, #80	@ 0x50
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f008 ff88 	bl	800986c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800096e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <SystemClock_Config+0xd8>)
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <SystemClock_Config+0xd8>)
 8000974:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000978:	6113      	str	r3, [r2, #16]
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <SystemClock_Config+0xd8>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000986:	bf00      	nop
 8000988:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <SystemClock_Config+0xd8>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	2b08      	cmp	r3, #8
 8000992:	d1f9      	bne.n	8000988 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000998:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80009a2:	2303      	movs	r3, #3
 80009a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80009aa:	23fa      	movs	r3, #250	@ 0xfa
 80009ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80009be:	2300      	movs	r3, #0
 80009c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fb86 	bl	80020dc <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009d6:	f000 faf7 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	231f      	movs	r3, #31
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2303      	movs	r3, #3
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ffa7 	bl	800294c <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a04:	f000 fae0 	bl	8000fc8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemClock_Config+0xdc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <SystemClock_Config+0xdc>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	@ 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	44020800 	.word	0x44020800
 8000a24:	40022000 	.word	0x40022000

08000a28 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a2c:	f001 fb46 	bl	80020bc <HAL_ICACHE_Enable>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000a36:	f000 fac7 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <MX_USART3_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a8a:	f007 faf9 	bl	8008080 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 fa98 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a9c:	f008 fb8d 	bl	80091ba <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fa8f 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f008 fbc2 	bl	8009236 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fa86 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f008 fb43 	bl	8009148 <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fa7e 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000120 	.word	0x20000120
 8000ad4:	40004800 	.word	0x40004800

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae4:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_GPIO_Init+0x50>)
 8000b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	44020c00 	.word	0x44020c00

08000b2c <get_current_time_ms>:

/* USER CODE BEGIN 4 */

// Utility to get system time in ms
uint32_t get_current_time_ms(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // from STM32 HAL, returns ms since boot
 8000b30:	f000 fece 	bl	80018d0 <HAL_GetTick>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <calculate_nmea_checksum>:

// Compute XOR checksum between '$' and '*'
uint8_t calculate_nmea_checksum(const char *msg)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
    if (*msg == '$') msg++; // skip the starting $
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b24      	cmp	r3, #36	@ 0x24
 8000b4c:	d10a      	bne.n	8000b64 <calculate_nmea_checksum+0x2a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]

    while (*msg && *msg != '*') {
 8000b54:	e006      	b.n	8000b64 <calculate_nmea_checksum+0x2a>
        checksum ^= *msg++;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	4053      	eors	r3, r2
 8000b62:	73fb      	strb	r3, [r7, #15]
    while (*msg && *msg != '*') {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <calculate_nmea_checksum+0x3a>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b72:	d1f0      	bne.n	8000b56 <calculate_nmea_checksum+0x1c>
    }
    return checksum;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <validate_tag_block>:

// Validate TAG block if present (e.g., starts with `\` and ends with `\`)
bool validate_tag_block(const char *msg)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    if (msg[0] != '\\') {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8000b92:	d006      	beq.n	8000ba2 <validate_tag_block+0x1e>
        tag_framing_errors++;
 8000b94:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <validate_tag_block+0xf0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a36      	ldr	r2, [pc, #216]	@ (8000c74 <validate_tag_block+0xf0>)
 8000b9c:	6013      	str	r3, [r2, #0]
        return false;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e064      	b.n	8000c6c <validate_tag_block+0xe8>
    }

    const char *end = strchr(msg + 1, '\\');
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	215c      	movs	r1, #92	@ 0x5c
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fe67 	bl	800987c <strchr>
 8000bae:	6178      	str	r0, [r7, #20]
    if (!end) {
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d106      	bne.n	8000bc4 <validate_tag_block+0x40>
        tag_framing_errors++;
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <validate_tag_block+0xf0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8000c74 <validate_tag_block+0xf0>)
 8000bbe:	6013      	str	r3, [r2, #0]
        return false;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e053      	b.n	8000c6c <validate_tag_block+0xe8>
    }

    size_t len = end - msg + 1;
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
    if (len >= MAX_TAG_LENGTH) {
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd2:	d906      	bls.n	8000be2 <validate_tag_block+0x5e>
        tag_syntax_errors++;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <validate_tag_block+0xf4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a27      	ldr	r2, [pc, #156]	@ (8000c78 <validate_tag_block+0xf4>)
 8000bdc:	6013      	str	r3, [r2, #0]
        return false;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e044      	b.n	8000c6c <validate_tag_block+0xe8>
    }

    // Basic format and checksum check can go here (TAG*hh\)
    const char *star = strchr(msg, '*');
 8000be2:	212a      	movs	r1, #42	@ 0x2a
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f008 fe49 	bl	800987c <strchr>
 8000bea:	60f8      	str	r0, [r7, #12]
    if (!star || star > end - 3) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d004      	beq.n	8000bfc <validate_tag_block+0x78>
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d906      	bls.n	8000c0a <validate_tag_block+0x86>
        tag_format_errors++;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <validate_tag_block+0xf8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <validate_tag_block+0xf8>)
 8000c04:	6013      	str	r3, [r2, #0]
        return false;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e030      	b.n	8000c6c <validate_tag_block+0xe8>
    }

    uint8_t calc = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	77fb      	strb	r3, [r7, #31]
    for (const char *p = msg + 1; p < star; p++) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	e007      	b.n	8000c26 <validate_tag_block+0xa2>
        calc ^= *p;
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	7ffb      	ldrb	r3, [r7, #31]
 8000c1c:	4053      	eors	r3, r2
 8000c1e:	77fb      	strb	r3, [r7, #31]
    for (const char *p = msg + 1; p < star; p++) {
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	3301      	adds	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3f3      	bcc.n	8000c16 <validate_tag_block+0x92>
    }

    char hex[3] = { star[1], star[2], 0 };
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	723b      	strb	r3, [r7, #8]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	727b      	strb	r3, [r7, #9]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	72bb      	strb	r3, [r7, #10]
    uint8_t provided = (uint8_t)strtol(hex, NULL, 16);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	2210      	movs	r2, #16
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 fbfa 	bl	8009444 <strtol>
 8000c50:	4603      	mov	r3, r0
 8000c52:	72fb      	strb	r3, [r7, #11]

    if (calc != provided) {
 8000c54:	7ffa      	ldrb	r2, [r7, #31]
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d006      	beq.n	8000c6a <validate_tag_block+0xe6>
        tag_checksum_errors++;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <validate_tag_block+0xfc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <validate_tag_block+0xfc>)
 8000c64:	6013      	str	r3, [r2, #0]
        return false;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <validate_tag_block+0xe8>
    }

    return true;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000230 	.word	0x20000230
 8000c78:	2000022c 	.word	0x2000022c
 8000c7c:	20000224 	.word	0x20000224
 8000c80:	20000228 	.word	0x20000228

08000c84 <Validate_NMEA_Message>:

bool Validate_NMEA_Message(const char *NMEA_MESSAGE)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a0      	sub	sp, #128	@ 0x80
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    // Check for transmission timeout
    uint32_t now = get_current_time_ms();
 8000c8c:	f7ff ff4e 	bl	8000b2c <get_current_time_ms>
 8000c90:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (now - last_receive_time_ms > NMEA_TIMEOUT_MS) {
 8000c92:	4b6f      	ldr	r3, [pc, #444]	@ (8000e50 <Validate_NMEA_Message+0x1cc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c9e:	d909      	bls.n	8000cb4 <Validate_NMEA_Message+0x30>
        timeout_errors++;
 8000ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e54 <Validate_NMEA_Message+0x1d0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8000e54 <Validate_NMEA_Message+0x1d0>)
 8000ca8:	6013      	str	r3, [r2, #0]
        last_receive_time_ms = now;
 8000caa:	4a69      	ldr	r2, [pc, #420]	@ (8000e50 <Validate_NMEA_Message+0x1cc>)
 8000cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cae:	6013      	str	r3, [r2, #0]
        return false;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e0c9      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
    }
    last_receive_time_ms = now;
 8000cb4:	4a66      	ldr	r2, [pc, #408]	@ (8000e50 <Validate_NMEA_Message+0x1cc>)
 8000cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cb8:	6013      	str	r3, [r2, #0]

    const char *sentence = NMEA_MESSAGE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Check and validate optional TAG block
    if (*NMEA_MESSAGE == '\\') {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cc4:	d119      	bne.n	8000cfa <Validate_NMEA_Message+0x76>
        if (!validate_tag_block(NMEA_MESSAGE)) {
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff5c 	bl	8000b84 <validate_tag_block>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f083 0301 	eor.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <Validate_NMEA_Message+0x58>
            return false;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e0b5      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
        }

        // Find end of TAG block
        const char *end_tag = strchr(NMEA_MESSAGE + 1, '\\');
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	215c      	movs	r1, #92	@ 0x5c
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 fdca 	bl	800987c <strchr>
 8000ce8:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (!end_tag) return false;
 8000cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <Validate_NMEA_Message+0x70>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e0a9      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
        sentence = end_tag + 1;
 8000cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }

    // Check if sentence starts with $ and has checksum *
    if (*sentence != '$') return false;
 8000cfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b24      	cmp	r3, #36	@ 0x24
 8000d00:	d001      	beq.n	8000d06 <Validate_NMEA_Message+0x82>
 8000d02:	2300      	movs	r3, #0
 8000d04:	e0a0      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>

    const char *star = strchr(sentence, '*');
 8000d06:	212a      	movs	r1, #42	@ 0x2a
 8000d08:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000d0a:	f008 fdb7 	bl	800987c <strchr>
 8000d0e:	6678      	str	r0, [r7, #100]	@ 0x64
    if (!star || strlen(star) < 3) {
 8000d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <Validate_NMEA_Message+0x9e>
 8000d16:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d18:	f7ff fab8 	bl	800028c <strlen>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d806      	bhi.n	8000d30 <Validate_NMEA_Message+0xac>
        checksum_errors++;
 8000d22:	4b4d      	ldr	r3, [pc, #308]	@ (8000e58 <Validate_NMEA_Message+0x1d4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a4b      	ldr	r2, [pc, #300]	@ (8000e58 <Validate_NMEA_Message+0x1d4>)
 8000d2a:	6013      	str	r3, [r2, #0]
        return false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e08b      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
    }

    // Calculate and compare checksum
    uint8_t calc = calculate_nmea_checksum(sentence);
 8000d30:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000d32:	f7ff ff02 	bl	8000b3a <calculate_nmea_checksum>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    char hex[3] = { star[1], star[2], 0 };
 8000d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d3e:	3301      	adds	r3, #1
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8000d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d48:	3302      	adds	r3, #2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t expected = (uint8_t)strtol(hex, NULL, 16);
 8000d56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f008 fb70 	bl	8009444 <strtol>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    if (calc != expected) {
 8000d6a:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8000d6e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d006      	beq.n	8000d84 <Validate_NMEA_Message+0x100>
        checksum_errors++;
 8000d76:	4b38      	ldr	r3, [pc, #224]	@ (8000e58 <Validate_NMEA_Message+0x1d4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a36      	ldr	r2, [pc, #216]	@ (8000e58 <Validate_NMEA_Message+0x1d4>)
 8000d7e:	6013      	str	r3, [r2, #0]
        return false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e061      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
    }

    // Check for invalid characters
    for (const char *p = sentence; *p && *p != '*'; p++) {
 8000d84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000d88:	e01b      	b.n	8000dc2 <Validate_NMEA_Message+0x13e>
        if (!isprint((unsigned char)*p) && *p != '\r' && *p != '\n') {
 8000d8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a32      	ldr	r2, [pc, #200]	@ (8000e5c <Validate_NMEA_Message+0x1d8>)
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10e      	bne.n	8000dbc <Validate_NMEA_Message+0x138>
 8000d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b0d      	cmp	r3, #13
 8000da4:	d00a      	beq.n	8000dbc <Validate_NMEA_Message+0x138>
 8000da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d006      	beq.n	8000dbc <Validate_NMEA_Message+0x138>
            invalid_char_errors++;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <Validate_NMEA_Message+0x1dc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a2a      	ldr	r2, [pc, #168]	@ (8000e60 <Validate_NMEA_Message+0x1dc>)
 8000db6:	6013      	str	r3, [r2, #0]
            return false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e045      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
    for (const char *p = sentence; *p && *p != '*'; p++) {
 8000dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <Validate_NMEA_Message+0x14e>
 8000dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dd0:	d1db      	bne.n	8000d8a <Validate_NMEA_Message+0x106>
        }
    }

    // Check field lengths
    char copy[MAX_NMEA_LENGTH];
    strncpy(copy, sentence, sizeof(copy) - 1);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2251      	movs	r2, #81	@ 0x51
 8000dd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f008 fd5b 	bl	8009896 <strncpy>
    copy[sizeof(copy) - 1] = '\0';
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

    char *token = strtok(copy + 1, ","); // Skip '$'
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	3301      	adds	r3, #1
 8000dec:	491d      	ldr	r1, [pc, #116]	@ (8000e64 <Validate_NMEA_Message+0x1e0>)
 8000dee:	4618      	mov	r0, r3
 8000df0:	f008 fd64 	bl	80098bc <strtok>
 8000df4:	6778      	str	r0, [r7, #116]	@ 0x74
    int field_count = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	673b      	str	r3, [r7, #112]	@ 0x70

    while (token) {
 8000dfa:	e014      	b.n	8000e26 <Validate_NMEA_Message+0x1a2>
        if (strlen(token) > 20) { // arbitrary field limit
 8000dfc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000dfe:	f7ff fa45 	bl	800028c <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b14      	cmp	r3, #20
 8000e06:	d906      	bls.n	8000e16 <Validate_NMEA_Message+0x192>
            field_length_errors++;
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <Validate_NMEA_Message+0x1e4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <Validate_NMEA_Message+0x1e4>)
 8000e10:	6013      	str	r3, [r2, #0]
            return false;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e018      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
        }
        token = strtok(NULL, ",");
 8000e16:	4913      	ldr	r1, [pc, #76]	@ (8000e64 <Validate_NMEA_Message+0x1e0>)
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f008 fd4f 	bl	80098bc <strtok>
 8000e1e:	6778      	str	r0, [r7, #116]	@ 0x74
        field_count++;
 8000e20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e22:	3301      	adds	r3, #1
 8000e24:	673b      	str	r3, [r7, #112]	@ 0x70
    while (token) {
 8000e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e7      	bne.n	8000dfc <Validate_NMEA_Message+0x178>
    }

    if (field_count < 1 || field_count > 30) {
 8000e2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	dd02      	ble.n	8000e38 <Validate_NMEA_Message+0x1b4>
 8000e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e34:	2b1e      	cmp	r3, #30
 8000e36:	dd06      	ble.n	8000e46 <Validate_NMEA_Message+0x1c2>
        field_length_errors++;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <Validate_NMEA_Message+0x1e4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <Validate_NMEA_Message+0x1e4>)
 8000e40:	6013      	str	r3, [r2, #0]
        return false;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <Validate_NMEA_Message+0x1c4>
    }

    return true;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3780      	adds	r7, #128	@ 0x80
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000234 	.word	0x20000234
 8000e54:	20000220 	.word	0x20000220
 8000e58:	20000214 	.word	0x20000214
 8000e5c:	0800a628 	.word	0x0800a628
 8000e60:	20000218 	.word	0x20000218
 8000e64:	0800a5ac 	.word	0x0800a5ac
 8000e68:	2000021c 	.word	0x2000021c

08000e6c <UART_CharReception_Callback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and 
  *         you can add your own implementation.
  * @retval None
  */
void UART_CharReception_Callback(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	/* Read received character. RXNE flag is cleared by reading RDR */
    char receivedChar = (char)LL_USART_ReceiveData8(USART3);
 8000e72:	4822      	ldr	r0, [pc, #136]	@ (8000efc <UART_CharReception_Callback+0x90>)
 8000e74:	f7ff fce6 	bl	8000844 <LL_USART_ReceiveData8>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]


	if (uwRxIndex < MAX_NMEA_LENGTH - 1) // Leave space for null terminator
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b50      	cmp	r3, #80	@ 0x50
 8000e82:	d816      	bhi.n	8000eb2 <UART_CharReception_Callback+0x46>
	{
		aRxBuffer[uwRxIndex++] = receivedChar;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000e8c:	600a      	str	r2, [r1, #0]
 8000e8e:	491d      	ldr	r1, [pc, #116]	@ (8000f04 <UART_CharReception_Callback+0x98>)
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	54ca      	strb	r2, [r1, r3]

		if (receivedChar == '\n') // End of message detected
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d115      	bne.n	8000ec6 <UART_CharReception_Callback+0x5a>
		{
		  aRxBuffer[uwRxIndex] = '\0'; // Null-terminate the string
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <UART_CharReception_Callback+0x98>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	54d1      	strb	r1, [r2, r3]
		  ubRxComplete = 1;            // Set flag to indicate message is ready
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <UART_CharReception_Callback+0x9c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
		  uwRxIndex = 0;               // Reset for next message
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e009      	b.n	8000ec6 <UART_CharReception_Callback+0x5a>
		}
	}
	else
	{
		// Optional: handle buffer overflow
		aRxBuffer[MAX_NMEA_LENGTH - 1] = '\0';
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <UART_CharReception_Callback+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
		ubRxComplete = 1;
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <UART_CharReception_Callback+0x9c>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
		uwRxIndex = 0;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <UART_CharReception_Callback+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
	}
	if (ubRxComplete)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <UART_CharReception_Callback+0x9c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d010      	beq.n	8000ef2 <UART_CharReception_Callback+0x86>
	{
	    if (Validate_NMEA_Message(aRxBuffer))
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <UART_CharReception_Callback+0x98>)
 8000ed2:	f7ff fed7 	bl	8000c84 <Validate_NMEA_Message>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <UART_CharReception_Callback+0x7a>
	    {
	        printf("Valid NMEA message: %s", aRxBuffer);
 8000edc:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <UART_CharReception_Callback+0x98>)
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <UART_CharReception_Callback+0xa0>)
 8000ee0:	f008 fb7c 	bl	80095dc <iprintf>
 8000ee4:	e002      	b.n	8000eec <UART_CharReception_Callback+0x80>
	    }
	    else
	    {
	        printf("Invalid NMEA message\n");
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <UART_CharReception_Callback+0xa4>)
 8000ee8:	f008 fbe0 	bl	80096ac <puts>
	    }
	    ubRxComplete = 0;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <UART_CharReception_Callback+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004800 	.word	0x40004800
 8000f00:	20000210 	.word	0x20000210
 8000f04:	200001bc 	.word	0x200001bc
 8000f08:	200001b5 	.word	0x200001b5
 8000f0c:	0800a5b0 	.word	0x0800a5b0
 8000f10:	0800a5c8 	.word	0x0800a5c8

08000f14 <UART_TXEmpty_Callback>:
/**
  * @brief  Function called for achieving next TX Byte sending
  * @retval None
  */
void UART_TXEmpty_Callback(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  if(uwTxIndex == (ubSizeToSend - 1))
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <UART_TXEmpty_Callback+0x3c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <UART_TXEmpty_Callback+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d105      	bne.n	8000f34 <UART_TXEmpty_Callback+0x20>
  {
    /* Disable TXE interrupt */
    LL_USART_DisableIT_TXE(USART3);
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <UART_TXEmpty_Callback+0x44>)
 8000f2a:	f7ff fc6a 	bl	8000802 <LL_USART_DisableIT_TXE_TXFNF>
    
    /* Enable TC interrupt */
    LL_USART_EnableIT_TC(USART3);
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <UART_TXEmpty_Callback+0x44>)
 8000f30:	f7ff fbe1 	bl	80006f6 <LL_USART_EnableIT_TC>
  }

  /* Fill TDR with a new char */
  LL_USART_TransmitData8(USART3, aTxStartMessage[uwTxIndex++]);
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <UART_TXEmpty_Callback+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4906      	ldr	r1, [pc, #24]	@ (8000f54 <UART_TXEmpty_Callback+0x40>)
 8000f3c:	600a      	str	r2, [r1, #0]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <UART_TXEmpty_Callback+0x48>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <UART_TXEmpty_Callback+0x44>)
 8000f46:	f7ff fc8a 	bl	800085e <LL_USART_TransmitData8>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000077 	.word	0x20000077
 8000f54:	200001b8 	.word	0x200001b8
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	20000000 	.word	0x20000000

08000f60 <UART_CharTransmitComplete_Callback>:
/**
  * @brief  Function called at completion of last byte transmission
  * @retval None
  */
void UART_CharTransmitComplete_Callback(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  if(uwTxIndex == sizeof(aTxStartMessage))
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <UART_CharTransmitComplete_Callback+0x24>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b77      	cmp	r3, #119	@ 0x77
 8000f6a:	d108      	bne.n	8000f7e <UART_CharTransmitComplete_Callback+0x1e>
  {
    uwTxIndex = 0;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <UART_CharTransmitComplete_Callback+0x24>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    
    /* Disable TC interrupt */
    LL_USART_DisableIT_TC(USART3);
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <UART_CharTransmitComplete_Callback+0x28>)
 8000f74:	f7ff fc24 	bl	80007c0 <LL_USART_DisableIT_TC>
    
    /* Set Tx complete boolean to 1 */
    ubTxComplete = 1;
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <UART_CharTransmitComplete_Callback+0x2c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001b8 	.word	0x200001b8
 8000f88:	40004800 	.word	0x40004800
 8000f8c:	200001b4 	.word	0x200001b4

08000f90 <UART_Error_Callback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void UART_Error_Callback(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  __IO uint32_t isr_reg;

  /* Disable USARTx_IRQn */
  NVIC_DisableIRQ(USART3_IRQn);
 8000f96:	203c      	movs	r0, #60	@ 0x3c
 8000f98:	f7ff fb68 	bl	800066c <__NVIC_DisableIRQ>
  
  /* Error handling example :
    - Read USART ISR register to identify flag that leads to IT raising
    - Perform corresponding error handling treatment according to flag
  */
  isr_reg = LL_USART_ReadReg(USART3, ISR);
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <UART_Error_Callback+0x34>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	607b      	str	r3, [r7, #4]
  if (isr_reg & LL_USART_ISR_NE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <UART_Error_Callback+0x24>
  {
    /* Turn LED3 on: Transfer error in reception/transmission process */
    BSP_LED_On(LED3);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <BSP_LED_On>
  else
  {
    /* Turn LED3 on: Transfer error in reception/transmission process */
    BSP_LED_On(LED3);
  }
}
 8000fb2:	e002      	b.n	8000fba <UART_Error_Callback+0x2a>
    BSP_LED_On(LED3);
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f000 fb09 	bl	80015cc <BSP_LED_On>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Toggle LED3 for error */
  while(1)
  {
    BSP_LED_Toggle(LED3);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f000 fb27 	bl	8001620 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd6:	f000 fc87 	bl	80018e8 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 8000fda:	bf00      	nop
 8000fdc:	e7f6      	b.n	8000fcc <Error_Handler+0x4>

08000fde <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0cc      	sub	sp, #304	@ 0x130
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ffa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001010:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001014:	4618      	mov	r0, r3
 8001016:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800101a:	461a      	mov	r2, r3
 800101c:	2100      	movs	r1, #0
 800101e:	f008 fc25 	bl	800986c <memset>
  if(huart->Instance==USART3)
 8001022:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001026:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a37      	ldr	r2, [pc, #220]	@ (800110c <HAL_UART_MspInit+0x120>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d165      	bne.n	8001100 <HAL_UART_MspInit+0x114>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001034:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001038:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800103c:	f04f 0204 	mov.w	r2, #4
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800104c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001050:	2200      	movs	r2, #0
 8001052:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4618      	mov	r0, r3
 800105a:	f001 ffb9 	bl	8002fd0 <HAL_RCCEx_PeriphCLKConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001064:	f7ff ffb0 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001068:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <HAL_UART_MspInit+0x124>)
 800106a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800106e:	4a28      	ldr	r2, [pc, #160]	@ (8001110 <HAL_UART_MspInit+0x124>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_UART_MspInit+0x124>)
 800107a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800107e:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001086:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001090:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001094:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <HAL_UART_MspInit+0x124>)
 8001098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109c:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <HAL_UART_MspInit+0x124>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <HAL_UART_MspInit+0x124>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	f003 0208 	and.w	r2, r3, #8
 80010b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80010c2:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010de:	2307      	movs	r3, #7
 80010e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80010e8:	4619      	mov	r1, r3
 80010ea:	480a      	ldr	r0, [pc, #40]	@ (8001114 <HAL_UART_MspInit+0x128>)
 80010ec:	f000 fe56 	bl	8001d9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	203c      	movs	r0, #60	@ 0x3c
 80010f6:	f000 fcd3 	bl	8001aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010fa:	203c      	movs	r0, #60	@ 0x3c
 80010fc:	f000 fcea 	bl	8001ad4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001100:	bf00      	nop
 8001102:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004800 	.word	0x40004800
 8001110:	44020c00 	.word	0x44020c00
 8001114:	42020c00 	.word	0x42020c00

08001118 <LL_USART_IsActiveFlag_NE>:
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b04      	cmp	r3, #4
 800112a:	d101      	bne.n	8001130 <LL_USART_IsActiveFlag_NE+0x18>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <LL_USART_IsActiveFlag_NE+0x1a>
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	2b20      	cmp	r3, #32
 8001150:	d101      	bne.n	8001156 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_USART_IsActiveFlag_TC>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001174:	2b40      	cmp	r3, #64	@ 0x40
 8001176:	d101      	bne.n	800117c <LL_USART_IsActiveFlag_TC+0x18>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_USART_IsActiveFlag_TC+0x1a>
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	2b80      	cmp	r3, #128	@ 0x80
 800119c:	d101      	bne.n	80011a2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_USART_ClearFlag_TC>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	621a      	str	r2, [r3, #32]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d101      	bne.n	80011e2 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_USART_IsEnabledIT_TC>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001200:	2b40      	cmp	r3, #64	@ 0x40
 8001202:	d101      	bne.n	8001208 <LL_USART_IsEnabledIT_TC+0x18>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <LL_USART_IsEnabledIT_TC+0x1a>
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_USART_IsEnabledIT_TXE_TXFNF>:
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001226:	2b80      	cmp	r3, #128	@ 0x80
 8001228:	d101      	bne.n	800122e <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_USART_IsEnabledIT_ERROR>:
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <LL_USART_IsEnabledIT_ERROR+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_USART_IsEnabledIT_ERROR+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 faf3 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* Customize process using LL interface to improve the performance (exhaustive feature management not handled) */

  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 80012cc:	481f      	ldr	r0, [pc, #124]	@ (800134c <USART3_IRQHandler+0x84>)
 80012ce:	f7ff ff36 	bl	800113e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <USART3_IRQHandler+0x20>
 80012d8:	481c      	ldr	r0, [pc, #112]	@ (800134c <USART3_IRQHandler+0x84>)
 80012da:	f7ff ff76 	bl	80011ca <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <USART3_IRQHandler+0x20>
  {
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    UART_CharReception_Callback();
 80012e4:	f7ff fdc2 	bl	8000e6c <UART_CharReception_Callback>
  }

  if(LL_USART_IsEnabledIT_TXE(USART3) && LL_USART_IsActiveFlag_TXE(USART3))
 80012e8:	4818      	ldr	r0, [pc, #96]	@ (800134c <USART3_IRQHandler+0x84>)
 80012ea:	f7ff ff94 	bl	8001216 <LL_USART_IsEnabledIT_TXE_TXFNF>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <USART3_IRQHandler+0x3c>
 80012f4:	4815      	ldr	r0, [pc, #84]	@ (800134c <USART3_IRQHandler+0x84>)
 80012f6:	f7ff ff48 	bl	800118a <LL_USART_IsActiveFlag_TXE_TXFNF>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <USART3_IRQHandler+0x3c>
  {
    /* TXE flag will be automatically cleared when writing new data in TDR register */

    /* Call function in charge of handling empty DR => will lead to transmission of next character */
    UART_TXEmpty_Callback();
 8001300:	f7ff fe08 	bl	8000f14 <UART_TXEmpty_Callback>
  }

  if(LL_USART_IsEnabledIT_TC(USART3) && LL_USART_IsActiveFlag_TC(USART3))
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <USART3_IRQHandler+0x84>)
 8001306:	f7ff ff73 	bl	80011f0 <LL_USART_IsEnabledIT_TC>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00a      	beq.n	8001326 <USART3_IRQHandler+0x5e>
 8001310:	480e      	ldr	r0, [pc, #56]	@ (800134c <USART3_IRQHandler+0x84>)
 8001312:	f7ff ff27 	bl	8001164 <LL_USART_IsActiveFlag_TC>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <USART3_IRQHandler+0x5e>
  {
    /* Clear TC flag */
    LL_USART_ClearFlag_TC(USART3);
 800131c:	480b      	ldr	r0, [pc, #44]	@ (800134c <USART3_IRQHandler+0x84>)
 800131e:	f7ff ff47 	bl	80011b0 <LL_USART_ClearFlag_TC>
    /* Call function in charge of handling end of transmission of sent character
       and prepare next character transmission */
    UART_CharTransmitComplete_Callback();
 8001322:	f7ff fe1d 	bl	8000f60 <UART_CharTransmitComplete_Callback>
  }

  if(LL_USART_IsEnabledIT_ERROR(USART3) && LL_USART_IsActiveFlag_NE(USART3))
 8001326:	4809      	ldr	r0, [pc, #36]	@ (800134c <USART3_IRQHandler+0x84>)
 8001328:	f7ff ff88 	bl	800123c <LL_USART_IsEnabledIT_ERROR>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <USART3_IRQHandler+0x7a>
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <USART3_IRQHandler+0x84>)
 8001334:	f7ff fef0 	bl	8001118 <LL_USART_IsActiveFlag_NE>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <USART3_IRQHandler+0x7a>
  {
    /* Call Error function */
    UART_Error_Callback();
 800133e:	f7ff fe27 	bl	8000f90 <UART_Error_Callback>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001342:	4803      	ldr	r0, [pc, #12]	@ (8001350 <USART3_IRQHandler+0x88>)
 8001344:	f006 ff8a 	bl	800825c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004800 	.word	0x40004800
 8001350:	20000120 	.word	0x20000120

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136e:	f008 fb47 	bl	8009a00 <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <_exit+0x12>

0800139a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00a      	b.n	80013c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ac:	f3af 8000 	nop.w
 80013b0:	4601      	mov	r1, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	b2ca      	uxtb	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf0      	blt.n	80013ac <_read+0x12>
  }

  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e009      	b.n	80013fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbf1      	blt.n	80013e6 <_write+0x12>
  }
  return len;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_close>:

int _close(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001434:	605a      	str	r2, [r3, #4]
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_isatty>:

int _isatty(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f008 faac 	bl	8009a00 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200a0000 	.word	0x200a0000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000238 	.word	0x20000238
 80014dc:	20000390 	.word	0x20000390

080014e0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d009      	beq.n	8001508 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <BSP_LED_Init+0x28>
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d003      	beq.n	8001508 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001500:	f06f 0301 	mvn.w	r3, #1
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001506:	e055      	b.n	80015b4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10f      	bne.n	800152e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800150e:	4b2c      	ldr	r3, [pc, #176]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001514:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001516:	f043 0320 	orr.w	r3, r3, #32
 800151a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151e:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	e021      	b.n	8001572 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153a:	4a21      	ldr	r2, [pc, #132]	@ (80015c0 <BSP_LED_Init+0xe0>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	e00e      	b.n	8001572 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155a:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <BSP_LED_Init+0xe0>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001560:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <BSP_LED_Init+0xe0>)
 8001566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <BSP_LED_Init+0xe4>)
 8001576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800157a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <BSP_LED_Init+0xe8>)
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	f107 0218 	add.w	r2, r7, #24
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fc00 	bl	8001d9c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <BSP_LED_Init+0xe8>)
 80015a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <BSP_LED_Init+0xe4>)
 80015a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	f000 fd52 	bl	8002058 <HAL_GPIO_WritePin>
  }

  return ret;
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	44020c00 	.word	0x44020c00
 80015c4:	0800a5e0 	.word	0x0800a5e0
 80015c8:	20000090 	.word	0x20000090

080015cc <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d009      	beq.n	80015f4 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <BSP_LED_On+0x28>
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d003      	beq.n	80015f4 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015ec:	f06f 0301 	mvn.w	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e00b      	b.n	800160c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <BSP_LED_On+0x4c>)
 80015f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4a07      	ldr	r2, [pc, #28]	@ (800161c <BSP_LED_On+0x50>)
 8001600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	f000 fd26 	bl	8002058 <HAL_GPIO_WritePin>
  }

  return ret;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000090 	.word	0x20000090
 800161c:	0800a5e0 	.word	0x0800a5e0

08001620 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d009      	beq.n	8001648 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <BSP_LED_Toggle+0x28>
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d003      	beq.n	8001648 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001640:	f06f 0301 	mvn.w	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e00b      	b.n	8001660 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <BSP_LED_Toggle+0x4c>)
 800164c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4907      	ldr	r1, [pc, #28]	@ (8001670 <BSP_LED_Toggle+0x50>)
 8001654:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f000 fd14 	bl	8002088 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001660:	68fb      	ldr	r3, [r7, #12]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000090 	.word	0x20000090
 8001670:	0800a5e0 	.word	0x0800a5e0

08001674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167a:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <SystemInit+0xdc>)
 800167c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001680:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <SystemInit+0xdc>)
 8001682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001686:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800168a:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <SystemInit+0xe0>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <SystemInit+0xe0>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <SystemInit+0xe0>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <SystemInit+0xe0>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	492c      	ldr	r1, [pc, #176]	@ (8001754 <SystemInit+0xe0>)
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <SystemInit+0xe4>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <SystemInit+0xe0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <SystemInit+0xe0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <SystemInit+0xe0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80016ba:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <SystemInit+0xe0>)
 80016bc:	4a27      	ldr	r2, [pc, #156]	@ (800175c <SystemInit+0xe8>)
 80016be:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <SystemInit+0xe0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <SystemInit+0xe0>)
 80016c8:	4a24      	ldr	r2, [pc, #144]	@ (800175c <SystemInit+0xe8>)
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <SystemInit+0xe0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <SystemInit+0xe0>)
 80016d4:	4a21      	ldr	r2, [pc, #132]	@ (800175c <SystemInit+0xe8>)
 80016d6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <SystemInit+0xe0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <SystemInit+0xe0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <SystemInit+0xe0>)
 80016e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <SystemInit+0xe0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <SystemInit+0xdc>)
 80016f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016f6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <SystemInit+0xec>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001700:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001708:	d003      	beq.n	8001712 <SystemInit+0x9e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001710:	d117      	bne.n	8001742 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <SystemInit+0xec>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <SystemInit+0xec>)
 8001720:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <SystemInit+0xf0>)
 8001722:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <SystemInit+0xec>)
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <SystemInit+0xf4>)
 8001728:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <SystemInit+0xec>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <SystemInit+0xec>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <SystemInit+0xec>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <SystemInit+0xec>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	61d3      	str	r3, [r2, #28]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	44020c00 	.word	0x44020c00
 8001758:	eae2eae3 	.word	0xeae2eae3
 800175c:	01010280 	.word	0x01010280
 8001760:	40022000 	.word	0x40022000
 8001764:	08192a3b 	.word	0x08192a3b
 8001768:	4c5d6e7f 	.word	0x4c5d6e7f

0800176c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f98a 	bl	8001a8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001776:	f001 faa1 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_Init+0x44>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	490b      	ldr	r1, [pc, #44]	@ (80017b4 <HAL_Init+0x48>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <HAL_Init+0x4c>)
 800178e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001790:	2004      	movs	r0, #4
 8001792:	f000 f9cf 	bl	8001b34 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f810 	bl	80017bc <HAL_InitTick>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e002      	b.n	80017ac <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017a6:	f7ff fc1a 	bl	8000fde <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	44020c00 	.word	0x44020c00
 80017b4:	0800a5e8 	.word	0x0800a5e8
 80017b8:	2000009c 	.word	0x2000009c

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_InitTick+0xdc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e05c      	b.n	800188e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80017d4:	4b31      	ldr	r3, [pc, #196]	@ (800189c <HAL_InitTick+0xe0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d10c      	bne.n	80017fa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017e0:	4b2f      	ldr	r3, [pc, #188]	@ (80018a0 <HAL_InitTick+0xe4>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <HAL_InitTick+0xdc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e037      	b.n	800186a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80017fa:	f000 f9f3 	bl	8001be4 <HAL_SYSTICK_GetCLKSourceConfig>
 80017fe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d023      	beq.n	800184e <HAL_InitTick+0x92>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d82d      	bhi.n	8001868 <HAL_InitTick+0xac>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_InitTick+0x5e>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00d      	beq.n	8001834 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001818:	e026      	b.n	8001868 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <HAL_InitTick+0xe4>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <HAL_InitTick+0xdc>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001828:	fbb3 f3f1 	udiv	r3, r3, r1
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
        break;
 8001832:	e01a      	b.n	800186a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_InitTick+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001842:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
        break;
 800184c:	e00d      	b.n	800186a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0xdc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001858:	fbb3 f3f2 	udiv	r3, r3, r2
 800185c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	60fb      	str	r3, [r7, #12]
        break;
 8001866:	e000      	b.n	800186a <HAL_InitTick+0xae>
        break;
 8001868:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f940 	bl	8001af0 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e009      	b.n	800188e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187a:	2200      	movs	r2, #0
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	f000 f90d 	bl	8001aa0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001886:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <HAL_InitTick+0xe8>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000a4 	.word	0x200000a4
 800189c:	e000e010 	.word	0xe000e010
 80018a0:	2000009c 	.word	0x2000009c
 80018a4:	200000a0 	.word	0x200000a0

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200000a4 	.word	0x200000a4
 80018cc:	2000023c 	.word	0x2000023c

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000023c 	.word	0x2000023c

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000a4 	.word	0x200000a4

08001930 <__NVIC_SetPriorityGrouping>:
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	@ (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	@ (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	@ (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	@ 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff4c 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aae:	f7ff ff63 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ab2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	6978      	ldr	r0, [r7, #20]
 8001aba:	f7ff ffb3 	bl	8001a24 <NVIC_EncodePriority>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff82 	bl	80019d0 <__NVIC_SetPriority>
}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff56 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00d      	b.n	8001b22 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_SYSTICK_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_SYSTICK_Config+0x40>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_SYSTICK_Config+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <HAL_SYSTICK_Config+0x40>)
 8001b1a:	f043 0303 	orr.w	r3, r3, #3
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d844      	bhi.n	8001bcc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001b42:	a201      	add	r2, pc, #4	@ (adr r2, 8001b48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b6b 	.word	0x08001b6b
 8001b4c:	08001b89 	.word	0x08001b89
 8001b50:	08001bab 	.word	0x08001bab
 8001b54:	08001bcd 	.word	0x08001bcd
 8001b58:	08001b5d 	.word	0x08001b5d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6013      	str	r3, [r2, #0]
      break;
 8001b68:	e031      	b.n	8001bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b7c:	4a18      	ldr	r2, [pc, #96]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b7e:	f023 030c 	bic.w	r3, r3, #12
 8001b82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b86:	e022      	b.n	8001bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b9a:	f023 030c 	bic.w	r3, r3, #12
 8001b9e:	4a10      	ldr	r2, [pc, #64]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001ba8:	e011      	b.n	8001bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bbc:	f023 030c 	bic.w	r3, r3, #12
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001bca:	e000      	b.n	8001bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001bcc:	bf00      	nop
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010
 8001be0:	44020c00 	.word	0x44020c00

08001be4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e01e      	b.n	8001c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d00f      	beq.n	8001c2e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d80f      	bhi.n	8001c34 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d003      	beq.n	8001c28 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001c20:	e008      	b.n	8001c34 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
        break;
 8001c26:	e008      	b.n	8001c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
        break;
 8001c2c:	e005      	b.n	8001c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
        break;
 8001c32:	e002      	b.n	8001c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
        break;
 8001c38:	bf00      	nop
    }
  }
  return systick_source;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e010 	.word	0xe000e010
 8001c4c:	44020c00 	.word	0x44020c00

08001c50 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001c58:	f7ff fe3a 	bl	80018d0 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e06b      	b.n	8001d40 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e05c      	b.n	8001d40 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0204 	orr.w	r2, r2, #4
 8001c94:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2205      	movs	r2, #5
 8001c9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001c9e:	e020      	b.n	8001ce2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001ca0:	f7ff fe16 	bl	80018d0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d919      	bls.n	8001ce2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f043 0210 	orr.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e02e      	b.n	8001d40 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0d7      	beq.n	8001ca0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0202 	orr.w	r2, r2, #2
 8001cfe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001d10:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e019      	b.n	8001d8e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e00e      	b.n	8001d8e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001daa:	e142      	b.n	8002032 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8134 	beq.w	800202c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x38>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b12      	cmp	r3, #18
 8001dd2:	d125      	bne.n	8001e20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 020f 	and.w	r2, r3, #15
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d00b      	beq.n	8001e74 <HAL_GPIO_Init+0xd8>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d130      	bne.n	8001ed6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 0201 	and.w	r2, r3, #1
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d109      	bne.n	8001ef6 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d11b      	bne.n	8001f26 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d017      	beq.n	8001f26 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07c      	beq.n	800202c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f32:	4a47      	ldr	r2, [pc, #284]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3318      	adds	r3, #24
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0a9a      	lsrs	r2, r3, #10
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	4093      	lsls	r3, r2
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f6e:	4938      	ldr	r1, [pc, #224]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3318      	adds	r3, #24
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001fca:	4a21      	ldr	r2, [pc, #132]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ff6:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8002000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002004:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43db      	mvns	r3, r3
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	3301      	adds	r3, #1
 8002030:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	f47f aeb5 	bne.w	8001dac <HAL_GPIO_Init+0x10>
  }
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	44022000 	.word	0x44022000
 8002054:	002f7f7f 	.word	0x002f7f7f

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002074:	e002      	b.n	800207c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43d9      	mvns	r1, r3
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	400b      	ands	r3, r1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40030400 	.word	0x40030400

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 bc28 	b.w	8002940 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f0:	4b94      	ldr	r3, [pc, #592]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f003 0318 	and.w	r3, r3, #24
 80020f8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80020fa:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05b      	beq.n	80021c8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b08      	cmp	r3, #8
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x46>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b18      	cmp	r3, #24
 800211a:	d114      	bne.n	8002146 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d111      	bne.n	8002146 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 bc08 	b.w	8002940 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002130:	4b84      	ldr	r3, [pc, #528]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4981      	ldr	r1, [pc, #516]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002140:	4313      	orrs	r3, r2
 8002142:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002144:	e040      	b.n	80021c8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d023      	beq.n	8002196 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800214e:	4b7d      	ldr	r3, [pc, #500]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7c      	ldr	r2, [pc, #496]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff fbb9 	bl	80018d0 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002162:	f7ff fbb5 	bl	80018d0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e3e5      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002174:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002180:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	496d      	ldr	r1, [pc, #436]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002190:	4313      	orrs	r3, r2
 8002192:	618b      	str	r3, [r1, #24]
 8002194:	e018      	b.n	80021c8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002196:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6a      	ldr	r2, [pc, #424]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800219c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff fb95 	bl	80018d0 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80021aa:	f7ff fb91 	bl	80018d0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e3c1      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021bc:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80a0 	beq.w	8002316 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x10c>
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b18      	cmp	r3, #24
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 8092 	bne.w	8002316 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e3a4      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x132>
 8002200:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a4f      	ldr	r2, [pc, #316]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e058      	b.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x160>
 8002216:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4a      	ldr	r2, [pc, #296]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b48      	ldr	r3, [pc, #288]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a47      	ldr	r2, [pc, #284]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002228:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b45      	ldr	r3, [pc, #276]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a44      	ldr	r2, [pc, #272]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e041      	b.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x190>
 8002246:	4b3f      	ldr	r3, [pc, #252]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a3e      	ldr	r2, [pc, #248]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b3c      	ldr	r3, [pc, #240]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a3b      	ldr	r2, [pc, #236]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002258:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a38      	ldr	r2, [pc, #224]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e029      	b.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002274:	d112      	bne.n	800229c <HAL_RCC_OscConfig+0x1c0>
 8002276:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a32      	ldr	r2, [pc, #200]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b30      	ldr	r3, [pc, #192]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2f      	ldr	r2, [pc, #188]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2c      	ldr	r2, [pc, #176]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e011      	b.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
 800229c:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff fb02 	bl	80018d0 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fafe 	bl	80018d0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e32e      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x1f4>
 80022ee:	e012      	b.n	8002316 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff faee 	bl	80018d0 <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022f8:	f7ff faea 	bl	80018d0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e31a      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_RCC_OscConfig+0x268>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 809a 	beq.w	8002458 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x25a>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b18      	cmp	r3, #24
 800232e:	d149      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d146      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2fe      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
 8002342:	bf00      	nop
 8002344:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800234e:	4b9a      	ldr	r3, [pc, #616]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0218 	and.w	r2, r3, #24
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	429a      	cmp	r2, r3
 800235c:	d014      	beq.n	8002388 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800235e:	4b96      	ldr	r3, [pc, #600]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0218 	bic.w	r2, r3, #24
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4993      	ldr	r1, [pc, #588]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002370:	f000 fdd0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002374:	4b91      	ldr	r3, [pc, #580]	@ (80025bc <HAL_RCC_OscConfig+0x4e0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fa1f 	bl	80017bc <HAL_InitTick>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e2db      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff faa2 	bl	80018d0 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002390:	f7ff fa9e 	bl	80018d0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2ce      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a2:	4b85      	ldr	r3, [pc, #532]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80023ae:	4b82      	ldr	r3, [pc, #520]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	497e      	ldr	r1, [pc, #504]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80023c2:	e049      	b.n	8002458 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02c      	beq.n	8002426 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80023cc:	4b7a      	ldr	r3, [pc, #488]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0218 	bic.w	r2, r3, #24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4977      	ldr	r1, [pc, #476]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80023de:	4b76      	ldr	r3, [pc, #472]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7ff fa71 	bl	80018d0 <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023f2:	f7ff fa6d 	bl	80018d0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e29d      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002404:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002410:	4b69      	ldr	r3, [pc, #420]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	4966      	ldr	r1, [pc, #408]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	610b      	str	r3, [r1, #16]
 8002424:	e018      	b.n	8002458 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b64      	ldr	r3, [pc, #400]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a63      	ldr	r2, [pc, #396]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff fa4d 	bl	80018d0 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800243a:	f7ff fa49 	bl	80018d0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e279      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244c:	4b5a      	ldr	r3, [pc, #360]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d03c      	beq.n	80024de <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246c:	4b52      	ldr	r3, [pc, #328]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800246e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002472:	4a51      	ldr	r2, [pc, #324]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fa28 	bl	80018d0 <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002484:	f7ff fa24 	bl	80018d0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e254      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002496:	4b48      	ldr	r3, [pc, #288]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800249c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ef      	beq.n	8002484 <HAL_RCC_OscConfig+0x3a8>
 80024a4:	e01b      	b.n	80024de <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a6:	4b44      	ldr	r3, [pc, #272]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80024a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ac:	4a42      	ldr	r2, [pc, #264]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80024ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff fa0b 	bl	80018d0 <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024be:	f7ff fa07 	bl	80018d0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e237      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024d0:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ef      	bne.n	80024be <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80d2 	beq.w	8002690 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024ec:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <HAL_RCC_OscConfig+0x4e4>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d118      	bne.n	800252a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80024f8:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_RCC_OscConfig+0x4e4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	4a30      	ldr	r2, [pc, #192]	@ (80025c0 <HAL_RCC_OscConfig+0x4e4>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002504:	f7ff f9e4 	bl	80018d0 <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250c:	f7ff f9e0 	bl	80018d0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e210      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_RCC_OscConfig+0x4e4>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x468>
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002538:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002542:	e074      	b.n	800262e <HAL_RCC_OscConfig+0x552>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d118      	bne.n	800257e <HAL_RCC_OscConfig+0x4a2>
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800254e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002552:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800255e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002562:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002568:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800256e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002572:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800257c:	e057      	b.n	800262e <HAL_RCC_OscConfig+0x552>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d11e      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4e8>
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 8002598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259c:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 800259e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ac:	4a02      	ldr	r2, [pc, #8]	@ (80025b8 <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x552>
 80025b8:	44020c00 	.word	0x44020c00
 80025bc:	200000a0 	.word	0x200000a0
 80025c0:	44020800 	.word	0x44020800
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b85      	cmp	r3, #133	@ 0x85
 80025ca:	d118      	bne.n	80025fe <HAL_RCC_OscConfig+0x522>
 80025cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d2:	4aa1      	ldr	r2, [pc, #644]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025dc:	4b9e      	ldr	r3, [pc, #632]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e2:	4a9d      	ldr	r2, [pc, #628]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f2:	4a99      	ldr	r2, [pc, #612]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025fc:	e017      	b.n	800262e <HAL_RCC_OscConfig+0x552>
 80025fe:	4b96      	ldr	r3, [pc, #600]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002604:	4a94      	ldr	r2, [pc, #592]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800260e:	4b92      	ldr	r3, [pc, #584]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002614:	4a90      	ldr	r2, [pc, #576]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002616:	f023 0304 	bic.w	r3, r3, #4
 800261a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261e:	4b8e      	ldr	r3, [pc, #568]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002624:	4a8c      	ldr	r2, [pc, #560]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800262a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7ff f94b 	bl	80018d0 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7ff f947 	bl	80018d0 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e175      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002654:	4b80      	ldr	r3, [pc, #512]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ed      	beq.n	800263e <HAL_RCC_OscConfig+0x562>
 8002662:	e015      	b.n	8002690 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff f934 	bl	80018d0 <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7ff f930 	bl	80018d0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e15e      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002682:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ed      	bne.n	800266c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d036      	beq.n	800270a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80026aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff f90e 	bl	80018d0 <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80026b8:	f7ff f90a 	bl	80018d0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e13a      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026ca:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x5dc>
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80026de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff f8f4 	bl	80018d0 <HAL_GetTick>
 80026e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80026ec:	f7ff f8f0 	bl	80018d0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e120      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026fe:	4b56      	ldr	r3, [pc, #344]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8115 	beq.w	800293e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b18      	cmp	r3, #24
 8002718:	f000 80af 	beq.w	800287a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 8086 	bne.w	8002832 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002726:	4b4c      	ldr	r3, [pc, #304]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 800272c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7ff f8cd 	bl	80018d0 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800273a:	f7ff f8c9 	bl	80018d0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0f9      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800274c:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002758:	4b3f      	ldr	r3, [pc, #252]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800276c:	0212      	lsls	r2, r2, #8
 800276e:	430a      	orrs	r2, r1
 8002770:	4939      	ldr	r1, [pc, #228]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	628b      	str	r3, [r1, #40]	@ 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	3b01      	subs	r3, #1
 800277c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	3b01      	subs	r3, #1
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	b29b      	uxth	r3, r3
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	3b01      	subs	r3, #1
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	3b01      	subs	r3, #1
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027a6:	492c      	ldr	r1, [pc, #176]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80027ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	4a29      	ldr	r2, [pc, #164]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027b2:	f023 0310 	bic.w	r3, r3, #16
 80027b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	4a26      	ldr	r2, [pc, #152]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	4a24      	ldr	r2, [pc, #144]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	f023 020c 	bic.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	491f      	ldr	r1, [pc, #124]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	f023 0220 	bic.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	491a      	ldr	r1, [pc, #104]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a15      	ldr	r2, [pc, #84]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7ff f861 	bl	80018d0 <HAL_GetTick>
 800280e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002812:	f7ff f85d 	bl	80018d0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e08d      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x736>
 8002830:	e085      	b.n	800293e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <HAL_RCC_OscConfig+0x77c>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff f847 	bl	80018d0 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002846:	f7ff f843 	bl	80018d0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d903      	bls.n	800285c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e073      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
 8002858:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800285c:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002868:	4b37      	ldr	r3, [pc, #220]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	4a36      	ldr	r2, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800286e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	6293      	str	r3, [r2, #40]	@ 0x28
 8002878:	e061      	b.n	800293e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800287a:	4b33      	ldr	r3, [pc, #204]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002880:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	2b01      	cmp	r3, #1
 800288c:	d031      	beq.n	80028f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d12a      	bne.n	80028f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d122      	bne.n	80028f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d11a      	bne.n	80028f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d111      	bne.n	80028f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d108      	bne.n	80028f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0e1b      	lsrs	r3, r3, #24
 80028e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e024      	b.n	8002940 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002904:	429a      	cmp	r2, r3
 8002906:	d01a      	beq.n	800293e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002908:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	4a0e      	ldr	r2, [pc, #56]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800290e:	f023 0310 	bic.w	r3, r3, #16
 8002912:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe ffdc 	bl	80018d0 <HAL_GetTick>
 8002918:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800291a:	bf00      	nop
 800291c:	f7fe ffd8 	bl	80018d0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4293      	cmp	r3, r2
 8002926:	d0f9      	beq.n	800291c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292c:	4a06      	ldr	r2, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_RCC_OscConfig+0x86c>)
 8002938:	f043 0310 	orr.w	r3, r3, #16
 800293c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	44020c00 	.word	0x44020c00

0800294c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e19e      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b83      	ldr	r3, [pc, #524]	@ (8002b70 <HAL_RCC_ClockConfig+0x224>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b80      	ldr	r3, [pc, #512]	@ (8002b70 <HAL_RCC_ClockConfig+0x224>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	497e      	ldr	r1, [pc, #504]	@ (8002b70 <HAL_RCC_ClockConfig+0x224>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b70 <HAL_RCC_ClockConfig+0x224>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e186      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	4b74      	ldr	r3, [pc, #464]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d909      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80029ae:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	496d      	ldr	r1, [pc, #436]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	4b68      	ldr	r3, [pc, #416]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029dc:	429a      	cmp	r2, r3
 80029de:	d909      	bls.n	80029f4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80029e0:	4b64      	ldr	r3, [pc, #400]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	4961      	ldr	r1, [pc, #388]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a10:	4b58      	ldr	r3, [pc, #352]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4955      	ldr	r1, [pc, #340]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 020f 	bic.w	r2, r3, #15
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	494a      	ldr	r1, [pc, #296]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8093 	beq.w	8002b84 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e113      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e107      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0fb      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa6:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0f3      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	492c      	ldr	r1, [pc, #176]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac8:	f7fe ff02 	bl	80018d0 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d112      	bne.n	8002afc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fefa 	bl	80018d0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0d7      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0318 	and.w	r3, r3, #24
 8002af6:	2b18      	cmp	r3, #24
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18c>
 8002afa:	e043      	b.n	8002b84 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fe fee3 	bl	80018d0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0c0      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 0318 	and.w	r3, r3, #24
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d1ee      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
 8002b28:	e02c      	b.n	8002b84 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d122      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fecc 	bl	80018d0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0a9      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_RCC_ClockConfig+0x228>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1e8>
 8002b56:	e015      	b.n	8002b84 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe feba 	bl	80018d0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d906      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e097      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
 8002b6e:	bf00      	nop
 8002b70:	40022000 	.word	0x40022000
 8002b74:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 0318 	and.w	r3, r3, #24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e9      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b44      	ldr	r3, [pc, #272]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d208      	bcs.n	8002bb2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ba0:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 020f 	bic.w	r2, r3, #15
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	493e      	ldr	r1, [pc, #248]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cac <HAL_RCC_ClockConfig+0x360>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d210      	bcs.n	8002be2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCC_ClockConfig+0x360>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 020f 	bic.w	r2, r3, #15
 8002bc8:	4938      	ldr	r1, [pc, #224]	@ (8002cac <HAL_RCC_ClockConfig+0x360>)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_ClockConfig+0x360>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05d      	b.n	8002c9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d208      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4927      	ldr	r1, [pc, #156]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d209      	bcs.n	8002c42 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	491a      	ldr	r1, [pc, #104]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d209      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c74:	f000 f822 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_ClockConfig+0x35c>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <HAL_RCC_ClockConfig+0x364>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <HAL_RCC_ClockConfig+0x368>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x36c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd92 	bl	80017bc <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	44020c00 	.word	0x44020c00
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	0800a5e8 	.word	0x0800a5e8
 8002cb4:	2000009c 	.word	0x2000009c
 8002cb8:	200000a0 	.word	0x200000a0

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cc2:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0318 	and.w	r3, r3, #24
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002cce:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e107      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd4:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 0318 	and.w	r3, r3, #24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d112      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ce0:	4b84      	ldr	r3, [pc, #528]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002cec:	4b81      	ldr	r3, [pc, #516]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	4a81      	ldr	r2, [pc, #516]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x240>)
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e0f1      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002d00:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x240>)
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e0ee      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d06:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0318 	and.w	r3, r3, #24
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d12:	4b7b      	ldr	r3, [pc, #492]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x244>)
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e0e5      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0318 	and.w	r3, r3, #24
 8002d20:	2b18      	cmp	r3, #24
 8002d22:	f040 80dd 	bne.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d26:	4b73      	ldr	r3, [pc, #460]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d30:	4b70      	ldr	r3, [pc, #448]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d48:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d60:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80b7 	beq.w	8002eda <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0xbe>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d056      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x16a>
 8002d78:	e077      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d86:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	4a5a      	ldr	r2, [pc, #360]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x240>)
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002f04 <HAL_RCC_GetSysClockFreq+0x248>
 8002dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002de0:	e065      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dec:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x24c>
 8002df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e08:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f04 <HAL_RCC_GetSysClockFreq+0x248>
 8002e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e20:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e24:	e043      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002f0c <HAL_RCC_GetSysClockFreq+0x250>
 8002e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f04 <HAL_RCC_GetSysClockFreq+0x248>
 8002e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e64:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002e68:	e021      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f10 <HAL_RCC_GetSysClockFreq+0x254>
 8002e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e90:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002f04 <HAL_RCC_GetSysClockFreq+0x248>
 8002e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002eac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	0a5b      	lsrs	r3, r3, #9
 8002eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb8:	3301      	adds	r3, #1
 8002eba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ec6:	edd7 6a06 	vldr	s13, [r7, #24]
 8002eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed2:	ee17 3a90 	vmov	r3, s15
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e001      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x240>)
 8002ee2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	44020c00 	.word	0x44020c00
 8002ef8:	003d0900 	.word	0x003d0900
 8002efc:	03d09000 	.word	0x03d09000
 8002f00:	007a1200 	.word	0x007a1200
 8002f04:	46000000 	.word	0x46000000
 8002f08:	4c742400 	.word	0x4c742400
 8002f0c:	4af42400 	.word	0x4af42400
 8002f10:	4a742400 	.word	0x4a742400

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f18:	f7ff fed0 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f22:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f26:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f2a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f34:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002f36:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f38:	681b      	ldr	r3, [r3, #0]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	44020c00 	.word	0x44020c00
 8002f44:	0800a5e8 	.word	0x0800a5e8
 8002f48:	2000009c 	.word	0x2000009c

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002f50:	f7ff ffe0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	44020c00 	.word	0x44020c00
 8002f74:	0800a5f8 	.word	0x0800a5f8

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002f7c:	f7ff ffca 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	@ (8002fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	44020c00 	.word	0x44020c00
 8002fa0:	0800a5f8 	.word	0x0800a5f8

08002fa4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002fa8:	f7ff ffb4 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	0b1b      	lsrs	r3, r3, #12
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4904      	ldr	r1, [pc, #16]	@ (8002fcc <HAL_RCC_GetPCLK3Freq+0x28>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	44020c00 	.word	0x44020c00
 8002fcc:	0800a5f8 	.word	0x0800a5f8

08002fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b0d8      	sub	sp, #352	@ 0x160
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	ea54 0305 	orrs.w	r3, r4, r5
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002ffc:	4bcd      	ldr	r3, [pc, #820]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003002:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003006:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4ac9      	ldr	r2, [pc, #804]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800300e:	430b      	orrs	r3, r1
 8003010:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f002 0801 	and.w	r8, r2, #1
 8003020:	f04f 0900 	mov.w	r9, #0
 8003024:	ea58 0309 	orrs.w	r3, r8, r9
 8003028:	d042      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800302a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	2b05      	cmp	r3, #5
 8003032:	d823      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003034:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003085 	.word	0x08003085
 8003040:	08003055 	.word	0x08003055
 8003044:	08003069 	.word	0x08003069
 8003048:	08003085 	.word	0x08003085
 800304c:	08003085 	.word	0x08003085
 8003050:	08003085 	.word	0x08003085
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003058:	3308      	adds	r3, #8
 800305a:	4618      	mov	r0, r3
 800305c:	f004 fee0 	bl	8007e20 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003066:	e00e      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800306c:	3330      	adds	r3, #48	@ 0x30
 800306e:	4618      	mov	r0, r3
 8003070:	f004 ff6e 	bl	8007f50 <RCCEx_PLL3_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800308e:	4ba9      	ldr	r3, [pc, #676]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003094:	f023 0107 	bic.w	r1, r3, #7
 8003098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	4aa5      	ldr	r2, [pc, #660]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f002 0a02 	and.w	sl, r2, #2
 80030bc:	f04f 0b00 	mov.w	fp, #0
 80030c0:	ea5a 030b 	orrs.w	r3, sl, fp
 80030c4:	f000 8088 	beq.w	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80030c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ce:	2b28      	cmp	r3, #40	@ 0x28
 80030d0:	d868      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080031ad 	.word	0x080031ad
 80030dc:	080031a5 	.word	0x080031a5
 80030e0:	080031a5 	.word	0x080031a5
 80030e4:	080031a5 	.word	0x080031a5
 80030e8:	080031a5 	.word	0x080031a5
 80030ec:	080031a5 	.word	0x080031a5
 80030f0:	080031a5 	.word	0x080031a5
 80030f4:	080031a5 	.word	0x080031a5
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	080031a5 	.word	0x080031a5
 8003100:	080031a5 	.word	0x080031a5
 8003104:	080031a5 	.word	0x080031a5
 8003108:	080031a5 	.word	0x080031a5
 800310c:	080031a5 	.word	0x080031a5
 8003110:	080031a5 	.word	0x080031a5
 8003114:	080031a5 	.word	0x080031a5
 8003118:	08003191 	.word	0x08003191
 800311c:	080031a5 	.word	0x080031a5
 8003120:	080031a5 	.word	0x080031a5
 8003124:	080031a5 	.word	0x080031a5
 8003128:	080031a5 	.word	0x080031a5
 800312c:	080031a5 	.word	0x080031a5
 8003130:	080031a5 	.word	0x080031a5
 8003134:	080031a5 	.word	0x080031a5
 8003138:	080031ad 	.word	0x080031ad
 800313c:	080031a5 	.word	0x080031a5
 8003140:	080031a5 	.word	0x080031a5
 8003144:	080031a5 	.word	0x080031a5
 8003148:	080031a5 	.word	0x080031a5
 800314c:	080031a5 	.word	0x080031a5
 8003150:	080031a5 	.word	0x080031a5
 8003154:	080031a5 	.word	0x080031a5
 8003158:	080031ad 	.word	0x080031ad
 800315c:	080031a5 	.word	0x080031a5
 8003160:	080031a5 	.word	0x080031a5
 8003164:	080031a5 	.word	0x080031a5
 8003168:	080031a5 	.word	0x080031a5
 800316c:	080031a5 	.word	0x080031a5
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031a5 	.word	0x080031a5
 8003178:	080031ad 	.word	0x080031ad
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003180:	3308      	adds	r3, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fe4c 	bl	8007e20 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800318e:	e00e      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003194:	3330      	adds	r3, #48	@ 0x30
 8003196:	4618      	mov	r0, r3
 8003198:	f004 feda 	bl	8007f50 <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80031ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80031b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031bc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80031c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031ce:	e003      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f002 0304 	and.w	r3, r2, #4
 80031e4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80031ee:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80031f2:	460b      	mov	r3, r1
 80031f4:	4313      	orrs	r3, r2
 80031f6:	d04e      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80031f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003202:	d02c      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003204:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003208:	d825      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800320a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320e:	d028      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d81f      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003216:	2bc0      	cmp	r3, #192	@ 0xc0
 8003218:	d025      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800321a:	2bc0      	cmp	r3, #192	@ 0xc0
 800321c:	d81b      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800321e:	2b80      	cmp	r3, #128	@ 0x80
 8003220:	d00f      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003222:	2b80      	cmp	r3, #128	@ 0x80
 8003224:	d817      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01f      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800322a:	2b40      	cmp	r3, #64	@ 0x40
 800322c:	d113      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800322e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003232:	3308      	adds	r3, #8
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fdf3 	bl	8007e20 <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003240:	e014      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003246:	3330      	adds	r3, #48	@ 0x30
 8003248:	4618      	mov	r0, r3
 800324a:	f004 fe81 	bl	8007f50 <RCCEx_PLL3_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003254:	e00a      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800325c:	e006      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800325e:	bf00      	nop
 8003260:	e004      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800326a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10c      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003274:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800327a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800327e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003284:	4a2b      	ldr	r2, [pc, #172]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003286:	430b      	orrs	r3, r1
 8003288:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003292:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f002 0308 	and.w	r3, r2, #8
 80032a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80032ac:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d056      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80032b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032bc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80032c0:	d031      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80032c2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80032c6:	d82a      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032cc:	d02d      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80032ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80032d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032d8:	d029      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80032da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e4:	d011      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	d818      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d023      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f4:	d113      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032fa:	3308      	adds	r3, #8
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 fd8f 	bl	8007e20 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003308:	e017      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800330a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800330e:	3330      	adds	r3, #48	@ 0x30
 8003310:	4618      	mov	r0, r3
 8003312:	f004 fe1d 	bl	8007f50 <RCCEx_PLL3_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800331c:	e00d      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003324:	e009      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003326:	bf00      	nop
 8003328:	e007      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800332a:	bf00      	nop
 800332c:	e005      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800332e:	bf00      	nop
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003332:	bf00      	nop
 8003334:	44020c00 	.word	0x44020c00
        break;
 8003338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003342:	4bbb      	ldr	r3, [pc, #748]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003348:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800334c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003352:	4ab7      	ldr	r2, [pc, #732]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003354:	430b      	orrs	r3, r1
 8003356:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003360:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f002 0310 	and.w	r3, r2, #16
 8003370:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800337a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800337e:	460b      	mov	r3, r1
 8003380:	4313      	orrs	r3, r2
 8003382:	d053      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800338e:	d031      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003390:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003394:	d82a      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800339a:	d02d      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a0:	d824      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033a6:	d029      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80033a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033ac:	d81e      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b2:	d011      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b8:	d818      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c2:	d113      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c8:	3308      	adds	r3, #8
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fd28 	bl	8007e20 <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80033d6:	e014      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033dc:	3330      	adds	r3, #48	@ 0x30
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fdb6 	bl	8007f50 <RCCEx_PLL3_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80033ea:	e00a      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033f2:	e006      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033f4:	bf00      	nop
 80033f6:	e004      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033f8:	bf00      	nop
 80033fa:	e002      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003402:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800340a:	4b89      	ldr	r3, [pc, #548]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800340c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003410:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341a:	4a85      	ldr	r2, [pc, #532]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800341c:	430b      	orrs	r3, r1
 800341e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003422:	e003      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003428:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800342c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f002 0320 	and.w	r3, r2, #32
 8003438:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003442:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d053      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800344c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003456:	d031      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003458:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800345c:	d82a      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800345e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003462:	d02d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003468:	d824      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800346a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800346e:	d029      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003470:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003474:	d81e      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d011      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d818      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348a:	d113      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800348c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003490:	3308      	adds	r3, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f004 fcc4 	bl	8007e20 <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800349e:	e014      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034a4:	3330      	adds	r3, #48	@ 0x30
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fd52 	bl	8007f50 <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80034b2:	e00a      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034ba:	e006      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80034bc:	bf00      	nop
 80034be:	e004      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80034c0:	bf00      	nop
 80034c2:	e002      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80034d2:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034d8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80034dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a53      	ldr	r2, [pc, #332]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003500:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800350a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d053      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800351e:	d031      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003520:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003524:	d82a      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352a:	d02d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800352c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003530:	d824      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003532:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003536:	d029      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003538:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800353c:	d81e      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800353e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003542:	d011      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003544:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003548:	d818      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800354e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003552:	d113      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003558:	3308      	adds	r3, #8
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fc60 	bl	8007e20 <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003566:	e014      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003568:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800356c:	3330      	adds	r3, #48	@ 0x30
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fcee 	bl	8007f50 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800357a:	e00a      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800359c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035a0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80035a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035aa:	4a21      	ldr	r2, [pc, #132]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035b2:	e003      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80035c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80035d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d055      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80035dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035e6:	d033      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80035e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035ec:	d82c      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80035f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035f8:	d826      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035fe:	d02b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003600:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003604:	d820      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360a:	d013      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003610:	d81a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800361a:	d115      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800361c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003620:	3308      	adds	r3, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fbfc 	bl	8007e20 <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800362e:	e016      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003630:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003638:	3330      	adds	r3, #48	@ 0x30
 800363a:	4618      	mov	r0, r3
 800363c:	f004 fc88 	bl	8007f50 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003666:	4bbb      	ldr	r3, [pc, #748]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800366c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003676:	4ab7      	ldr	r2, [pc, #732]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003684:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003694:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800369e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d053      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80036a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80036b2:	d031      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80036b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80036b8:	d82a      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80036ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036be:	d02d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c4:	d824      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80036c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ca:	d029      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80036cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036d0:	d81e      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80036d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80036d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036dc:	d818      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80036e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e6:	d113      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ec:	3308      	adds	r3, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 fb96 	bl	8007e20 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80036fa:	e014      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003700:	3330      	adds	r3, #48	@ 0x30
 8003702:	4618      	mov	r0, r3
 8003704:	f004 fc24 	bl	8007f50 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800370e:	e00a      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003716:	e006      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003718:	bf00      	nop
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003726:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800372e:	4b89      	ldr	r3, [pc, #548]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003734:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800373c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373e:	4a85      	ldr	r2, [pc, #532]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003740:	430b      	orrs	r3, r1
 8003742:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003746:	e003      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800374c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800375c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003766:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800376a:	460b      	mov	r3, r1
 800376c:	4313      	orrs	r3, r2
 800376e:	d055      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003770:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003778:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800377c:	d031      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800377e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003782:	d82a      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003788:	d02d      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378e:	d824      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003790:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003794:	d029      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003796:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800379a:	d81e      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a0:	d011      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a6:	d818      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80037ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037b0:	d113      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037b6:	3308      	adds	r3, #8
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fb31 	bl	8007e20 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80037c4:	e014      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ca:	3330      	adds	r3, #48	@ 0x30
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fbbf 	bl	8007f50 <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80037d8:	e00a      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80037ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80037f8:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037fe:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380a:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800380c:	430b      	orrs	r3, r1
 800380e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003812:	e003      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003818:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800381c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003828:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003832:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d044      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800383c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003844:	2b05      	cmp	r3, #5
 8003846:	d823      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003899 	.word	0x08003899
 8003854:	08003869 	.word	0x08003869
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003899 	.word	0x08003899
 8003860:	08003899 	.word	0x08003899
 8003864:	08003899 	.word	0x08003899
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800386c:	3308      	adds	r3, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fad6 	bl	8007e20 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800387a:	e00e      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800387c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003880:	3330      	adds	r3, #48	@ 0x30
 8003882:	4618      	mov	r0, r3
 8003884:	f004 fb64 	bl	8007f50 <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80038a8:	f023 0107 	bic.w	r1, r3, #7
 80038ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b4:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038b6:	430b      	orrs	r3, r1
 80038b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80038c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038dc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d04f      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80038e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	2b50      	cmp	r3, #80	@ 0x50
 80038f0:	d029      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80038f2:	2b50      	cmp	r3, #80	@ 0x50
 80038f4:	d823      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d027      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d81f      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038fe:	2b30      	cmp	r3, #48	@ 0x30
 8003900:	d025      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003902:	2b30      	cmp	r3, #48	@ 0x30
 8003904:	d81b      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d00f      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d817      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d022      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003912:	2b10      	cmp	r3, #16
 8003914:	d113      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003916:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800391a:	3308      	adds	r3, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fa7f 	bl	8007e20 <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003928:	e017      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800392a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800392e:	3330      	adds	r3, #48	@ 0x30
 8003930:	4618      	mov	r0, r3
 8003932:	f004 fb0d 	bl	8007f50 <RCCEx_PLL3_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800393c:	e00d      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003944:	e009      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003946:	bf00      	nop
 8003948:	e007      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800394a:	bf00      	nop
 800394c:	e005      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800394e:	bf00      	nop
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003952:	bf00      	nop
 8003954:	44020c00 	.word	0x44020c00
        break;
 8003958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10d      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003962:	4baf      	ldr	r3, [pc, #700]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003964:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003968:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800396c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	4aaa      	ldr	r2, [pc, #680]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003976:	430b      	orrs	r3, r1
 8003978:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003982:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003986:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003992:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800399c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d055      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80039a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80039b2:	d031      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80039b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80039b8:	d82a      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80039ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039be:	d02d      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80039c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039c4:	d824      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80039c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039ca:	d029      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80039cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039d0:	d81e      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80039d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039d6:	d011      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80039d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039dc:	d818      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80039e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039e6:	d113      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ec:	3308      	adds	r3, #8
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fa16 	bl	8007e20 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80039fa:	e014      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a00:	3330      	adds	r3, #48	@ 0x30
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 faa4 	bl	8007f50 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a16:	e006      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003a18:	bf00      	nop
 8003a1a:	e004      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a40:	4a77      	ldr	r2, [pc, #476]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d03d      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003a80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a84:	d814      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8a:	d017      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a90:	d80e      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa0:	3330      	adds	r3, #48	@ 0x30
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fa54 	bl	8007f50 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003aae:	e008      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003ab8:	bf00      	nop
 8003aba:	e002      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003aca:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ad0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003adc:	4a50      	ldr	r2, [pc, #320]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003aea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003afa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d03d      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b1a:	d01b      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003b1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b20:	d814      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003b22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b26:	d017      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003b28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b2c:	d80e      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d014      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003b32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b36:	d109      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b3c:	3330      	adds	r3, #48	@ 0x30
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 fa06 	bl	8007f50 <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b52:	e004      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b66:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b6c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b78:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ba0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d040      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003baa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003bb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bbc:	d814      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc2:	d017      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc8:	d80e      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd8:	3330      	adds	r3, #48	@ 0x30
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 f9b8 	bl	8007f50 <RCCEx_PLL3_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bee:	e004      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d110      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003c02:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c08:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c14:	4a02      	ldr	r2, [pc, #8]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003c1e:	bf00      	nop
 8003c20:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	2100      	movs	r1, #0
 8003c36:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	d03d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c58:	d01b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003c5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c5e:	d814      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003c66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c6a:	d80e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d014      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c74:	d109      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c7a:	3330      	adds	r3, #48	@ 0x30
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 f967 	bl	8007f50 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c90:	e004      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003ca4:	4bbe      	ldr	r3, [pc, #760]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ca6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003caa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cb6:	4aba      	ldr	r2, [pc, #744]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d035      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf4:	d015      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cfa:	d80e      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d04:	d109      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d0a:	3330      	adds	r3, #48	@ 0x30
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 f91f 	bl	8007f50 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003d18:	e006      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d20:	e002      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003d30:	4b9b      	ldr	r3, [pc, #620]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d36:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d42:	4a97      	ldr	r2, [pc, #604]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d44:	430b      	orrs	r3, r1
 8003d46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003d74:	4b8a      	ldr	r3, [pc, #552]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4a89      	ldr	r2, [pc, #548]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d7e:	61d3      	str	r3, [r2, #28]
 8003d80:	4b87      	ldr	r3, [pc, #540]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d82:	69d9      	ldr	r1, [r3, #28]
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d8c:	4a84      	ldr	r2, [pc, #528]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003da8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d055      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003dba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003dbe:	d031      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003dc0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003dc4:	d82a      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dca:	d02d      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd0:	d824      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd6:	d029      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ddc:	d81e      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de2:	d011      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de8:	d818      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d020      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df2:	d113      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df8:	3308      	adds	r3, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 f810 	bl	8007e20 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003e06:	e014      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e0c:	3330      	adds	r3, #48	@ 0x30
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f89e 	bl	8007f50 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003e24:	bf00      	nop
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003e3a:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e4c:	4a54      	ldr	r2, [pc, #336]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d055      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e8a:	d031      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003e8c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e90:	d82a      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e96:	d02d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9c:	d824      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea2:	d029      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003ea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea8:	d81e      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eae:	d011      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb4:	d818      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebe:	d113      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 ffaa 	bl	8007e20 <RCCEx_PLL2_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003ed2:	e014      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed8:	3330      	adds	r3, #48	@ 0x30
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 f838 	bl	8007f50 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003f06:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f18:	4a21      	ldr	r2, [pc, #132]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	2100      	movs	r1, #0
 8003f34:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d057      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f56:	d033      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f5c:	d82c      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d02f      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f68:	d826      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f6e:	d02b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f74:	d820      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f80:	d81a      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d022      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f90:	3308      	adds	r3, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 ff44 	bl	8007e20 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f9e:	e016      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003fa0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa8:	3330      	adds	r3, #48	@ 0x30
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 ffd0 	bl	8007f50 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003fd6:	4bbb      	ldr	r3, [pc, #748]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003fe8:	4ab6      	ldr	r2, [pc, #728]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ff6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	2100      	movs	r1, #0
 8004004:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004010:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d055      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800401a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800401e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004022:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004026:	d031      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004028:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800402c:	d82a      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004032:	d02d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004038:	d824      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800403a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800403e:	d029      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004040:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004044:	d81e      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004046:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800404a:	d011      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800404c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004050:	d818      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405a:	d113      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800405c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004060:	3308      	adds	r3, #8
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fedc 	bl	8007e20 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800406e:	e014      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004074:	3330      	adds	r3, #48	@ 0x30
 8004076:	4618      	mov	r0, r3
 8004078:	f003 ff6a 	bl	8007f50 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004082:	e00a      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800408a:	e006      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80040a2:	4b88      	ldr	r3, [pc, #544]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040a8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80040ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040b4:	4a83      	ldr	r2, [pc, #524]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80040c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	2100      	movs	r1, #0
 80040d0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80040d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d055      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80040e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80040f2:	d031      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80040f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80040f8:	d82a      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040fe:	d02d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004104:	d824      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004106:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800410a:	d029      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800410c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004110:	d81e      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004116:	d011      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800411c:	d818      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004126:	d113      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800412c:	3308      	adds	r3, #8
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fe76 	bl	8007e20 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800413a:	e014      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800413c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004140:	3330      	adds	r3, #48	@ 0x30
 8004142:	4618      	mov	r0, r3
 8004144:	f003 ff04 	bl	8007f50 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800414e:	e00a      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004158:	bf00      	nop
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800416e:	4b55      	ldr	r3, [pc, #340]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004170:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004174:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800417c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004180:	4a50      	ldr	r2, [pc, #320]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004182:	430b      	orrs	r3, r1
 8004184:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800418e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004192:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	2100      	movs	r1, #0
 800419c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d055      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80041b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041be:	d031      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80041c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c4:	d82a      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ca:	d02d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d824      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80041d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d6:	d029      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80041d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041dc:	d81e      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80041de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e2:	d011      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80041e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e8:	d818      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80041ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041f2:	d113      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f8:	3308      	adds	r3, #8
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fe10 	bl	8007e20 <RCCEx_PLL2_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004206:	e014      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800420c:	3330      	adds	r3, #48	@ 0x30
 800420e:	4618      	mov	r0, r3
 8004210:	f003 fe9e 	bl	8007f50 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800421a:	e00a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004222:	e006      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004224:	bf00      	nop
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004232:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800423a:	4b22      	ldr	r3, [pc, #136]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800423c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004240:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004248:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800424e:	430b      	orrs	r3, r1
 8004250:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800425a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800425e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800426a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004274:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d055      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004282:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800428a:	d035      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800428c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004290:	d82e      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004296:	d031      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800429c:	d828      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800429e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042a2:	d01b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042a8:	d822      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b2:	d009      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80042b4:	e01c      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b6:	4b03      	ldr	r3, [pc, #12]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	4a02      	ldr	r2, [pc, #8]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042c2:	e01c      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80042c4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042cc:	3308      	adds	r3, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fda6 	bl	8007e20 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042da:	e010      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042e0:	3330      	adds	r3, #48	@ 0x30
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fe34 	bl	8007f50 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042ee:	e006      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042f6:	e002      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80042fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004306:	4bc3      	ldr	r3, [pc, #780]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800430c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004318:	4abe      	ldr	r2, [pc, #760]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800431a:	430b      	orrs	r3, r1
 800431c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004326:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800432a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004340:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004344:	460b      	mov	r3, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	d051      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800434a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004356:	d033      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800435c:	d82c      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800435e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004362:	d02d      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004364:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004368:	d826      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436e:	d019      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004374:	d820      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800437a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800437e:	d007      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004380:	e01a      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004382:	4ba4      	ldr	r3, [pc, #656]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	4aa3      	ldr	r2, [pc, #652]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800438e:	e018      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004394:	3308      	adds	r3, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f003 fd42 	bl	8007e20 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80043a2:	e00e      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a8:	3330      	adds	r3, #48	@ 0x30
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 fdd0 	bl	8007f50 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80043ca:	4b92      	ldr	r3, [pc, #584]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043d0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80043d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043dc:	4a8d      	ldr	r2, [pc, #564]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80043ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043fc:	2300      	movs	r3, #0
 80043fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004400:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d032      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800440a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800440e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004412:	2b05      	cmp	r3, #5
 8004414:	d80f      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004416:	2b03      	cmp	r3, #3
 8004418:	d211      	bcs.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800441a:	2b01      	cmp	r3, #1
 800441c:	d911      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800441e:	2b02      	cmp	r3, #2
 8004420:	d109      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004422:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004426:	3308      	adds	r3, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f003 fcf9 	bl	8007e20 <RCCEx_PLL2_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004434:	e006      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800443c:	e002      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800443e:	bf00      	nop
 8004440:	e000      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004444:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10d      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800444c:	4b71      	ldr	r3, [pc, #452]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800444e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004452:	f023 0107 	bic.w	r1, r3, #7
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800445a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800445e:	4a6d      	ldr	r2, [pc, #436]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004460:	430b      	orrs	r3, r1
 8004462:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800446c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	2100      	movs	r1, #0
 800447a:	6739      	str	r1, [r7, #112]	@ 0x70
 800447c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004480:	677b      	str	r3, [r7, #116]	@ 0x74
 8004482:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d024      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800448c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004498:	2b08      	cmp	r3, #8
 800449a:	d005      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80044b2:	4b58      	ldr	r3, [pc, #352]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044b8:	f023 0108 	bic.w	r1, r3, #8
 80044bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044c4:	4a53      	ldr	r2, [pc, #332]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80044e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e4:	2300      	movs	r3, #0
 80044e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f000 80b9 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80044f4:	4b48      	ldr	r3, [pc, #288]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	4a47      	ldr	r2, [pc, #284]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004500:	f7fd f9e6 	bl	80018d0 <HAL_GetTick>
 8004504:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004508:	e00b      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd f9e1 	bl	80018d0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d903      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004520:	e005      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004522:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ed      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800452e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 8093 	bne.w	800465e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004538:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004542:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004546:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d023      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800454e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004552:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004556:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800455a:	4293      	cmp	r3, r2
 800455c:	d01b      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800455e:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004568:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456c:	4b29      	ldr	r3, [pc, #164]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800456e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004572:	4a28      	ldr	r2, [pc, #160]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800457e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004582:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004588:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800458c:	4a21      	ldr	r2, [pc, #132]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800458e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004596:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d019      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd f995 	bl	80018d0 <HAL_GetTick>
 80045a6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	e00d      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd f990 	bl	80018d0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80045c6:	e006      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ea      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80045d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80045de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ee:	d115      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80045f0:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004606:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800460a:	4a02      	ldr	r2, [pc, #8]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800460c:	430b      	orrs	r3, r1
 800460e:	61d3      	str	r3, [r2, #28]
 8004610:	e00a      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004612:	bf00      	nop
 8004614:	44020c00 	.word	0x44020c00
 8004618:	44020800 	.word	0x44020800
 800461c:	4b9f      	ldr	r3, [pc, #636]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4a9e      	ldr	r2, [pc, #632]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004622:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004626:	61d3      	str	r3, [r2, #28]
 8004628:	4b9c      	ldr	r3, [pc, #624]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800462a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462e:	4a9b      	ldr	r2, [pc, #620]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004634:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004638:	4b98      	ldr	r3, [pc, #608]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800463a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800463e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004642:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464a:	4a94      	ldr	r2, [pc, #592]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800464c:	430b      	orrs	r3, r1
 800464e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004652:	e008      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004654:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004658:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004662:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004666:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004672:	663b      	str	r3, [r7, #96]	@ 0x60
 8004674:	2300      	movs	r3, #0
 8004676:	667b      	str	r3, [r7, #100]	@ 0x64
 8004678:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800467c:	460b      	mov	r3, r1
 800467e:	4313      	orrs	r3, r2
 8004680:	d035      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004686:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d014      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800468e:	2b30      	cmp	r3, #48	@ 0x30
 8004690:	d80e      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d012      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004696:	2b20      	cmp	r3, #32
 8004698:	d80a      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a2:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	4a7d      	ldr	r2, [pc, #500]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046b6:	e004      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80046b8:	bf00      	nop
 80046ba:	e002      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80046bc:	bf00      	nop
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80046c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80046ca:	4b74      	ldr	r3, [pc, #464]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80046dc:	4a6f      	ldr	r2, [pc, #444]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046de:	430b      	orrs	r3, r1
 80046e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046e4:	e003      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80046fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046fc:	2300      	movs	r3, #0
 80046fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004700:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d033      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800470a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800470e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d007      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800471a:	e010      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471c:	4b5f      	ldr	r3, [pc, #380]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	4a5e      	ldr	r2, [pc, #376]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004726:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004728:	e00d      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800472a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800472e:	3308      	adds	r3, #8
 8004730:	4618      	mov	r0, r3
 8004732:	f003 fb75 	bl	8007e20 <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800473c:	e003      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004746:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800474e:	4b53      	ldr	r3, [pc, #332]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004754:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004758:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800475c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004760:	4a4e      	ldr	r2, [pc, #312]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004762:	430b      	orrs	r3, r1
 8004764:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800476e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800477e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004780:	2300      	movs	r3, #0
 8004782:	657b      	str	r3, [r7, #84]	@ 0x54
 8004784:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d033      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800478e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004792:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800479a:	2b80      	cmp	r3, #128	@ 0x80
 800479c:	d007      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800479e:	e010      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a0:	4b3e      	ldr	r3, [pc, #248]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	4a3d      	ldr	r2, [pc, #244]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80047ac:	e00d      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047b2:	3308      	adds	r3, #8
 80047b4:	4618      	mov	r0, r3
 80047b6:	f003 fb33 	bl	8007e20 <RCCEx_PLL2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80047d2:	4b32      	ldr	r3, [pc, #200]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047d8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80047dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80047e4:	4a2d      	ldr	r2, [pc, #180]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e6:	430b      	orrs	r3, r1
 80047e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047ec:	e003      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80047f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004804:	2300      	movs	r3, #0
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d04a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800481a:	2b04      	cmp	r3, #4
 800481c:	d827      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800481e:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004839 	.word	0x08004839
 8004828:	08004847 	.word	0x08004847
 800482c:	0800485b 	.word	0x0800485b
 8004830:	08004877 	.word	0x08004877
 8004834:	08004877 	.word	0x08004877
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004838:	4b18      	ldr	r3, [pc, #96]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	4a17      	ldr	r2, [pc, #92]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800483e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004842:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004844:	e018      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800484a:	3308      	adds	r3, #8
 800484c:	4618      	mov	r0, r3
 800484e:	f003 fae7 	bl	8007e20 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004858:	e00e      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800485a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800485e:	3330      	adds	r3, #48	@ 0x30
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fb75 	bl	8007f50 <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800486c:	e004      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004886:	f023 0107 	bic.w	r1, r3, #7
 800488a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004892:	4a02      	ldr	r2, [pc, #8]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004894:	430b      	orrs	r3, r1
 8004896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800489c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80048b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b6:	2300      	movs	r3, #0
 80048b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f000 8081 	beq.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80048c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d85f      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80048d2:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	08004993 	.word	0x08004993
 80048e0:	08004993 	.word	0x08004993
 80048e4:	08004993 	.word	0x08004993
 80048e8:	08004993 	.word	0x08004993
 80048ec:	08004993 	.word	0x08004993
 80048f0:	08004993 	.word	0x08004993
 80048f4:	08004993 	.word	0x08004993
 80048f8:	0800496b 	.word	0x0800496b
 80048fc:	08004993 	.word	0x08004993
 8004900:	08004993 	.word	0x08004993
 8004904:	08004993 	.word	0x08004993
 8004908:	08004993 	.word	0x08004993
 800490c:	08004993 	.word	0x08004993
 8004910:	08004993 	.word	0x08004993
 8004914:	08004993 	.word	0x08004993
 8004918:	0800497f 	.word	0x0800497f
 800491c:	08004993 	.word	0x08004993
 8004920:	08004993 	.word	0x08004993
 8004924:	08004993 	.word	0x08004993
 8004928:	08004993 	.word	0x08004993
 800492c:	08004993 	.word	0x08004993
 8004930:	08004993 	.word	0x08004993
 8004934:	08004993 	.word	0x08004993
 8004938:	0800499b 	.word	0x0800499b
 800493c:	08004993 	.word	0x08004993
 8004940:	08004993 	.word	0x08004993
 8004944:	08004993 	.word	0x08004993
 8004948:	08004993 	.word	0x08004993
 800494c:	08004993 	.word	0x08004993
 8004950:	08004993 	.word	0x08004993
 8004954:	08004993 	.word	0x08004993
 8004958:	0800499b 	.word	0x0800499b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495c:	4bab      	ldr	r3, [pc, #684]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	4aaa      	ldr	r2, [pc, #680]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004966:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004968:	e018      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800496a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800496e:	3308      	adds	r3, #8
 8004970:	4618      	mov	r0, r3
 8004972:	f003 fa55 	bl	8007e20 <RCCEx_PLL2_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800497c:	e00e      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800497e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004982:	3330      	adds	r3, #48	@ 0x30
 8004984:	4618      	mov	r0, r3
 8004986:	f003 fae3 	bl	8007f50 <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004990:	e004      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10d      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80049a4:	4b99      	ldr	r3, [pc, #612]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80049ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049b6:	4a95      	ldr	r2, [pc, #596]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049be:	e003      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80049c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d6:	2300      	movs	r3, #0
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d04e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80049e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f0:	d02e      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f6:	d827      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fa:	d02b      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80049fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fe:	d823      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d017      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d81f      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d007      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004a10:	e01a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a12:	4b7e      	ldr	r3, [pc, #504]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	4a7d      	ldr	r2, [pc, #500]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e01a      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a24:	3308      	adds	r3, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 f9fa 	bl	8007e20 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004a32:	e010      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a38:	3330      	adds	r3, #48	@ 0x30
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 fa88 	bl	8007f50 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004a46:	e006      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004a50:	bf00      	nop
 8004a52:	e000      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a70:	4a66      	ldr	r2, [pc, #408]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a90:	2300      	movs	r3, #0
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a94:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d055      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004aa6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004aac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ab0:	d82a      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab6:	d02d      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004abc:	d824      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004abe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ac2:	d029      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004ac4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ac8:	d81e      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ace:	d011      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad4:	d818      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ade:	d113      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 f99a 	bl	8007e20 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004af2:	e014      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af8:	3330      	adds	r3, #48	@ 0x30
 8004afa:	4618      	mov	r0, r3
 8004afc:	f003 fa28 	bl	8007f50 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004b06:	e00a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b38:	4a34      	ldr	r2, [pc, #208]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d058      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b6e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b72:	d031      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004b74:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b78:	d82a      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7e:	d02d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b84:	d824      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b8a:	d029      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004b8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b90:	d81e      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	d011      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9c:	d818      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	d113      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bac:	3308      	adds	r3, #8
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 f936 	bl	8007e20 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004bba:	e014      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc0:	3330      	adds	r3, #48	@ 0x30
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 f9c4 	bl	8007f50 <RCCEx_PLL3_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004bce:	e00a      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bd6:	e006      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004bd8:	bf00      	nop
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d110      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004bee:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c00:	4902      	ldr	r1, [pc, #8]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c08:	e006      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004c0a:	bf00      	nop
 8004c0c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	2100      	movs	r1, #0
 8004c22:	6239      	str	r1, [r7, #32]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d055      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c3c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c40:	d031      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004c42:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c46:	d82a      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c4c:	d02d      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c52:	d824      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c54:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c58:	d029      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004c5a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c5e:	d81e      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6a:	d818      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c74:	d113      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f003 f8cf 	bl	8007e20 <RCCEx_PLL2_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c88:	e014      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8e:	3330      	adds	r3, #48	@ 0x30
 8004c90:	4618      	mov	r0, r3
 8004c92:	f003 f95d 	bl	8007f50 <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004cbc:	4b88      	ldr	r3, [pc, #544]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cce:	4984      	ldr	r1, [pc, #528]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	61b9      	str	r1, [r7, #24]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d03d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d81c      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004d08:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d4b 	.word	0x08004d4b
 8004d14:	08004d21 	.word	0x08004d21
 8004d18:	08004d2f 	.word	0x08004d2f
 8004d1c:	08004d4b 	.word	0x08004d4b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d32:	3308      	adds	r3, #8
 8004d34:	4618      	mov	r0, r3
 8004d36:	f003 f873 	bl	8007e20 <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10d      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004d54:	4b62      	ldr	r3, [pc, #392]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d66:	495e      	ldr	r1, [pc, #376]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004d6e:	e003      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	2100      	movs	r1, #0
 8004d82:	6139      	str	r1, [r7, #16]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	d03a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da0:	d00e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da6:	d815      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db0:	d110      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004dbe:	e00e      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f003 f82a 	bl	8007e20 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004dd2:	e004      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004dda:	e000      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004de6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004df8:	4939      	ldr	r1, [pc, #228]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004e00:	e003      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e06:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	2100      	movs	r1, #0
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d038      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e2e:	2b30      	cmp	r3, #48	@ 0x30
 8004e30:	d01b      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004e32:	2b30      	cmp	r3, #48	@ 0x30
 8004e34:	d815      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d002      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d007      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004e3e:	e010      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4b27      	ldr	r3, [pc, #156]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	4a26      	ldr	r2, [pc, #152]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e4c:	e00e      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e52:	3330      	adds	r3, #48	@ 0x30
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 f87b 	bl	8007f50 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004e60:	e004      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004e74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e86:	4916      	ldr	r1, [pc, #88]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	6039      	str	r1, [r7, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	d00c      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004ec6:	4906      	ldr	r1, [pc, #24]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004ece:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ede:	bf00      	nop
 8004ee0:	44020c00 	.word	0x44020c00

08004ee4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b08b      	sub	sp, #44	@ 0x2c
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004eec:	4bae      	ldr	r3, [pc, #696]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ef6:	4bac      	ldr	r3, [pc, #688]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004f00:	4ba9      	ldr	r3, [pc, #676]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f0a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f0c:	4ba6      	ldr	r3, [pc, #664]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f18:	4ba3      	ldr	r3, [pc, #652]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f30:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8126 	beq.w	8005188 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d053      	beq.n	8004fea <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d86f      	bhi.n	8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d02b      	beq.n	8004fac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004f54:	e068      	b.n	8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f56:	4b94      	ldr	r3, [pc, #592]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	4a92      	ldr	r2, [pc, #584]	@ (80051ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004f62:	fa22 f303 	lsr.w	r3, r2, r3
 8004f66:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f8e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004faa:	e068      	b.n	800507e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80051b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fcc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004fe8:	e049      	b.n	800507e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80051b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a04 	vldr	s12, [r7, #16]
 800500a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005026:	e02a      	b.n	800507e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005028:	4b5f      	ldr	r3, [pc, #380]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	08db      	lsrs	r3, r3, #3
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	ee07 3a90 	vmov	s15, r3
 8005058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005060:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800507c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800507e:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800508a:	d121      	bne.n	80050d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800508c:	4b46      	ldr	r3, [pc, #280]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005098:	4b43      	ldr	r3, [pc, #268]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800509a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509c:	0a5b      	lsrs	r3, r3, #9
 800509e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80050aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80050b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e006      	b.n	80050d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050d6:	4b34      	ldr	r3, [pc, #208]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e2:	d121      	bne.n	8005128 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80050e4:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050f0:	4b2d      	ldr	r3, [pc, #180]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005106:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800510a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800510e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005116:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	e006      	b.n	800512e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	e002      	b.n	800512e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800512e:	4b1e      	ldr	r3, [pc, #120]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800513a:	d121      	bne.n	8005180 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d017      	beq.n	8005178 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005148:	4b17      	ldr	r3, [pc, #92]	@ (80051a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	0e1b      	lsrs	r3, r3, #24
 800514e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800515a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800515e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005162:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005176:	e010      	b.n	800519a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	e00c      	b.n	800519a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
}
 8005186:	e008      	b.n	800519a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	372c      	adds	r7, #44	@ 0x2c
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	44020c00 	.word	0x44020c00
 80051ac:	03d09000 	.word	0x03d09000
 80051b0:	46000000 	.word	0x46000000
 80051b4:	4a742400 	.word	0x4a742400
 80051b8:	4af42400 	.word	0x4af42400

080051bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80051bc:	b480      	push	{r7}
 80051be:	b08b      	sub	sp, #44	@ 0x2c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80051c4:	4bae      	ldr	r3, [pc, #696]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051cc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80051ce:	4bac      	ldr	r3, [pc, #688]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80051d8:	4ba9      	ldr	r3, [pc, #676]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80051e4:	4ba6      	ldr	r3, [pc, #664]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80051f0:	4ba3      	ldr	r3, [pc, #652]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005208:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 8126 	beq.w	8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d053      	beq.n	80052c2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d86f      	bhi.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d003      	beq.n	800522e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d02b      	beq.n	8005284 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800522c:	e068      	b.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800522e:	4b94      	ldr	r3, [pc, #592]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	08db      	lsrs	r3, r3, #3
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	4a92      	ldr	r2, [pc, #584]	@ (8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a04 	vldr	s12, [r7, #16]
 8005266:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005282:	e068      	b.n	8005356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800548c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80052a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80052a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052c0:	e049      	b.n	8005356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80052d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a04 	vldr	s12, [r7, #16]
 80052e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052fe:	e02a      	b.n	8005356 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005300:	4b5f      	ldr	r3, [pc, #380]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	4a5e      	ldr	r2, [pc, #376]	@ (8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
 8005310:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	ed97 6a04 	vldr	s12, [r7, #16]
 8005338:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800533c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005354:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005356:	4b4a      	ldr	r3, [pc, #296]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800535e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005362:	d121      	bne.n	80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005364:	4b46      	ldr	r3, [pc, #280]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005370:	4b43      	ldr	r3, [pc, #268]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005374:	0a5b      	lsrs	r3, r3, #9
 8005376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005386:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800538a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005396:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e006      	b.n	80053ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e002      	b.n	80053ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ae:	4b34      	ldr	r3, [pc, #208]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ba:	d121      	bne.n	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80053bc:	4b30      	ldr	r3, [pc, #192]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80053c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80053da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80053e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	e006      	b.n	8005406 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005406:	4b1e      	ldr	r3, [pc, #120]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005412:	d121      	bne.n	8005458 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005414:	4b1a      	ldr	r3, [pc, #104]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d017      	beq.n	8005450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005420:	4b17      	ldr	r3, [pc, #92]	@ (8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	0e1b      	lsrs	r3, r3, #24
 8005426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005436:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800543a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800543e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005446:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800544e:	e010      	b.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
}
 8005456:	e00c      	b.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
}
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
}
 8005472:	bf00      	nop
 8005474:	372c      	adds	r7, #44	@ 0x2c
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	44020c00 	.word	0x44020c00
 8005484:	03d09000 	.word	0x03d09000
 8005488:	46000000 	.word	0x46000000
 800548c:	4a742400 	.word	0x4a742400
 8005490:	4af42400 	.word	0x4af42400

08005494 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005494:	b480      	push	{r7}
 8005496:	b08b      	sub	sp, #44	@ 0x2c
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800549c:	4bae      	ldr	r3, [pc, #696]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80054a6:	4bac      	ldr	r3, [pc, #688]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80054b0:	4ba9      	ldr	r3, [pc, #676]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ba:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80054bc:	4ba6      	ldr	r3, [pc, #664]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80054c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8126 	beq.w	8005738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d053      	beq.n	800559a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d86f      	bhi.n	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d003      	beq.n	8005506 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d02b      	beq.n	800555c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005504:	e068      	b.n	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005506:	4b94      	ldr	r3, [pc, #592]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	08db      	lsrs	r3, r3, #3
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	4a92      	ldr	r2, [pc, #584]	@ (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a04 	vldr	s12, [r7, #16]
 800553e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800555a:	e068      	b.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005578:	ed97 6a04 	vldr	s12, [r7, #16]
 800557c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005598:	e049      	b.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80055a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80055ba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80055d6:	e02a      	b.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	08db      	lsrs	r3, r3, #3
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	4a5e      	ldr	r2, [pc, #376]	@ (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005610:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005628:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800562c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800562e:	4b4a      	ldr	r3, [pc, #296]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563a:	d121      	bne.n	8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800563c:	4b46      	ldr	r3, [pc, #280]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005648:	4b43      	ldr	r3, [pc, #268]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	0a5b      	lsrs	r3, r3, #9
 800564e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800565a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800565e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005662:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e006      	b.n	8005686 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005686:	4b34      	ldr	r3, [pc, #208]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005692:	d121      	bne.n	80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005694:	4b30      	ldr	r3, [pc, #192]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80056a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80056b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80056ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e006      	b.n	80056de <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	e002      	b.n	80056de <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056de:	4b1e      	ldr	r3, [pc, #120]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ea:	d121      	bne.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80056ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d017      	beq.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80056f8:	4b17      	ldr	r3, [pc, #92]	@ (8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800570a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800570e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005712:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005726:	e010      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	e00c      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	e008      	b.n	800574a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
}
 800574a:	bf00      	nop
 800574c:	372c      	adds	r7, #44	@ 0x2c
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	44020c00 	.word	0x44020c00
 800575c:	03d09000 	.word	0x03d09000
 8005760:	46000000 	.word	0x46000000
 8005764:	4a742400 	.word	0x4a742400
 8005768:	4af42400 	.word	0x4af42400

0800576c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b08f      	sub	sp, #60	@ 0x3c
 8005770:	af00      	add	r7, sp, #0
 8005772:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800577a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800577e:	4321      	orrs	r1, r4
 8005780:	d150      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005782:	4b26      	ldr	r3, [pc, #152]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005788:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800578c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800578e:	4b23      	ldr	r3, [pc, #140]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b02      	cmp	r3, #2
 800579a:	d108      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a2:	d104      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80057a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057aa:	f002 bb2a 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80057ae:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057bc:	d108      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d104      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80057c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80057cc:	f002 bb19 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80057d0:	4b12      	ldr	r3, [pc, #72]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057dc:	d119      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e4:	d115      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80057ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f2:	d30a      	bcc.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80057f4:	4b09      	ldr	r3, [pc, #36]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057fe:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005806:	f002 bafc 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800580e:	f002 baf8 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
 8005816:	f002 baf4 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800581a:	bf00      	nop
 800581c:	44020c00 	.word	0x44020c00
 8005820:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005828:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800582c:	ea50 0104 	orrs.w	r1, r0, r4
 8005830:	f001 8275 	beq.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005838:	2801      	cmp	r0, #1
 800583a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800583e:	f082 82dd 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005846:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800584a:	ea50 0104 	orrs.w	r1, r0, r4
 800584e:	f001 816c 	beq.w	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005856:	2801      	cmp	r0, #1
 8005858:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800585c:	f082 82ce 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005864:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005868:	ea50 0104 	orrs.w	r1, r0, r4
 800586c:	f001 8602 	beq.w	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005874:	2801      	cmp	r0, #1
 8005876:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800587a:	f082 82bf 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800587e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005882:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005886:	ea50 0104 	orrs.w	r1, r0, r4
 800588a:	f001 854c 	beq.w	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800588e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005892:	2801      	cmp	r0, #1
 8005894:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005898:	f082 82b0 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800589c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80058a4:	ea50 0104 	orrs.w	r1, r0, r4
 80058a8:	f001 849e 	beq.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80058ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b0:	2801      	cmp	r0, #1
 80058b2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80058b6:	f082 82a1 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058be:	f1a1 0420 	sub.w	r4, r1, #32
 80058c2:	ea50 0104 	orrs.w	r1, r0, r4
 80058c6:	f001 83e8 	beq.w	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80058ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ce:	2801      	cmp	r0, #1
 80058d0:	f171 0120 	sbcs.w	r1, r1, #32
 80058d4:	f082 8292 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058dc:	f1a1 0410 	sub.w	r4, r1, #16
 80058e0:	ea50 0104 	orrs.w	r1, r0, r4
 80058e4:	f002 8256 	beq.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80058e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ec:	2801      	cmp	r0, #1
 80058ee:	f171 0110 	sbcs.w	r1, r1, #16
 80058f2:	f082 8283 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058fa:	f1a1 0408 	sub.w	r4, r1, #8
 80058fe:	ea50 0104 	orrs.w	r1, r0, r4
 8005902:	f002 81cc 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590a:	2801      	cmp	r0, #1
 800590c:	f171 0108 	sbcs.w	r1, r1, #8
 8005910:	f082 8274 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005918:	1f0c      	subs	r4, r1, #4
 800591a:	ea50 0104 	orrs.w	r1, r0, r4
 800591e:	f001 8648 	beq.w	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005926:	2801      	cmp	r0, #1
 8005928:	f171 0104 	sbcs.w	r1, r1, #4
 800592c:	f082 8266 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005934:	1e8c      	subs	r4, r1, #2
 8005936:	ea50 0104 	orrs.w	r1, r0, r4
 800593a:	f002 8143 	beq.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800593e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005942:	2801      	cmp	r0, #1
 8005944:	f171 0102 	sbcs.w	r1, r1, #2
 8005948:	f082 8258 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800594c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005950:	1e4c      	subs	r4, r1, #1
 8005952:	ea50 0104 	orrs.w	r1, r0, r4
 8005956:	f002 80ce 	beq.w	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800595a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595e:	2801      	cmp	r0, #1
 8005960:	f171 0101 	sbcs.w	r1, r1, #1
 8005964:	f082 824a 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005970:	4321      	orrs	r1, r4
 8005972:	f002 8059 	beq.w	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597a:	4cd9      	ldr	r4, [pc, #868]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800597c:	42a0      	cmp	r0, r4
 800597e:	f171 0100 	sbcs.w	r1, r1, #0
 8005982:	f082 823b 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800598e:	4321      	orrs	r1, r4
 8005990:	f001 87d9 	beq.w	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005998:	4cd2      	ldr	r4, [pc, #840]	@ (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800599a:	42a0      	cmp	r0, r4
 800599c:	f171 0100 	sbcs.w	r1, r1, #0
 80059a0:	f082 822c 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80059ac:	4321      	orrs	r1, r4
 80059ae:	f001 8751 	beq.w	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80059b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b6:	4ccc      	ldr	r4, [pc, #816]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80059b8:	42a0      	cmp	r0, r4
 80059ba:	f171 0100 	sbcs.w	r1, r1, #0
 80059be:	f082 821d 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80059ca:	4321      	orrs	r1, r4
 80059cc:	f001 869a 	beq.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80059d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d4:	4cc5      	ldr	r4, [pc, #788]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059d6:	42a0      	cmp	r0, r4
 80059d8:	f171 0100 	sbcs.w	r1, r1, #0
 80059dc:	f082 820e 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80059e8:	4321      	orrs	r1, r4
 80059ea:	f001 8612 	beq.w	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80059ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f2:	4cbf      	ldr	r4, [pc, #764]	@ (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80059f4:	42a0      	cmp	r0, r4
 80059f6:	f171 0100 	sbcs.w	r1, r1, #0
 80059fa:	f082 81ff 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a02:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005a06:	4321      	orrs	r1, r4
 8005a08:	f002 817e 	beq.w	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a10:	4cb8      	ldr	r4, [pc, #736]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005a12:	42a0      	cmp	r0, r4
 8005a14:	f171 0100 	sbcs.w	r1, r1, #0
 8005a18:	f082 81f0 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a20:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005a24:	4321      	orrs	r1, r4
 8005a26:	f000 829e 	beq.w	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2e:	4cb2      	ldr	r4, [pc, #712]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	f171 0100 	sbcs.w	r1, r1, #0
 8005a36:	f082 81e1 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a3e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005a42:	4321      	orrs	r1, r4
 8005a44:	f000 826d 	beq.w	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4c:	4cab      	ldr	r4, [pc, #684]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a4e:	42a0      	cmp	r0, r4
 8005a50:	f171 0100 	sbcs.w	r1, r1, #0
 8005a54:	f082 81d2 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005a60:	4321      	orrs	r1, r4
 8005a62:	f001 800d 	beq.w	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6a:	4ca5      	ldr	r4, [pc, #660]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	f171 0100 	sbcs.w	r1, r1, #0
 8005a72:	f082 81c3 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005a7e:	4321      	orrs	r1, r4
 8005a80:	f000 81d0 	beq.w	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a88:	4c9e      	ldr	r4, [pc, #632]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a8a:	42a0      	cmp	r0, r4
 8005a8c:	f171 0100 	sbcs.w	r1, r1, #0
 8005a90:	f082 81b4 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a98:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005a9c:	4321      	orrs	r1, r4
 8005a9e:	f000 8142 	beq.w	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa6:	4c98      	ldr	r4, [pc, #608]	@ (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	f171 0100 	sbcs.w	r1, r1, #0
 8005aae:	f082 81a5 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005aba:	4321      	orrs	r1, r4
 8005abc:	f001 824e 	beq.w	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac4:	4c91      	ldr	r4, [pc, #580]	@ (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005ac6:	42a0      	cmp	r0, r4
 8005ac8:	f171 0100 	sbcs.w	r1, r1, #0
 8005acc:	f082 8196 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005ad8:	4321      	orrs	r1, r4
 8005ada:	f001 8197 	beq.w	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae2:	4c8b      	ldr	r4, [pc, #556]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	f171 0100 	sbcs.w	r1, r1, #0
 8005aea:	f082 8187 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005af6:	4321      	orrs	r1, r4
 8005af8:	f001 8154 	beq.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b00:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005b04:	f171 0100 	sbcs.w	r1, r1, #0
 8005b08:	f082 8178 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b10:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005b14:	4321      	orrs	r1, r4
 8005b16:	f001 80b7 	beq.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005b22:	42a0      	cmp	r0, r4
 8005b24:	f171 0100 	sbcs.w	r1, r1, #0
 8005b28:	f082 8168 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b30:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005b34:	4321      	orrs	r1, r4
 8005b36:	f001 8064 	beq.w	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b3e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005b42:	42a0      	cmp	r0, r4
 8005b44:	f171 0100 	sbcs.w	r1, r1, #0
 8005b48:	f082 8158 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b50:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005b54:	4321      	orrs	r1, r4
 8005b56:	f001 8011 	beq.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005b62:	42a0      	cmp	r0, r4
 8005b64:	f171 0100 	sbcs.w	r1, r1, #0
 8005b68:	f082 8148 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b70:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005b74:	4321      	orrs	r1, r4
 8005b76:	f000 871e 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005b82:	42a0      	cmp	r0, r4
 8005b84:	f171 0100 	sbcs.w	r1, r1, #0
 8005b88:	f082 8138 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b90:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005b94:	4321      	orrs	r1, r4
 8005b96:	f000 86a8 	beq.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9e:	f640 0401 	movw	r4, #2049	@ 0x801
 8005ba2:	42a0      	cmp	r0, r4
 8005ba4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ba8:	f082 8128 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005bb4:	4321      	orrs	r1, r4
 8005bb6:	f000 8632 	beq.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbe:	f240 4401 	movw	r4, #1025	@ 0x401
 8005bc2:	42a0      	cmp	r0, r4
 8005bc4:	f171 0100 	sbcs.w	r1, r1, #0
 8005bc8:	f082 8118 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd0:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005bd4:	4321      	orrs	r1, r4
 8005bd6:	f000 85b0 	beq.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bde:	f240 2401 	movw	r4, #513	@ 0x201
 8005be2:	42a0      	cmp	r0, r4
 8005be4:	f171 0100 	sbcs.w	r1, r1, #0
 8005be8:	f082 8108 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005bf4:	4321      	orrs	r1, r4
 8005bf6:	f000 8535 	beq.w	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bfe:	f240 1401 	movw	r4, #257	@ 0x101
 8005c02:	42a0      	cmp	r0, r4
 8005c04:	f171 0100 	sbcs.w	r1, r1, #0
 8005c08:	f082 80f8 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c10:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005c14:	4321      	orrs	r1, r4
 8005c16:	f000 84ba 	beq.w	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1e:	2881      	cmp	r0, #129	@ 0x81
 8005c20:	f171 0100 	sbcs.w	r1, r1, #0
 8005c24:	f082 80ea 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c2c:	2821      	cmp	r0, #33	@ 0x21
 8005c2e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c32:	d26f      	bcs.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c38:	4301      	orrs	r1, r0
 8005c3a:	f002 80df 	beq.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c42:	1e42      	subs	r2, r0, #1
 8005c44:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005c48:	2a20      	cmp	r2, #32
 8005c4a:	f173 0100 	sbcs.w	r1, r3, #0
 8005c4e:	f082 80d5 	bcs.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c52:	2a1f      	cmp	r2, #31
 8005c54:	f202 80d2 	bhi.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c58:	a101      	add	r1, pc, #4	@ (adr r1, 8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005c5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005fc1 	.word	0x08005fc1
 8005c64:	0800608d 	.word	0x0800608d
 8005c68:	08007dfd 	.word	0x08007dfd
 8005c6c:	0800614d 	.word	0x0800614d
 8005c70:	08007dfd 	.word	0x08007dfd
 8005c74:	08007dfd 	.word	0x08007dfd
 8005c78:	08007dfd 	.word	0x08007dfd
 8005c7c:	0800621d 	.word	0x0800621d
 8005c80:	08007dfd 	.word	0x08007dfd
 8005c84:	08007dfd 	.word	0x08007dfd
 8005c88:	08007dfd 	.word	0x08007dfd
 8005c8c:	08007dfd 	.word	0x08007dfd
 8005c90:	08007dfd 	.word	0x08007dfd
 8005c94:	08007dfd 	.word	0x08007dfd
 8005c98:	08007dfd 	.word	0x08007dfd
 8005c9c:	080062ff 	.word	0x080062ff
 8005ca0:	08007dfd 	.word	0x08007dfd
 8005ca4:	08007dfd 	.word	0x08007dfd
 8005ca8:	08007dfd 	.word	0x08007dfd
 8005cac:	08007dfd 	.word	0x08007dfd
 8005cb0:	08007dfd 	.word	0x08007dfd
 8005cb4:	08007dfd 	.word	0x08007dfd
 8005cb8:	08007dfd 	.word	0x08007dfd
 8005cbc:	08007dfd 	.word	0x08007dfd
 8005cc0:	08007dfd 	.word	0x08007dfd
 8005cc4:	08007dfd 	.word	0x08007dfd
 8005cc8:	08007dfd 	.word	0x08007dfd
 8005ccc:	08007dfd 	.word	0x08007dfd
 8005cd0:	08007dfd 	.word	0x08007dfd
 8005cd4:	08007dfd 	.word	0x08007dfd
 8005cd8:	08007dfd 	.word	0x08007dfd
 8005cdc:	080063d5 	.word	0x080063d5
 8005ce0:	80000001 	.word	0x80000001
 8005ce4:	40000001 	.word	0x40000001
 8005ce8:	20000001 	.word	0x20000001
 8005cec:	10000001 	.word	0x10000001
 8005cf0:	08000001 	.word	0x08000001
 8005cf4:	04000001 	.word	0x04000001
 8005cf8:	00800001 	.word	0x00800001
 8005cfc:	00400001 	.word	0x00400001
 8005d00:	00200001 	.word	0x00200001
 8005d04:	00100001 	.word	0x00100001
 8005d08:	00080001 	.word	0x00080001
 8005d0c:	00040001 	.word	0x00040001
 8005d10:	00020001 	.word	0x00020001
 8005d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d18:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	f000 83c4 	beq.w	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005d22:	f002 b86b 	b.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005d26:	4ba1      	ldr	r3, [pc, #644]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005d30:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d38:	d036      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d40:	d86b      	bhi.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d48:	d02b      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d50:	d863      	bhi.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d58:	d01b      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d60:	d85b      	bhi.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6e:	d008      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005d70:	e053      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d72:	f107 0320 	add.w	r3, r7, #32
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff f8b4 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d80:	e04e      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fa18 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d90:	e046      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fb7c 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005da0:	e03e      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005da2:	4b83      	ldr	r3, [pc, #524]	@ (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005da6:	e03b      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005da8:	4b80      	ldr	r3, [pc, #512]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005db4:	4b7d      	ldr	r3, [pc, #500]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dc6:	4b79      	ldr	r3, [pc, #484]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	08db      	lsrs	r3, r3, #3
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	4a78      	ldr	r2, [pc, #480]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd8:	e01e      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dda:	4b74      	ldr	r3, [pc, #464]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de6:	d106      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dee:	d102      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005df0:	4b71      	ldr	r3, [pc, #452]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df4:	e010      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005df6:	4b6d      	ldr	r3, [pc, #436]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e02:	d106      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e10:	e002      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e1e:	bf00      	nop
          }
        }
        break;
 8005e20:	f001 bfef 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005e24:	4b61      	ldr	r3, [pc, #388]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e2a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005e2e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e36:	d036      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e3e:	d86b      	bhi.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e46:	d02b      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e4e:	d863      	bhi.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e56:	d01b      	beq.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e5e:	d85b      	bhi.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e6c:	d008      	beq.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005e6e:	e053      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e70:	f107 0320 	add.w	r3, r7, #32
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f835 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e7e:	e04e      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff f999 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e8e:	e046      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fafd 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e9e:	e03e      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005ea0:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ea4:	e03b      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ec4:	4b39      	ldr	r3, [pc, #228]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a39      	ldr	r2, [pc, #228]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed6:	e01e      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ed8:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005eee:	4b32      	ldr	r3, [pc, #200]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef2:	e010      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f00:	d106      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f08:	d102      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0e:	e002      	b.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005f14:	e003      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005f16:	e002      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f1c:	bf00      	nop
          }
        }
        break;
 8005f1e:	f001 bf70 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005f22:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d108      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f34:	f107 0320 	add.w	r3, r7, #32
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe ffd3 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f42:	f001 bf5e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d108      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f933 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f5a:	f001 bf52 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f62:	f001 bf4e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005f66:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d108      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f78:	f107 0320 	add.w	r3, r7, #32
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe ffb1 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f86:	f001 bf3c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	2b80      	cmp	r3, #128	@ 0x80
 8005f8e:	d108      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f911 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f9e:	f001 bf30 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa6:	f001 bf2c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005faa:	bf00      	nop
 8005fac:	44020c00 	.word	0x44020c00
 8005fb0:	00bb8000 	.word	0x00bb8000
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	003d0900 	.word	0x003d0900
 8005fbc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005fd2:	f7fc ffd1 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8005fd6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fd8:	f001 bf13 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005fdc:	4b96      	ldr	r3, [pc, #600]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe8:	d10a      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d107      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff0:	f107 0314 	add.w	r3, r7, #20
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff f8e1 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffe:	e043      	b.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006000:	4b8d      	ldr	r3, [pc, #564]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600c:	d10a      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b02      	cmp	r3, #2
 8006012:	d107      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fa3b 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
 8006022:	e031      	b.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006024:	4b84      	ldr	r3, [pc, #528]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d10c      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	2b03      	cmp	r3, #3
 8006034:	d109      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006036:	4b80      	ldr	r3, [pc, #512]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	08db      	lsrs	r3, r3, #3
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	4a7e      	ldr	r2, [pc, #504]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006042:	fa22 f303 	lsr.w	r3, r2, r3
 8006046:	637b      	str	r3, [r7, #52]	@ 0x34
 8006048:	e01e      	b.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800604a:	4b7b      	ldr	r3, [pc, #492]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	2b04      	cmp	r3, #4
 800605c:	d102      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800605e:	4b78      	ldr	r3, [pc, #480]	@ (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
 8006062:	e011      	b.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006064:	4b74      	ldr	r3, [pc, #464]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d106      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b05      	cmp	r3, #5
 8006076:	d103      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
 800607e:	e003      	b.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006084:	f001 bebd 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006088:	f001 bebb 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800608c:	4b6a      	ldr	r3, [pc, #424]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800608e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800609e:	f7fc ff55 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80060a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80060a4:	f001 bead 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80060a8:	4b63      	ldr	r3, [pc, #396]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b4:	d10a      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d107      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f87b 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ca:	e03d      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d108      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff f9dc 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e0:	f001 be8f 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80060e4:	4b54      	ldr	r3, [pc, #336]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d10c      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	2b18      	cmp	r3, #24
 80060f4:	d109      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060f6:	4b50      	ldr	r3, [pc, #320]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	08db      	lsrs	r3, r3, #3
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	4a4e      	ldr	r2, [pc, #312]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006102:	fa22 f303 	lsr.w	r3, r2, r3
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
 8006108:	e01e      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800610a:	4b4b      	ldr	r3, [pc, #300]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	2b20      	cmp	r3, #32
 800611c:	d102      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800611e:	4b48      	ldr	r3, [pc, #288]	@ (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
 8006122:	e011      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006124:	4b44      	ldr	r3, [pc, #272]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b02      	cmp	r3, #2
 8006130:	d106      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	2b28      	cmp	r3, #40	@ 0x28
 8006136:	d103      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006144:	f001 be5d 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006148:	f001 be5b 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800614c:	4b3a      	ldr	r3, [pc, #232]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800614e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006152:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006156:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800615e:	f7fc fef5 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006162:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006164:	f001 be4d 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006168:	4b33      	ldr	r3, [pc, #204]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006174:	d10a      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d107      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f81b 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34
 800618a:	e045      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800618c:	4b2a      	ldr	r3, [pc, #168]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006198:	d10a      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2b80      	cmp	r3, #128	@ 0x80
 800619e:	d107      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff f975 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ae:	e033      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80061b0:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d10c      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c0:	d109      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	08db      	lsrs	r3, r3, #3
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d4:	e020      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80061d6:	4b18      	ldr	r3, [pc, #96]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e2:	d106      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ea:	d102      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80061ec:	4b14      	ldr	r3, [pc, #80]	@ (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f0:	e012      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80061f2:	4b11      	ldr	r3, [pc, #68]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d107      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006206:	d103      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006214:	f001 bdf5 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006218:	f001 bdf3 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800621c:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800621e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006222:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fc fe8d 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006232:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006234:	f001 bde5 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006238:	44020c00 	.word	0x44020c00
 800623c:	03d09000 	.word	0x03d09000
 8006240:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006244:	4ba0      	ldr	r3, [pc, #640]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800624c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006250:	d10b      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006258:	d107      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe ffac 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
 8006268:	e047      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800626a:	4b97      	ldr	r3, [pc, #604]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006276:	d10b      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d107      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f905 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
 800628e:	e034      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006290:	4b8d      	ldr	r3, [pc, #564]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d10d      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062a2:	d109      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062a4:	4b88      	ldr	r3, [pc, #544]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a87      	ldr	r2, [pc, #540]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b6:	e020      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80062b8:	4b83      	ldr	r3, [pc, #524]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c4:	d106      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d102      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80062ce:	4b80      	ldr	r3, [pc, #512]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d2:	e012      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80062d4:	4b7c      	ldr	r3, [pc, #496]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80062e8:	d103      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062f6:	f001 bd84 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062fa:	f001 bd82 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80062fe:	4b72      	ldr	r3, [pc, #456]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006304:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006308:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006310:	f7fc fe1c 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006314:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006316:	f001 bd74 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800631a:	4b6b      	ldr	r3, [pc, #428]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006326:	d10b      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe ff41 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34
 800633e:	e047      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006340:	4b61      	ldr	r3, [pc, #388]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634c:	d10b      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006354:	d107      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff f89a 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
 8006364:	e034      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006366:	4b58      	ldr	r3, [pc, #352]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d10d      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006378:	d109      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800637a:	4b53      	ldr	r3, [pc, #332]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	4a51      	ldr	r2, [pc, #324]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006386:	fa22 f303 	lsr.w	r3, r2, r3
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
 800638c:	e020      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800638e:	4b4e      	ldr	r3, [pc, #312]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800639a:	d106      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a2:	d102      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80063a4:	4b4a      	ldr	r3, [pc, #296]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a8:	e012      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063aa:	4b47      	ldr	r3, [pc, #284]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d107      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063be:	d103      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80063c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063cc:	f001 bd19 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063d0:	f001 bd17 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80063d4:	4b3c      	ldr	r3, [pc, #240]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063da:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80063de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7fc fdb1 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80063ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80063ec:	f001 bd09 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80063f0:	4b35      	ldr	r3, [pc, #212]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063fc:	d10b      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006404:	d107      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006406:	f107 0314 	add.w	r3, r7, #20
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fed6 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
 8006414:	e047      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006416:	4b2c      	ldr	r3, [pc, #176]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006422:	d10b      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800642a:	d107      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642c:	f107 0308 	add.w	r3, r7, #8
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f82f 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
 800643a:	e034      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800643c:	4b22      	ldr	r3, [pc, #136]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d10d      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800644e:	d109      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006450:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	08db      	lsrs	r3, r3, #3
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	4a1c      	ldr	r2, [pc, #112]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
 8006462:	e020      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006464:	4b18      	ldr	r3, [pc, #96]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800646c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006470:	d106      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006478:	d102      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800647a:	4b15      	ldr	r3, [pc, #84]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
 800647e:	e012      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006480:	4b11      	ldr	r3, [pc, #68]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d107      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006494:	d103      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
 800649c:	e003      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064a2:	f001 bcae 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064a6:	f001 bcac 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80064aa:	4b07      	ldr	r3, [pc, #28]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064b0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80064b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fc fd46 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80064c0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80064c2:	f001 bc9e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064c6:	bf00      	nop
 80064c8:	44020c00 	.word	0x44020c00
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80064d4:	4ba0      	ldr	r3, [pc, #640]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e0:	d10b      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fe64 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f8:	e047      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80064fa:	4b97      	ldr	r3, [pc, #604]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006506:	d10b      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006510:	f107 0308 	add.w	r3, r7, #8
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe ffbd 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34
 800651e:	e034      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006520:	4b8d      	ldr	r3, [pc, #564]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d10d      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006532:	d109      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006534:	4b88      	ldr	r3, [pc, #544]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	08db      	lsrs	r3, r3, #3
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	4a87      	ldr	r2, [pc, #540]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
 8006546:	e020      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006548:	4b83      	ldr	r3, [pc, #524]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655c:	d102      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800655e:	4b80      	ldr	r3, [pc, #512]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
 8006562:	e012      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006564:	4b7c      	ldr	r3, [pc, #496]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006578:	d103      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006580:	e003      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006586:	f001 bc3c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800658a:	f001 bc3a 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800658e:	4b72      	ldr	r3, [pc, #456]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006594:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006598:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fc fcd4 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80065a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80065a6:	f001 bc2c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80065aa:	4b6b      	ldr	r3, [pc, #428]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b6:	d10b      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c0:	f107 0314 	add.w	r3, r7, #20
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fdf9 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	e047      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80065d0:	4b61      	ldr	r3, [pc, #388]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065dc:	d10b      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065e4:	d107      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe ff52 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f4:	e034      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80065f6:	4b58      	ldr	r3, [pc, #352]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d10d      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006608:	d109      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800660a:	4b53      	ldr	r3, [pc, #332]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	08db      	lsrs	r3, r3, #3
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	4a51      	ldr	r2, [pc, #324]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006616:	fa22 f303 	lsr.w	r3, r2, r3
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
 800661c:	e020      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800661e:	4b4e      	ldr	r3, [pc, #312]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662a:	d106      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006632:	d102      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006634:	4b4a      	ldr	r3, [pc, #296]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
 8006638:	e012      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800663a:	4b47      	ldr	r3, [pc, #284]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800663c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8006648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800664e:	d103      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8006650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006654:	637b      	str	r3, [r7, #52]	@ 0x34
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800665c:	f001 bbd1 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006660:	f001 bbcf 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006664:	4b3c      	ldr	r3, [pc, #240]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006666:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800666a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800666e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006676:	f7fc fc69 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800667a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800667c:	f001 bbc1 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800668c:	d10b      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006694:	d107      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fd8e 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a4:	e047      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80066a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b2:	d10b      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066ba:	d107      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066bc:	f107 0308 	add.w	r3, r7, #8
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fee7 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ca:	e034      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80066cc:	4b22      	ldr	r3, [pc, #136]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d10d      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066de:	d109      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	4a1c      	ldr	r2, [pc, #112]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f2:	e020      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80066f4:	4b18      	ldr	r3, [pc, #96]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006700:	d106      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006708:	d102      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	e012      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006710:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d107      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006724:	d103      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006732:	f001 bb66 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006736:	f001 bb64 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800673a:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800673c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006740:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fc fbfe 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006750:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006752:	f001 bb56 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006756:	bf00      	nop
 8006758:	44020c00 	.word	0x44020c00
 800675c:	03d09000 	.word	0x03d09000
 8006760:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006764:	4ba1      	ldr	r3, [pc, #644]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800676c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006770:	d10b      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677a:	f107 0314 	add.w	r3, r7, #20
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fd1c 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
 8006788:	e047      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800678a:	4b98      	ldr	r3, [pc, #608]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006796:	d10b      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800679e:	d107      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a0:	f107 0308 	add.w	r3, r7, #8
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe fe75 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ae:	e034      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80067b0:	4b8e      	ldr	r3, [pc, #568]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d10d      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80067c2:	d109      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067c4:	4b89      	ldr	r3, [pc, #548]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a88      	ldr	r2, [pc, #544]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d6:	e020      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80067d8:	4b84      	ldr	r3, [pc, #528]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e4:	d106      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ec:	d102      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80067ee:	4b81      	ldr	r3, [pc, #516]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f2:	e012      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80067f4:	4b7d      	ldr	r3, [pc, #500]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d107      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006808:	d103      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	e003      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006816:	f001 baf4 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800681a:	f001 baf2 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800681e:	4b73      	ldr	r3, [pc, #460]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006820:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fc fb8c 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006834:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006836:	f001 bae4 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800683a:	4b6c      	ldr	r3, [pc, #432]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006846:	d10a      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	2b01      	cmp	r3, #1
 800684c:	d107      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fcb2 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	e043      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800685e:	4b63      	ldr	r3, [pc, #396]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800686a:	d10a      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b02      	cmp	r3, #2
 8006870:	d107      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fe0c 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006880:	e031      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006882:	4b5a      	ldr	r3, [pc, #360]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d10c      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	2b03      	cmp	r3, #3
 8006892:	d109      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006894:	4b55      	ldr	r3, [pc, #340]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	08db      	lsrs	r3, r3, #3
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	4a54      	ldr	r2, [pc, #336]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a6:	e01e      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80068a8:	4b50      	ldr	r3, [pc, #320]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b4:	d105      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d102      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80068bc:	4b4d      	ldr	r3, [pc, #308]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c0:	e011      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80068c2:	4b4a      	ldr	r3, [pc, #296]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d106      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d103      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e2:	f001 ba8e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068e6:	f001 ba8c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80068ea:	4b40      	ldr	r3, [pc, #256]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fc fb26 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006900:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006902:	f001 ba7e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006906:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006912:	d10a      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	2b10      	cmp	r3, #16
 8006918:	d107      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691a:	f107 0314 	add.w	r3, r7, #20
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fc4c 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e043      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800692a:	4b30      	ldr	r3, [pc, #192]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006936:	d10a      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	2b20      	cmp	r3, #32
 800693c:	d107      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800693e:	f107 0308 	add.w	r3, r7, #8
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fda6 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
 800694c:	e031      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800694e:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2b30      	cmp	r3, #48	@ 0x30
 800695e:	d109      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006960:	4b22      	ldr	r3, [pc, #136]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	08db      	lsrs	r3, r3, #3
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	4a21      	ldr	r2, [pc, #132]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
 8006972:	e01e      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006974:	4b1d      	ldr	r3, [pc, #116]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006988:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800698a:	637b      	str	r3, [r7, #52]	@ 0x34
 800698c:	e011      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800698e:	4b17      	ldr	r3, [pc, #92]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d106      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	2b50      	cmp	r3, #80	@ 0x50
 80069a0:	d103      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ae:	f001 ba28 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069b2:	f001 ba26 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80069b6:	4b0d      	ldr	r3, [pc, #52]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80069c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80069c8:	f7fc faec 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 80069cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ce:	f001 ba18 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069d8:	d10e      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fbec 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e8:	f001 ba0b 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069ec:	44020c00 	.word	0x44020c00
 80069f0:	03d09000 	.word	0x03d09000
 80069f4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069fe:	d108      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a00:	f107 0308 	add.w	r3, r7, #8
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fd45 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	f001 b9f8 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006a12:	4ba4      	ldr	r3, [pc, #656]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d10d      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a24:	d109      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a26:	4b9f      	ldr	r3, [pc, #636]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	08db      	lsrs	r3, r3, #3
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	4a9d      	ldr	r2, [pc, #628]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a38:	e020      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006a3a:	4b9a      	ldr	r3, [pc, #616]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006a50:	4b96      	ldr	r3, [pc, #600]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a54:	e012      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006a56:	4b93      	ldr	r3, [pc, #588]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d107      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a6a:	d103      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a78:	f001 b9c3 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a7c:	f001 b9c1 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006a80:	4b88      	ldr	r3, [pc, #544]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006a92:	f7fc fa3f 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8006a96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006a98:	f001 b9b3 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d104      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fc f90b 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8006aa6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006aa8:	f001 b9ab 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d108      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fb80 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ac0:	f001 b99f 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006ac4:	4b77      	ldr	r3, [pc, #476]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad0:	d105      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d102      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006ad8:	4b75      	ldr	r3, [pc, #468]	@ (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	e023      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006ade:	4b71      	ldr	r3, [pc, #452]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d109      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006af0:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	4a6b      	ldr	r2, [pc, #428]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b02:	e010      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006b04:	4b67      	ldr	r3, [pc, #412]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b10:	d105      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006b18:	4b64      	ldr	r3, [pc, #400]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b22:	f001 b96e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b26:	f001 b96c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006b36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d106      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b50:	e012      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006b52:	4b54      	ldr	r3, [pc, #336]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b60:	d106      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d103      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006b68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	e003      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006b74:	f001 b945 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b78:	f001 b943 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b7c:	4b49      	ldr	r3, [pc, #292]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d104      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b8e:	f7fc f9dd 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006b92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b94:	f001 b935 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9e:	d108      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fc75 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bae:	f001 b928 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d10d      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc4:	d109      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bc6:	4b37      	ldr	r3, [pc, #220]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a35      	ldr	r2, [pc, #212]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd8:	e011      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006bda:	4b32      	ldr	r3, [pc, #200]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf4:	e003      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bfa:	f001 b902 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bfe:	f001 b900 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c02:	4b28      	ldr	r3, [pc, #160]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c08:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c14:	f7fc f99a 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006c18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c1a:	f001 b8f2 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c24:	d108      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc32 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c34:	f001 b8e5 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006c38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c4a:	d109      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c4c:	4b15      	ldr	r3, [pc, #84]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	08db      	lsrs	r3, r3, #3
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	4a14      	ldr	r2, [pc, #80]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5e:	e011      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006c60:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c74:	d102      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c80:	f001 b8bf 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c84:	f001 b8bd 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c9a:	f7fc f983 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 8006c9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ca0:	f001 b8af 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ca4:	44020c00 	.word	0x44020c00
 8006ca8:	03d09000 	.word	0x03d09000
 8006cac:	003d0900 	.word	0x003d0900
 8006cb0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cba:	d108      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cbc:	f107 0308 	add.w	r3, r7, #8
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fbe7 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cca:	f001 b89a 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006cce:	4b9f      	ldr	r3, [pc, #636]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d10d      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ce2:	4b9a      	ldr	r3, [pc, #616]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	4a98      	ldr	r2, [pc, #608]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006cee:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf4:	e011      	b.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006cf6:	4b95      	ldr	r3, [pc, #596]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d02:	d106      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d0a:	d102      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006d0c:	4b91      	ldr	r3, [pc, #580]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d10:	e003      	b.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d16:	f001 b874 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d1a:	f001 b872 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006d28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d30:	f7fc f938 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 8006d34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d36:	f001 b864 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d40:	d108      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fba4 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d50:	f001 b857 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006d54:	4b7d      	ldr	r3, [pc, #500]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d10d      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d66:	d109      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d68:	4b78      	ldr	r3, [pc, #480]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	4a77      	ldr	r2, [pc, #476]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7a:	e011      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006d7c:	4b73      	ldr	r3, [pc, #460]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d88:	d106      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d90:	d102      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006d92:	4b70      	ldr	r3, [pc, #448]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9c:	f001 b831 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006da0:	f001 b82f 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006da4:	4b69      	ldr	r3, [pc, #420]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006da6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006daa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006db6:	f7fc f8c9 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006dba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dbc:	f001 b821 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dc6:	d108      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc8:	f107 0308 	add.w	r3, r7, #8
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fb61 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd6:	f001 b814 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006dda:	4b5c      	ldr	r3, [pc, #368]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d10e      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dec:	d10a      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dee:	4b57      	ldr	r3, [pc, #348]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	4a55      	ldr	r2, [pc, #340]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e00:	f000 bfff 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e08:	f000 bffb 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e16:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e1e:	d056      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e26:	f200 808b 	bhi.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e30:	d03e      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e38:	f200 8082 	bhi.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e42:	d027      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e4a:	d879      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e52:	d017      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5a:	d871      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e68:	d004      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006e6a:	e069      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006e6c:	f7fc f89a 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 8006e70:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006e72:	e068      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe f99f 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e82:	e060      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e84:	f107 0308 	add.w	r3, r7, #8
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe fb03 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e92:	e058      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e94:	4b2d      	ldr	r3, [pc, #180]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d103      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ea8:	e04d      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006eae:	e04a      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006eb0:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebe:	d103      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006ec0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ec6:	e03e      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ecc:	e03b      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ece:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ed4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eda:	4b1c      	ldr	r3, [pc, #112]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eec:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	08db      	lsrs	r3, r3, #3
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	4a16      	ldr	r2, [pc, #88]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	e01e      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f00:	4b12      	ldr	r3, [pc, #72]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f14:	d102      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f16:	4b0f      	ldr	r3, [pc, #60]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1a:	e010      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f28:	d106      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d102      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f32:	4b09      	ldr	r3, [pc, #36]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f36:	e002      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006f3c:	e003      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006f3e:	e002      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f44:	bf00      	nop
          }
        }
        break;
 8006f46:	f000 bf5c 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f4a:	bf00      	nop
 8006f4c:	44020c00 	.word	0x44020c00
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	003d0900 	.word	0x003d0900
 8006f58:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f5c:	4b9e      	ldr	r3, [pc, #632]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f62:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006f66:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f6e:	d056      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f76:	f200 808b 	bhi.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f80:	d03e      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f88:	f200 8082 	bhi.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f92:	d027      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f9a:	d879      	bhi.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa2:	d017      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006faa:	d871      	bhi.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb8:	d004      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006fba:	e069      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006fbc:	f7fb ffc6 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8006fc0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006fc2:	e068      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe f8f7 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fd2:	e060      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fa5b 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fe2:	e058      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d103      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ff8:	e04d      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ffe:	e04a      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007000:	4b75      	ldr	r3, [pc, #468]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800700a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700e:	d103      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007010:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007014:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007016:	e03e      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800701c:	e03b      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800701e:	4b6e      	ldr	r3, [pc, #440]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007024:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007028:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800702a:	4b6b      	ldr	r3, [pc, #428]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d10c      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800703c:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	08db      	lsrs	r3, r3, #3
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	4a65      	ldr	r2, [pc, #404]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	e01e      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007050:	4b61      	ldr	r3, [pc, #388]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d106      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007066:	4b5e      	ldr	r3, [pc, #376]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
 800706a:	e010      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800706c:	4b5a      	ldr	r3, [pc, #360]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007080:	d102      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007082:	4b58      	ldr	r3, [pc, #352]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007084:	637b      	str	r3, [r7, #52]	@ 0x34
 8007086:	e002      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800708c:	e003      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007094:	bf00      	nop
          }
        }
        break;
 8007096:	f000 beb4 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800709a:	4b4f      	ldr	r3, [pc, #316]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800709c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80070a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80070a4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070ac:	d056      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070b4:	f200 808b 	bhi.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070be:	d03e      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070c6:	f200 8082 	bhi.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070d0:	d027      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070d8:	d879      	bhi.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070e0:	d017      	beq.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070e8:	d871      	bhi.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f6:	d004      	beq.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80070f8:	e069      	b.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070fa:	f7fb ff53 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 80070fe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007100:	e068      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe f858 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007110:	e060      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe f9bc 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007120:	e058      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007122:	4b2d      	ldr	r3, [pc, #180]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d103      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007136:	e04d      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800713c:	e04a      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800713e:	4b26      	ldr	r3, [pc, #152]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800714c:	d103      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800714e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007154:	e03e      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800715a:	e03b      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800715c:	4b1e      	ldr	r3, [pc, #120]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800715e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007162:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007166:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007168:	4b1b      	ldr	r3, [pc, #108]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b02      	cmp	r3, #2
 8007172:	d10c      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800717a:	4b17      	ldr	r3, [pc, #92]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	4a15      	ldr	r2, [pc, #84]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	e01e      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800718e:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800719a:	d106      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a2:	d102      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071a4:	4b0e      	ldr	r3, [pc, #56]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a8:	e010      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071aa:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071b6:	d106      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071be:	d102      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071c0:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071d2:	bf00      	nop
          }
        }
        break;
 80071d4:	f000 be15 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071d8:	44020c00 	.word	0x44020c00
 80071dc:	03d09000 	.word	0x03d09000
 80071e0:	003d0900 	.word	0x003d0900
 80071e4:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80071e8:	4b9e      	ldr	r3, [pc, #632]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80071ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071ee:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80071f2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80071fa:	d056      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007202:	f200 808b 	bhi.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800720c:	d03e      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007214:	f200 8082 	bhi.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800721e:	d027      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007226:	d879      	bhi.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800722e:	d017      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007236:	d871      	bhi.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007244:	d004      	beq.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007246:	e069      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007248:	f7fb feac 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 800724c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800724e:	e068      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd ffb1 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800725e:	e060      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe f915 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800726e:	e058      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007270:	4b7c      	ldr	r3, [pc, #496]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d103      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007282:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007284:	e04d      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800728a:	e04a      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800728c:	4b75      	ldr	r3, [pc, #468]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800728e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729a:	d103      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800729c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072a2:	e03e      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072a8:	e03b      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072aa:	4b6e      	ldr	r3, [pc, #440]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072b6:	4b6b      	ldr	r3, [pc, #428]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d10c      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072c8:	4b66      	ldr	r3, [pc, #408]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	08db      	lsrs	r3, r3, #3
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	4a65      	ldr	r2, [pc, #404]	@ (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072da:	e01e      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072dc:	4b61      	ldr	r3, [pc, #388]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e8:	d106      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f0:	d102      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072f2:	4b5e      	ldr	r3, [pc, #376]	@ (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e010      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007304:	d106      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800730c:	d102      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800730e:	4b58      	ldr	r3, [pc, #352]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
 8007312:	e002      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007318:	e003      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007320:	bf00      	nop
          }
        }
        break;
 8007322:	f000 bd6e 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007326:	4b4f      	ldr	r3, [pc, #316]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007328:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800732c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007330:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007338:	d056      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007340:	f200 808b 	bhi.w	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800734a:	d03e      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007352:	f200 8082 	bhi.w	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800735c:	d027      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007364:	d879      	bhi.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800736c:	d017      	beq.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007374:	d871      	bhi.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007382:	d004      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007384:	e069      	b.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007386:	f7fb fe0d 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 800738a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800738c:	e068      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd ff12 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800739c:	e060      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800739e:	f107 0308 	add.w	r3, r7, #8
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe f876 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ac:	e058      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d103      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80073bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073c2:	e04d      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073c8:	e04a      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073ca:	4b26      	ldr	r3, [pc, #152]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073d8:	d103      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80073da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073e0:	e03e      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073e6:	e03b      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d10c      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007406:	4b17      	ldr	r3, [pc, #92]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	08db      	lsrs	r3, r3, #3
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	4a15      	ldr	r2, [pc, #84]	@ (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007412:	fa22 f303 	lsr.w	r3, r2, r3
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
 8007418:	e01e      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007426:	d106      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742e:	d102      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007430:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
 8007434:	e010      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007442:	d106      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800744c:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007450:	e002      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007458:	e002      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800745e:	bf00      	nop
          }
        }
        break;
 8007460:	f000 bccf 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007464:	44020c00 	.word	0x44020c00
 8007468:	03d09000 	.word	0x03d09000
 800746c:	003d0900 	.word	0x003d0900
 8007470:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007474:	4b9e      	ldr	r3, [pc, #632]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800747a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800747e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007486:	d056      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800748e:	f200 808b 	bhi.w	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007498:	d03e      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a0:	f200 8082 	bhi.w	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074aa:	d027      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074b2:	d879      	bhi.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ba:	d017      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c2:	d871      	bhi.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074d0:	d004      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80074d2:	e069      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80074d4:	f7fb fd66 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 80074d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80074da:	e068      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fe6b 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074ea:	e060      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd ffcf 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074fa:	e058      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074fc:	4b7c      	ldr	r3, [pc, #496]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d103      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800750a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007510:	e04d      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007516:	e04a      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007518:	4b75      	ldr	r3, [pc, #468]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800751a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800751e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007526:	d103      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8007528:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800752e:	e03e      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007534:	e03b      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007536:	4b6e      	ldr	r3, [pc, #440]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800753c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007542:	4b6b      	ldr	r3, [pc, #428]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d10c      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007554:	4b66      	ldr	r3, [pc, #408]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	4a65      	ldr	r2, [pc, #404]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
 8007564:	637b      	str	r3, [r7, #52]	@ 0x34
 8007566:	e01e      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007568:	4b61      	ldr	r3, [pc, #388]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007574:	d106      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757c:	d102      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800757e:	4b5e      	ldr	r3, [pc, #376]	@ (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
 8007582:	e010      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007584:	4b5a      	ldr	r3, [pc, #360]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007590:	d106      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007598:	d102      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800759a:	4b58      	ldr	r3, [pc, #352]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
 800759e:	e002      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80075a4:	e003      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80075a6:	e002      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075ac:	bf00      	nop
          }
        }
        break;
 80075ae:	f000 bc28 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80075b2:	4b4f      	ldr	r3, [pc, #316]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80075be:	4b4c      	ldr	r3, [pc, #304]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ca:	d106      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80075d2:	4b4a      	ldr	r3, [pc, #296]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80075d6:	f000 bc14 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075e0:	d108      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e2:	f107 0320 	add.w	r3, r7, #32
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd fc7c 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f0:	f000 bc07 	b.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fa:	d107      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd fddb 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800760a:	e3fa      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007610:	e3f7      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007612:	4b37      	ldr	r3, [pc, #220]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	2b04      	cmp	r3, #4
 8007622:	d861      	bhi.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007641 	.word	0x08007641
 8007630:	08007651 	.word	0x08007651
 8007634:	08007661 	.word	0x08007661
 8007638:	08007671 	.word	0x08007671
 800763c:	08007677 	.word	0x08007677
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007640:	f107 0320 	add.w	r3, r7, #32
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fc4d 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800764e:	e04e      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	4618      	mov	r0, r3
 8007656:	f7fd fdb1 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800765e:	e046      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd ff15 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800766e:	e03e      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007670:	4b23      	ldr	r3, [pc, #140]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007674:	e03b      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007676:	4b1e      	ldr	r3, [pc, #120]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800767c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007682:	4b1b      	ldr	r3, [pc, #108]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007694:	4b16      	ldr	r3, [pc, #88]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a6:	e01e      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076a8:	4b11      	ldr	r3, [pc, #68]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b4:	d106      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80076b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076bc:	d102      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076be:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c2:	e010      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c4:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80076d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d8:	d102      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076da:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076de:	e002      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076e4:	e003      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076ec:	bf00      	nop
          }
        }
        break;
 80076ee:	e388      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076f0:	44020c00 	.word	0x44020c00
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	003d0900 	.word	0x003d0900
 80076fc:	007a1200 	.word	0x007a1200
 8007700:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007704:	4ba9      	ldr	r3, [pc, #676]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800770a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	2b20      	cmp	r3, #32
 8007714:	f200 809a 	bhi.w	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8007718:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	080077a5 	.word	0x080077a5
 8007724:	0800784d 	.word	0x0800784d
 8007728:	0800784d 	.word	0x0800784d
 800772c:	0800784d 	.word	0x0800784d
 8007730:	0800784d 	.word	0x0800784d
 8007734:	0800784d 	.word	0x0800784d
 8007738:	0800784d 	.word	0x0800784d
 800773c:	0800784d 	.word	0x0800784d
 8007740:	080077b5 	.word	0x080077b5
 8007744:	0800784d 	.word	0x0800784d
 8007748:	0800784d 	.word	0x0800784d
 800774c:	0800784d 	.word	0x0800784d
 8007750:	0800784d 	.word	0x0800784d
 8007754:	0800784d 	.word	0x0800784d
 8007758:	0800784d 	.word	0x0800784d
 800775c:	0800784d 	.word	0x0800784d
 8007760:	080077c5 	.word	0x080077c5
 8007764:	0800784d 	.word	0x0800784d
 8007768:	0800784d 	.word	0x0800784d
 800776c:	0800784d 	.word	0x0800784d
 8007770:	0800784d 	.word	0x0800784d
 8007774:	0800784d 	.word	0x0800784d
 8007778:	0800784d 	.word	0x0800784d
 800777c:	0800784d 	.word	0x0800784d
 8007780:	080077d5 	.word	0x080077d5
 8007784:	0800784d 	.word	0x0800784d
 8007788:	0800784d 	.word	0x0800784d
 800778c:	0800784d 	.word	0x0800784d
 8007790:	0800784d 	.word	0x0800784d
 8007794:	0800784d 	.word	0x0800784d
 8007798:	0800784d 	.word	0x0800784d
 800779c:	0800784d 	.word	0x0800784d
 80077a0:	080077db 	.word	0x080077db
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077a4:	f107 0320 	add.w	r3, r7, #32
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fd fb9b 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077b2:	e04e      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b4:	f107 0314 	add.w	r3, r7, #20
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd fcff 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077c2:	e046      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fd fe63 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077d2:	e03e      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80077d4:	4b76      	ldr	r3, [pc, #472]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077d8:	e03b      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077da:	4b74      	ldr	r3, [pc, #464]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80077e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077e6:	4b71      	ldr	r3, [pc, #452]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d10c      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f8:	4b6c      	ldr	r3, [pc, #432]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	4a6c      	ldr	r2, [pc, #432]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
 800780a:	e01e      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800780c:	4b67      	ldr	r3, [pc, #412]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007818:	d106      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800781a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007822:	4b65      	ldr	r3, [pc, #404]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	e010      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007828:	4b60      	ldr	r3, [pc, #384]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007834:	d106      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800783e:	4b5f      	ldr	r3, [pc, #380]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
 8007842:	e002      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007848:	e003      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800784a:	e002      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007850:	bf00      	nop
          }
        }
        break;
 8007852:	e2d6      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007854:	4b55      	ldr	r3, [pc, #340]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800785a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800785e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007866:	d031      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786e:	d866      	bhi.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	2bc0      	cmp	r3, #192	@ 0xc0
 8007874:	d027      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	2bc0      	cmp	r3, #192	@ 0xc0
 800787a:	d860      	bhi.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2b80      	cmp	r3, #128	@ 0x80
 8007880:	d019      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2b80      	cmp	r3, #128	@ 0x80
 8007886:	d85a      	bhi.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	2b40      	cmp	r3, #64	@ 0x40
 8007892:	d008      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007894:	e053      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007896:	f107 0320 	add.w	r3, r7, #32
 800789a:	4618      	mov	r0, r3
 800789c:	f7fd fb22 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078a4:	e04e      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fd fc86 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078b4:	e046      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b6:	f107 0308 	add.w	r3, r7, #8
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd fdea 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078c4:	e03e      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078c6:	4b3a      	ldr	r3, [pc, #232]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078ca:	e03b      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078cc:	4b37      	ldr	r3, [pc, #220]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078d8:	4b34      	ldr	r3, [pc, #208]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d10c      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078ea:	4b30      	ldr	r3, [pc, #192]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	4a2f      	ldr	r2, [pc, #188]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80078f6:	fa22 f303 	lsr.w	r3, r2, r3
 80078fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fc:	e01e      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078fe:	4b2b      	ldr	r3, [pc, #172]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790a:	d106      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007912:	d102      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007914:	4b28      	ldr	r3, [pc, #160]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	e010      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800791a:	4b24      	ldr	r3, [pc, #144]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007926:	d106      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800792e:	d102      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007930:	4b22      	ldr	r3, [pc, #136]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
 8007934:	e002      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800793c:	e002      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007942:	bf00      	nop
          }
        }
        break;
 8007944:	e25d      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007946:	4b19      	ldr	r3, [pc, #100]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800794c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007950:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007958:	f7fb fb0e 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 800795c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800795e:	e250      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007960:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800796c:	d10b      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007974:	d107      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd fc1e 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
 8007984:	e04f      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007986:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007992:	d115      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800799a:	d111      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799c:	f107 0308 	add.w	r3, r7, #8
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fd fd77 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	e03c      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80079ac:	44020c00 	.word	0x44020c00
 80079b0:	00bb8000 	.word	0x00bb8000
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	003d0900 	.word	0x003d0900
 80079bc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80079c0:	4b94      	ldr	r3, [pc, #592]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d10d      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079d2:	d109      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	08db      	lsrs	r3, r3, #3
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	4a8e      	ldr	r2, [pc, #568]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80079e0:	fa22 f303 	lsr.w	r3, r2, r3
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e6:	e01e      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80079e8:	4b8a      	ldr	r3, [pc, #552]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f4:	d106      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079fc:	d102      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80079fe:	4b87      	ldr	r3, [pc, #540]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a02:	e010      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007a04:	4b83      	ldr	r3, [pc, #524]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007a18:	d102      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007a1a:	4b81      	ldr	r3, [pc, #516]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1e:	e002      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a24:	e1ed      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a26:	e1ec      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007a28:	4b7a      	ldr	r3, [pc, #488]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a2e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007a3a:	f7fb fab3 	bl	8002fa4 <HAL_RCC_GetPCLK3Freq>
 8007a3e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007a40:	e1df      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007a42:	4b74      	ldr	r3, [pc, #464]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a4e:	d10b      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fd fbad 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	e045      	b.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007a68:	4b6a      	ldr	r3, [pc, #424]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a74:	d10b      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fd06 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8c:	e032      	b.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007a8e:	4b61      	ldr	r3, [pc, #388]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d10d      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	08db      	lsrs	r3, r3, #3
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	4a5a      	ldr	r2, [pc, #360]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007aae:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab4:	e01e      	b.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007ab6:	4b57      	ldr	r3, [pc, #348]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aca:	d102      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007acc:	4b53      	ldr	r3, [pc, #332]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad0:	e010      	b.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007ad2:	4b50      	ldr	r3, [pc, #320]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ade:	d106      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ae6:	d102      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aec:	e002      	b.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007af2:	e186      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007af4:	e185      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007af6:	4b47      	ldr	r3, [pc, #284]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007afc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007b00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fb fa36 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b0e:	e178      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007b10:	4b40      	ldr	r3, [pc, #256]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b1c:	d10b      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b24:	d107      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd fb46 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b34:	e045      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007b36:	4b37      	ldr	r3, [pc, #220]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b42:	d10b      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b4a:	d107      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fd fc9f 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5a:	e032      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d10d      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007b6e:	d109      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b70:	4b28      	ldr	r3, [pc, #160]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	4a27      	ldr	r2, [pc, #156]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	e01e      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007b84:	4b23      	ldr	r3, [pc, #140]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b90:	d106      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b98:	d102      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007b9a:	4b20      	ldr	r3, [pc, #128]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b9e:	e010      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bac:	d106      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007bb4:	d102      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bba:	e002      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc0:	e11f      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bc2:	e11e      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007bc4:	4b13      	ldr	r3, [pc, #76]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d85f      	bhi.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007bf5 	.word	0x08007bf5
 8007be4:	08007c05 	.word	0x08007c05
 8007be8:	08007c25 	.word	0x08007c25
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007bec:	f7fb f992 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8007bf0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007bf2:	e053      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bf4:	f107 0320 	add.w	r3, r7, #32
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd f973 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c02:	e04b      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd fad7 	bl	80051bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c12:	e043      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007c14:	44020c00 	.word	0x44020c00
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	003d0900 	.word	0x003d0900
 8007c20:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c24:	4b79      	ldr	r3, [pc, #484]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c2a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c30:	4b76      	ldr	r3, [pc, #472]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d10c      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c42:	4b72      	ldr	r3, [pc, #456]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	08db      	lsrs	r3, r3, #3
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	4a70      	ldr	r2, [pc, #448]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c54:	e01e      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c56:	4b6d      	ldr	r3, [pc, #436]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c62:	d106      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c6c:	4b69      	ldr	r3, [pc, #420]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c70:	e010      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c72:	4b66      	ldr	r3, [pc, #408]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c88:	4b63      	ldr	r3, [pc, #396]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8c:	e002      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c92:	e003      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c9a:	bf00      	nop
          }
        }
        break;
 8007c9c:	e0b1      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ca4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ca8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007caa:	4b58      	ldr	r3, [pc, #352]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d106      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc4:	e01f      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007cc6:	4b51      	ldr	r3, [pc, #324]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cd4:	d106      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2b40      	cmp	r3, #64	@ 0x40
 8007cda:	d103      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007cdc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce2:	e010      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007ce4:	4b49      	ldr	r3, [pc, #292]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf0:	d106      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	2b80      	cmp	r3, #128	@ 0x80
 8007cf6:	d103      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007cf8:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfe:	e002      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007d04:	e07d      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d06:	e07c      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007d08:	4b40      	ldr	r3, [pc, #256]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007d14:	4b3d      	ldr	r3, [pc, #244]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d20:	d105      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007d28:	4b3c      	ldr	r3, [pc, #240]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2c:	e031      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007d2e:	4b37      	ldr	r3, [pc, #220]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d3a:	d10a      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d107      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d42:	f107 0320 	add.w	r3, r7, #32
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd f8cc 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d50:	e01f      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007d52:	4b2e      	ldr	r3, [pc, #184]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d103      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6c:	e011      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007d6e:	4b27      	ldr	r3, [pc, #156]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	2b30      	cmp	r3, #48	@ 0x30
 8007d82:	d103      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007d84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007d90:	e037      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d92:	e036      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da6:	f107 0320 	add.w	r3, r7, #32
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fd f89a 	bl	8004ee4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007db4:	e025      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007db6:	4b15      	ldr	r3, [pc, #84]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc2:	d10a      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d107      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dca:	f107 0308 	add.w	r3, r7, #8
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd fb60 	bl	8005494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	e00f      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007dda:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de6:	d105      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	2b30      	cmp	r3, #48	@ 0x30
 8007dec:	d102      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007dee:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df2:	e002      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007df8:	e003      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dfa:	e002      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e00:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8007e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	373c      	adds	r7, #60	@ 0x3c
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd90      	pop	{r4, r7, pc}
 8007e0c:	44020c00 	.word	0x44020c00
 8007e10:	03d09000 	.word	0x03d09000
 8007e14:	003d0900 	.word	0x003d0900
 8007e18:	007a1200 	.word	0x007a1200
 8007e1c:	02dc6c00 	.word	0x02dc6c00

08007e20 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007e28:	4b48      	ldr	r3, [pc, #288]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a47      	ldr	r2, [pc, #284]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007e2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e34:	f7f9 fd4c 	bl	80018d0 <HAL_GetTick>
 8007e38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e3a:	e008      	b.n	8007e4e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e3c:	f7f9 fd48 	bl	80018d0 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e07a      	b.n	8007f44 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6811      	ldr	r1, [r2, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6852      	ldr	r2, [r2, #4]
 8007e6e:	0212      	lsls	r2, r2, #8
 8007e70:	430a      	orrs	r2, r1
 8007e72:	4936      	ldr	r1, [pc, #216]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	025b      	lsls	r3, r3, #9
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ea8:	4928      	ldr	r1, [pc, #160]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007eae:	4b27      	ldr	r3, [pc, #156]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	f023 020c 	bic.w	r2, r3, #12
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	4924      	ldr	r1, [pc, #144]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007ec0:	4b22      	ldr	r3, [pc, #136]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec4:	f023 0220 	bic.w	r2, r3, #32
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	491f      	ldr	r1, [pc, #124]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	491c      	ldr	r1, [pc, #112]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	4a19      	ldr	r2, [pc, #100]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007ee6:	f023 0310 	bic.w	r3, r3, #16
 8007eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007eec:	4b17      	ldr	r3, [pc, #92]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ef4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6a12      	ldr	r2, [r2, #32]
 8007efc:	00d2      	lsls	r2, r2, #3
 8007efe:	4913      	ldr	r1, [pc, #76]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007f04:	4b11      	ldr	r3, [pc, #68]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	4a10      	ldr	r2, [pc, #64]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f0a:	f043 0310 	orr.w	r3, r3, #16
 8007f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007f10:	4b0e      	ldr	r3, [pc, #56]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a0d      	ldr	r2, [pc, #52]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f1a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f1c:	f7f9 fcd8 	bl	80018d0 <HAL_GetTick>
 8007f20:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f22:	e008      	b.n	8007f36 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f24:	f7f9 fcd4 	bl	80018d0 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e006      	b.n	8007f44 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f36:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <RCCEx_PLL2_Config+0x12c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0

}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	44020c00 	.word	0x44020c00

08007f50 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007f58:	4b48      	ldr	r3, [pc, #288]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a47      	ldr	r2, [pc, #284]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f64:	f7f9 fcb4 	bl	80018d0 <HAL_GetTick>
 8007f68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f6a:	e008      	b.n	8007f7e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f6c:	f7f9 fcb0 	bl	80018d0 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e07a      	b.n	8008074 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f0      	bne.n	8007f6c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6811      	ldr	r1, [r2, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6852      	ldr	r2, [r2, #4]
 8007f9e:	0212      	lsls	r2, r2, #8
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	4936      	ldr	r1, [pc, #216]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	630b      	str	r3, [r1, #48]	@ 0x30
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	025b      	lsls	r3, r3, #9
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fd8:	4928      	ldr	r1, [pc, #160]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fde:	4b27      	ldr	r3, [pc, #156]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f023 020c 	bic.w	r2, r3, #12
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	4924      	ldr	r1, [pc, #144]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007ff0:	4b22      	ldr	r3, [pc, #136]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff4:	f023 0220 	bic.w	r2, r3, #32
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	491f      	ldr	r1, [pc, #124]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008002:	4b1e      	ldr	r3, [pc, #120]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800a:	491c      	ldr	r1, [pc, #112]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008010:	4b1a      	ldr	r3, [pc, #104]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	4a19      	ldr	r2, [pc, #100]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800801c:	4b17      	ldr	r3, [pc, #92]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 800801e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008020:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008024:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6a12      	ldr	r2, [r2, #32]
 800802c:	00d2      	lsls	r2, r2, #3
 800802e:	4913      	ldr	r1, [pc, #76]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008030:	4313      	orrs	r3, r2
 8008032:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008034:	4b11      	ldr	r3, [pc, #68]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	4a10      	ldr	r2, [pc, #64]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 800803a:	f043 0310 	orr.w	r3, r3, #16
 800803e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008040:	4b0e      	ldr	r3, [pc, #56]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a0d      	ldr	r2, [pc, #52]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800804a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800804c:	f7f9 fc40 	bl	80018d0 <HAL_GetTick>
 8008050:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008052:	e008      	b.n	8008066 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008054:	f7f9 fc3c 	bl	80018d0 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e006      	b.n	8008074 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008066:	4b05      	ldr	r3, [pc, #20]	@ (800807c <RCCEx_PLL3_Config+0x12c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	44020c00 	.word	0x44020c00

08008080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e042      	b.n	8008118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f8 ffa1 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2224      	movs	r2, #36	@ 0x24
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fdc2 	bl	8008c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fbd1 	bl	8008878 <UART_SetConfig>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e01b      	b.n	8008118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fe41 	bl	8008d98 <UART_CheckIdleState>
 8008116:	4603      	mov	r3, r0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	@ 0x28
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008136:	2b20      	cmp	r3, #32
 8008138:	f040 808b 	bne.w	8008252 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UART_Transmit+0x28>
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e083      	b.n	8008254 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008156:	2b80      	cmp	r3, #128	@ 0x80
 8008158:	d107      	bne.n	800816a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008168:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2221      	movs	r2, #33	@ 0x21
 8008176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800817a:	f7f9 fba9 	bl	80018d0 <HAL_GetTick>
 800817e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008198:	d108      	bne.n	80081ac <HAL_UART_Transmit+0x8c>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e003      	b.n	80081b4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081b4:	e030      	b.n	8008218 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2200      	movs	r2, #0
 80081be:	2180      	movs	r1, #128	@ 0x80
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fe93 	bl	8008eec <UART_WaitOnFlagUntilTimeout>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e03d      	b.n	8008254 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	3302      	adds	r3, #2
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e007      	b.n	8008206 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1c8      	bne.n	80081b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2200      	movs	r2, #0
 800822c:	2140      	movs	r1, #64	@ 0x40
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 fe5c 	bl	8008eec <UART_WaitOnFlagUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e006      	b.n	8008254 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b0ae      	sub	sp, #184	@ 0xb8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008286:	f640 030f 	movw	r3, #2063	@ 0x80f
 800828a:	4013      	ands	r3, r2
 800828c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11b      	bne.n	80082d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d015      	beq.n	80082d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d105      	bne.n	80082bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 82ac 	beq.w	800881e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
      }
      return;
 80082ce:	e2a6      	b.n	800881e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80fd 	beq.w	80084d4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082de:	4b7a      	ldr	r3, [pc, #488]	@ (80084c8 <HAL_UART_IRQHandler+0x26c>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082ea:	4b78      	ldr	r3, [pc, #480]	@ (80084cc <HAL_UART_IRQHandler+0x270>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 80f0 	beq.w	80084d4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <HAL_UART_IRQHandler+0xc8>
 8008300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2201      	movs	r2, #1
 8008312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831a:	f043 0201 	orr.w	r2, r3, #1
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d011      	beq.n	8008354 <HAL_UART_IRQHandler+0xf8>
 8008330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2202      	movs	r2, #2
 8008342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800834a:	f043 0204 	orr.w	r2, r3, #4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d011      	beq.n	8008384 <HAL_UART_IRQHandler+0x128>
 8008360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2204      	movs	r2, #4
 8008372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f043 0202 	orr.w	r2, r3, #2
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d017      	beq.n	80083c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800839c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083a0:	4b49      	ldr	r3, [pc, #292]	@ (80084c8 <HAL_UART_IRQHandler+0x26c>)
 80083a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2208      	movs	r2, #8
 80083ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b6:	f043 0208 	orr.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d012      	beq.n	80083f2 <HAL_UART_IRQHandler+0x196>
 80083cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80083d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e8:	f043 0220 	orr.w	r2, r3, #32
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8212 	beq.w	8008822 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d013      	beq.n	8008432 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800840a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800841a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008446:	2b40      	cmp	r3, #64	@ 0x40
 8008448:	d005      	beq.n	8008456 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800844a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800844e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008452:	2b00      	cmp	r3, #0
 8008454:	d02e      	beq.n	80084b4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fdb5 	bl	8008fc6 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	d120      	bne.n	80084ac <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	2b00      	cmp	r3, #0
 8008472:	d017      	beq.n	80084a4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847a:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <HAL_UART_IRQHandler+0x274>)
 800847c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008484:	4618      	mov	r0, r3
 8008486:	f7f9 fc5f 	bl	8001d48 <HAL_DMA_Abort_IT>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d019      	beq.n	80084c4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a2:	e00f      	b.n	80084c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9d1 	bl	800884c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084aa:	e00b      	b.n	80084c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f9cd 	bl	800884c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b2:	e007      	b.n	80084c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9c9 	bl	800884c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80084c2:	e1ae      	b.n	8008822 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	bf00      	nop
    return;
 80084c6:	e1ac      	b.n	8008822 <HAL_UART_IRQHandler+0x5c6>
 80084c8:	10000001 	.word	0x10000001
 80084cc:	04000120 	.word	0x04000120
 80084d0:	08009093 	.word	0x08009093

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	f040 8142 	bne.w	8008762 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 813b 	beq.w	8008762 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8134 	beq.w	8008762 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2210      	movs	r2, #16
 8008500:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	f040 80aa 	bne.w	8008666 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008520:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8084 	beq.w	8008632 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008530:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008534:	429a      	cmp	r2, r3
 8008536:	d27c      	bcs.n	8008632 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800853e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854a:	2b81      	cmp	r3, #129	@ 0x81
 800854c:	d060      	beq.n	8008610 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800855c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800855e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008574:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008578:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e2      	bne.n	800854e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800859a:	f023 0301 	bic.w	r3, r3, #1
 800859e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80085ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e3      	bne.n	8008588 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e4      	bne.n	80085ce <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860a:	4618      	mov	r0, r3
 800860c:	f7f9 fb20 	bl	8001c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008622:	b29b      	uxth	r3, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f918 	bl	8008860 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008630:	e0f9      	b.n	8008826 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008638:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800863c:	429a      	cmp	r2, r3
 800863e:	f040 80f2 	bne.w	8008826 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800864a:	2b81      	cmp	r3, #129	@ 0x81
 800864c:	f040 80eb 	bne.w	8008826 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f8fe 	bl	8008860 <HAL_UARTEx_RxEventCallback>
      return;
 8008664:	e0df      	b.n	8008826 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008672:	b29b      	uxth	r3, r3
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80d1 	beq.w	800882a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8008688:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80cc 	beq.w	800882a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e4      	bne.n	8008692 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3308      	adds	r3, #8
 80086ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	623b      	str	r3, [r7, #32]
   return(result);
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80086f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80086f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e1      	bne.n	80086c8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	60fb      	str	r3, [r7, #12]
   return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 0310 	bic.w	r3, r3, #16
 800872c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	69b9      	ldr	r1, [r7, #24]
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	617b      	str	r3, [r7, #20]
   return(result);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e4      	bne.n	8008718 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008754:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f880 	bl	8008860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008760:	e063      	b.n	800882a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00e      	beq.n	800878c <HAL_UART_IRQHandler+0x530>
 800876e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d008      	beq.n	800878c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fcc1 	bl	800910c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800878a:	e051      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800878c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008794:	2b00      	cmp	r3, #0
 8008796:	d014      	beq.n	80087c2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800879c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d03a      	beq.n	800882e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
    }
    return;
 80087c0:	e035      	b.n	800882e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d009      	beq.n	80087e2 <HAL_UART_IRQHandler+0x586>
 80087ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fc6b 	bl	80090b6 <UART_EndTransmit_IT>
    return;
 80087e0:	e026      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <HAL_UART_IRQHandler+0x5a6>
 80087ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fc9a 	bl	8009134 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008800:	e016      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <HAL_UART_IRQHandler+0x5d4>
 800880e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008812:	2b00      	cmp	r3, #0
 8008814:	da0c      	bge.n	8008830 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc82 	bl	8009120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800881c:	e008      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
      return;
 800881e:	bf00      	nop
 8008820:	e006      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
    return;
 8008822:	bf00      	nop
 8008824:	e004      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
      return;
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <HAL_UART_IRQHandler+0x5d4>
    return;
 800882e:	bf00      	nop
  }
}
 8008830:	37b8      	adds	r7, #184	@ 0xb8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop

08008838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800887c:	b094      	sub	sp, #80	@ 0x50
 800887e:	af00      	add	r7, sp, #0
 8008880:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4b78      	ldr	r3, [pc, #480]	@ (8008a70 <UART_SetConfig+0x1f8>)
 800888e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	431a      	orrs	r2, r3
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	431a      	orrs	r2, r3
 80088a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4971      	ldr	r1, [pc, #452]	@ (8008a74 <UART_SetConfig+0x1fc>)
 80088b0:	4019      	ands	r1, r3
 80088b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c8:	68d9      	ldr	r1, [r3, #12]
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	ea40 0301 	orr.w	r3, r0, r1
 80088d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b64      	ldr	r3, [pc, #400]	@ (8008a70 <UART_SetConfig+0x1f8>)
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d009      	beq.n	80088f8 <UART_SetConfig+0x80>
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	4b63      	ldr	r3, [pc, #396]	@ (8008a78 <UART_SetConfig+0x200>)
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d004      	beq.n	80088f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f4:	4313      	orrs	r3, r2
 80088f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008902:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890c:	430b      	orrs	r3, r1
 800890e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	f023 000f 	bic.w	r0, r3, #15
 800891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800891e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	ea40 0301 	orr.w	r3, r0, r1
 8008926:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b53      	ldr	r3, [pc, #332]	@ (8008a7c <UART_SetConfig+0x204>)
 800892e:	429a      	cmp	r2, r3
 8008930:	d102      	bne.n	8008938 <UART_SetConfig+0xc0>
 8008932:	2301      	movs	r3, #1
 8008934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008936:	e066      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	4b50      	ldr	r3, [pc, #320]	@ (8008a80 <UART_SetConfig+0x208>)
 800893e:	429a      	cmp	r2, r3
 8008940:	d102      	bne.n	8008948 <UART_SetConfig+0xd0>
 8008942:	2302      	movs	r3, #2
 8008944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008946:	e05e      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a84 <UART_SetConfig+0x20c>)
 800894e:	429a      	cmp	r2, r3
 8008950:	d102      	bne.n	8008958 <UART_SetConfig+0xe0>
 8008952:	2304      	movs	r3, #4
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	e056      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4b4a      	ldr	r3, [pc, #296]	@ (8008a88 <UART_SetConfig+0x210>)
 800895e:	429a      	cmp	r2, r3
 8008960:	d102      	bne.n	8008968 <UART_SetConfig+0xf0>
 8008962:	2308      	movs	r3, #8
 8008964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008966:	e04e      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	4b47      	ldr	r3, [pc, #284]	@ (8008a8c <UART_SetConfig+0x214>)
 800896e:	429a      	cmp	r2, r3
 8008970:	d102      	bne.n	8008978 <UART_SetConfig+0x100>
 8008972:	2310      	movs	r3, #16
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008976:	e046      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4b44      	ldr	r3, [pc, #272]	@ (8008a90 <UART_SetConfig+0x218>)
 800897e:	429a      	cmp	r2, r3
 8008980:	d102      	bne.n	8008988 <UART_SetConfig+0x110>
 8008982:	2320      	movs	r3, #32
 8008984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008986:	e03e      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	4b41      	ldr	r3, [pc, #260]	@ (8008a94 <UART_SetConfig+0x21c>)
 800898e:	429a      	cmp	r2, r3
 8008990:	d102      	bne.n	8008998 <UART_SetConfig+0x120>
 8008992:	2340      	movs	r3, #64	@ 0x40
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	e036      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	4b3e      	ldr	r3, [pc, #248]	@ (8008a98 <UART_SetConfig+0x220>)
 800899e:	429a      	cmp	r2, r3
 80089a0:	d102      	bne.n	80089a8 <UART_SetConfig+0x130>
 80089a2:	2380      	movs	r3, #128	@ 0x80
 80089a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089a6:	e02e      	b.n	8008a06 <UART_SetConfig+0x18e>
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b3b      	ldr	r3, [pc, #236]	@ (8008a9c <UART_SetConfig+0x224>)
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d103      	bne.n	80089ba <UART_SetConfig+0x142>
 80089b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089b8:	e025      	b.n	8008a06 <UART_SetConfig+0x18e>
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b38      	ldr	r3, [pc, #224]	@ (8008aa0 <UART_SetConfig+0x228>)
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d103      	bne.n	80089cc <UART_SetConfig+0x154>
 80089c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ca:	e01c      	b.n	8008a06 <UART_SetConfig+0x18e>
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b34      	ldr	r3, [pc, #208]	@ (8008aa4 <UART_SetConfig+0x22c>)
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d103      	bne.n	80089de <UART_SetConfig+0x166>
 80089d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089dc:	e013      	b.n	8008a06 <UART_SetConfig+0x18e>
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <UART_SetConfig+0x230>)
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d103      	bne.n	80089f0 <UART_SetConfig+0x178>
 80089e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ee:	e00a      	b.n	8008a06 <UART_SetConfig+0x18e>
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008a70 <UART_SetConfig+0x1f8>)
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d103      	bne.n	8008a02 <UART_SetConfig+0x18a>
 80089fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a00:	e001      	b.n	8008a06 <UART_SetConfig+0x18e>
 8008a02:	2300      	movs	r3, #0
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b19      	ldr	r3, [pc, #100]	@ (8008a70 <UART_SetConfig+0x1f8>)
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d005      	beq.n	8008a1c <UART_SetConfig+0x1a4>
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b18      	ldr	r3, [pc, #96]	@ (8008a78 <UART_SetConfig+0x200>)
 8008a16:	429a      	cmp	r2, r3
 8008a18:	f040 8094 	bne.w	8008b44 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1e:	2200      	movs	r2, #0
 8008a20:	623b      	str	r3, [r7, #32]
 8008a22:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a28:	f7fc fea0 	bl	800576c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a2c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80f7 	beq.w	8008c24 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008aac <UART_SetConfig+0x234>)
 8008a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d305      	bcc.n	8008a66 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d924      	bls.n	8008ab0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008a6c:	e069      	b.n	8008b42 <UART_SetConfig+0x2ca>
 8008a6e:	bf00      	nop
 8008a70:	44002400 	.word	0x44002400
 8008a74:	cfff69f3 	.word	0xcfff69f3
 8008a78:	54002400 	.word	0x54002400
 8008a7c:	40013800 	.word	0x40013800
 8008a80:	40004400 	.word	0x40004400
 8008a84:	40004800 	.word	0x40004800
 8008a88:	40004c00 	.word	0x40004c00
 8008a8c:	40005000 	.word	0x40005000
 8008a90:	40006400 	.word	0x40006400
 8008a94:	40007800 	.word	0x40007800
 8008a98:	40007c00 	.word	0x40007c00
 8008a9c:	40008000 	.word	0x40008000
 8008aa0:	40006800 	.word	0x40006800
 8008aa4:	40006c00 	.word	0x40006c00
 8008aa8:	40008400 	.word	0x40008400
 8008aac:	0800a600 	.word	0x0800a600
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	61fa      	str	r2, [r7, #28]
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abc:	4a64      	ldr	r2, [pc, #400]	@ (8008c50 <UART_SetConfig+0x3d8>)
 8008abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	617a      	str	r2, [r7, #20]
 8008aca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ace:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ad2:	f7f7 fbe3 	bl	800029c <__aeabi_uldivmod>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	020b      	lsls	r3, r1, #8
 8008ae8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008aec:	0202      	lsls	r2, r0, #8
 8008aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af0:	6849      	ldr	r1, [r1, #4]
 8008af2:	0849      	lsrs	r1, r1, #1
 8008af4:	2000      	movs	r0, #0
 8008af6:	460c      	mov	r4, r1
 8008af8:	4605      	mov	r5, r0
 8008afa:	eb12 0804 	adds.w	r8, r2, r4
 8008afe:	eb43 0905 	adc.w	r9, r3, r5
 8008b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	60bb      	str	r3, [r7, #8]
 8008b0a:	60fa      	str	r2, [r7, #12]
 8008b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b10:	4640      	mov	r0, r8
 8008b12:	4649      	mov	r1, r9
 8008b14:	f7f7 fbc2 	bl	800029c <__aeabi_uldivmod>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b26:	d308      	bcc.n	8008b3a <UART_SetConfig+0x2c2>
 8008b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b2e:	d204      	bcs.n	8008b3a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b36:	60da      	str	r2, [r3, #12]
 8008b38:	e003      	b.n	8008b42 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008b40:	e070      	b.n	8008c24 <UART_SetConfig+0x3ac>
 8008b42:	e06f      	b.n	8008c24 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b4c:	d13c      	bne.n	8008bc8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b50:	2200      	movs	r2, #0
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b5a:	f7fc fe07 	bl	800576c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b5e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d05e      	beq.n	8008c24 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	4a39      	ldr	r2, [pc, #228]	@ (8008c50 <UART_SetConfig+0x3d8>)
 8008b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b78:	005a      	lsls	r2, r3, #1
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	441a      	add	r2, r3
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8e:	2b0f      	cmp	r3, #15
 8008b90:	d916      	bls.n	8008bc0 <UART_SetConfig+0x348>
 8008b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b98:	d212      	bcs.n	8008bc0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f023 030f 	bic.w	r3, r3, #15
 8008ba2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	e031      	b.n	8008c24 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bc6:	e02d      	b.n	8008c24 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bca:	2200      	movs	r2, #0
 8008bcc:	469a      	mov	sl, r3
 8008bce:	4693      	mov	fp, r2
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	4659      	mov	r1, fp
 8008bd4:	f7fc fdca 	bl	800576c <HAL_RCCEx_GetPeriphCLKFreq>
 8008bd8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d021      	beq.n	8008c24 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c50 <UART_SetConfig+0x3d8>)
 8008be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	441a      	add	r2, r3
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	d909      	bls.n	8008c1e <UART_SetConfig+0x3a6>
 8008c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c10:	d205      	bcs.n	8008c1e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60da      	str	r2, [r3, #12]
 8008c1c:	e002      	b.n	8008c24 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	2201      	movs	r2, #1
 8008c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c36:	2200      	movs	r2, #0
 8008c38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3750      	adds	r7, #80	@ 0x50
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c4e:	bf00      	nop
 8008c50:	0800a600 	.word	0x0800a600

08008c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d52:	d10a      	bne.n	8008d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b098      	sub	sp, #96	@ 0x60
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008da8:	f7f8 fd92 	bl	80018d0 <HAL_GetTick>
 8008dac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0308 	and.w	r3, r3, #8
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d12f      	bne.n	8008e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f88e 	bl	8008eec <UART_WaitOnFlagUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d022      	beq.n	8008e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008df6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e6      	bne.n	8008dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e063      	b.n	8008ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	d149      	bne.n	8008ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e32:	2200      	movs	r2, #0
 8008e34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f857 	bl	8008eec <UART_WaitOnFlagUntilTimeout>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d03c      	beq.n	8008ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	623b      	str	r3, [r7, #32]
   return(result);
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e6      	bne.n	8008e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 0301 	bic.w	r3, r3, #1
 8008e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e96:	61fa      	str	r2, [r7, #28]
 8008e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	69b9      	ldr	r1, [r7, #24]
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e5      	bne.n	8008e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e012      	b.n	8008ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3758      	adds	r7, #88	@ 0x58
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008efc:	e04f      	b.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f04:	d04b      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f06:	f7f8 fce3 	bl	80018d0 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d302      	bcc.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e04e      	b.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d037      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b80      	cmp	r3, #128	@ 0x80
 8008f32:	d034      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b40      	cmp	r3, #64	@ 0x40
 8008f38:	d031      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d110      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f838 	bl	8008fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2208      	movs	r2, #8
 8008f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e029      	b.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f78:	d111      	bne.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 f81e 	bl	8008fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e00f      	b.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	bf0c      	ite	eq
 8008fae:	2301      	moveq	r3, #1
 8008fb0:	2300      	movne	r3, #0
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d0a0      	beq.n	8008efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b095      	sub	sp, #84	@ 0x54
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e6      	bne.n	8008fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3308      	adds	r3, #8
 8009006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009016:	f023 0301 	bic.w	r3, r3, #1
 800901a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800902a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e3      	bne.n	8009000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d118      	bne.n	8009072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	60bb      	str	r3, [r7, #8]
   return(result);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f023 0310 	bic.w	r3, r3, #16
 8009054:	647b      	str	r3, [r7, #68]	@ 0x44
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6979      	ldr	r1, [r7, #20]
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	613b      	str	r3, [r7, #16]
   return(result);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e6      	bne.n	8009040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009086:	bf00      	nop
 8009088:	3754      	adds	r7, #84	@ 0x54
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800909e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff fbcf 	bl	800884c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6979      	ldr	r1, [r7, #20]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e6      	bne.n	80090be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fb9a 	bl	8008838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009104:	bf00      	nop
 8009106:	3720      	adds	r7, #32
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UARTEx_DisableFifoMode+0x16>
 800915a:	2302      	movs	r3, #2
 800915c:	e027      	b.n	80091ae <HAL_UARTEx_DisableFifoMode+0x66>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2224      	movs	r2, #36	@ 0x24
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800918c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e02d      	b.n	800922e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2224      	movs	r2, #36	@ 0x24
 80091de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0201 	bic.w	r2, r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f850 	bl	80092b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800924a:	2302      	movs	r3, #2
 800924c:	e02d      	b.n	80092aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2224      	movs	r2, #36	@ 0x24
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0201 	bic.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f812 	bl	80092b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d108      	bne.n	80092d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092d4:	e031      	b.n	800933a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092d6:	2308      	movs	r3, #8
 80092d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092da:	2308      	movs	r3, #8
 80092dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	0e5b      	lsrs	r3, r3, #25
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	0f5b      	lsrs	r3, r3, #29
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	7b3a      	ldrb	r2, [r7, #12]
 8009302:	4911      	ldr	r1, [pc, #68]	@ (8009348 <UARTEx_SetNbDataToProcess+0x94>)
 8009304:	5c8a      	ldrb	r2, [r1, r2]
 8009306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800930a:	7b3a      	ldrb	r2, [r7, #12]
 800930c:	490f      	ldr	r1, [pc, #60]	@ (800934c <UARTEx_SetNbDataToProcess+0x98>)
 800930e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009310:	fb93 f3f2 	sdiv	r3, r3, r2
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	7b7a      	ldrb	r2, [r7, #13]
 8009320:	4909      	ldr	r1, [pc, #36]	@ (8009348 <UARTEx_SetNbDataToProcess+0x94>)
 8009322:	5c8a      	ldrb	r2, [r1, r2]
 8009324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009328:	7b7a      	ldrb	r2, [r7, #13]
 800932a:	4908      	ldr	r1, [pc, #32]	@ (800934c <UARTEx_SetNbDataToProcess+0x98>)
 800932c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800932e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	0800a618 	.word	0x0800a618
 800934c:	0800a620 	.word	0x0800a620

08009350 <_strtol_l.isra.0>:
 8009350:	2b24      	cmp	r3, #36	@ 0x24
 8009352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009356:	4686      	mov	lr, r0
 8009358:	4690      	mov	r8, r2
 800935a:	d801      	bhi.n	8009360 <_strtol_l.isra.0+0x10>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d106      	bne.n	800936e <_strtol_l.isra.0+0x1e>
 8009360:	f000 fb4e 	bl	8009a00 <__errno>
 8009364:	2316      	movs	r3, #22
 8009366:	6003      	str	r3, [r0, #0]
 8009368:	2000      	movs	r0, #0
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	460d      	mov	r5, r1
 8009370:	4833      	ldr	r0, [pc, #204]	@ (8009440 <_strtol_l.isra.0+0xf0>)
 8009372:	462a      	mov	r2, r5
 8009374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009378:	5d06      	ldrb	r6, [r0, r4]
 800937a:	f016 0608 	ands.w	r6, r6, #8
 800937e:	d1f8      	bne.n	8009372 <_strtol_l.isra.0+0x22>
 8009380:	2c2d      	cmp	r4, #45	@ 0x2d
 8009382:	d110      	bne.n	80093a6 <_strtol_l.isra.0+0x56>
 8009384:	782c      	ldrb	r4, [r5, #0]
 8009386:	2601      	movs	r6, #1
 8009388:	1c95      	adds	r5, r2, #2
 800938a:	f033 0210 	bics.w	r2, r3, #16
 800938e:	d115      	bne.n	80093bc <_strtol_l.isra.0+0x6c>
 8009390:	2c30      	cmp	r4, #48	@ 0x30
 8009392:	d10d      	bne.n	80093b0 <_strtol_l.isra.0+0x60>
 8009394:	782a      	ldrb	r2, [r5, #0]
 8009396:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800939a:	2a58      	cmp	r2, #88	@ 0x58
 800939c:	d108      	bne.n	80093b0 <_strtol_l.isra.0+0x60>
 800939e:	786c      	ldrb	r4, [r5, #1]
 80093a0:	3502      	adds	r5, #2
 80093a2:	2310      	movs	r3, #16
 80093a4:	e00a      	b.n	80093bc <_strtol_l.isra.0+0x6c>
 80093a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80093a8:	bf04      	itt	eq
 80093aa:	782c      	ldrbeq	r4, [r5, #0]
 80093ac:	1c95      	addeq	r5, r2, #2
 80093ae:	e7ec      	b.n	800938a <_strtol_l.isra.0+0x3a>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f6      	bne.n	80093a2 <_strtol_l.isra.0+0x52>
 80093b4:	2c30      	cmp	r4, #48	@ 0x30
 80093b6:	bf14      	ite	ne
 80093b8:	230a      	movne	r3, #10
 80093ba:	2308      	moveq	r3, #8
 80093bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093c0:	2200      	movs	r2, #0
 80093c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093c6:	4610      	mov	r0, r2
 80093c8:	fbbc f9f3 	udiv	r9, ip, r3
 80093cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80093d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093d4:	2f09      	cmp	r7, #9
 80093d6:	d80f      	bhi.n	80093f8 <_strtol_l.isra.0+0xa8>
 80093d8:	463c      	mov	r4, r7
 80093da:	42a3      	cmp	r3, r4
 80093dc:	dd1b      	ble.n	8009416 <_strtol_l.isra.0+0xc6>
 80093de:	1c57      	adds	r7, r2, #1
 80093e0:	d007      	beq.n	80093f2 <_strtol_l.isra.0+0xa2>
 80093e2:	4581      	cmp	r9, r0
 80093e4:	d314      	bcc.n	8009410 <_strtol_l.isra.0+0xc0>
 80093e6:	d101      	bne.n	80093ec <_strtol_l.isra.0+0x9c>
 80093e8:	45a2      	cmp	sl, r4
 80093ea:	db11      	blt.n	8009410 <_strtol_l.isra.0+0xc0>
 80093ec:	fb00 4003 	mla	r0, r0, r3, r4
 80093f0:	2201      	movs	r2, #1
 80093f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093f6:	e7eb      	b.n	80093d0 <_strtol_l.isra.0+0x80>
 80093f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80093fc:	2f19      	cmp	r7, #25
 80093fe:	d801      	bhi.n	8009404 <_strtol_l.isra.0+0xb4>
 8009400:	3c37      	subs	r4, #55	@ 0x37
 8009402:	e7ea      	b.n	80093da <_strtol_l.isra.0+0x8a>
 8009404:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009408:	2f19      	cmp	r7, #25
 800940a:	d804      	bhi.n	8009416 <_strtol_l.isra.0+0xc6>
 800940c:	3c57      	subs	r4, #87	@ 0x57
 800940e:	e7e4      	b.n	80093da <_strtol_l.isra.0+0x8a>
 8009410:	f04f 32ff 	mov.w	r2, #4294967295
 8009414:	e7ed      	b.n	80093f2 <_strtol_l.isra.0+0xa2>
 8009416:	1c53      	adds	r3, r2, #1
 8009418:	d108      	bne.n	800942c <_strtol_l.isra.0+0xdc>
 800941a:	2322      	movs	r3, #34	@ 0x22
 800941c:	4660      	mov	r0, ip
 800941e:	f8ce 3000 	str.w	r3, [lr]
 8009422:	f1b8 0f00 	cmp.w	r8, #0
 8009426:	d0a0      	beq.n	800936a <_strtol_l.isra.0+0x1a>
 8009428:	1e69      	subs	r1, r5, #1
 800942a:	e006      	b.n	800943a <_strtol_l.isra.0+0xea>
 800942c:	b106      	cbz	r6, 8009430 <_strtol_l.isra.0+0xe0>
 800942e:	4240      	negs	r0, r0
 8009430:	f1b8 0f00 	cmp.w	r8, #0
 8009434:	d099      	beq.n	800936a <_strtol_l.isra.0+0x1a>
 8009436:	2a00      	cmp	r2, #0
 8009438:	d1f6      	bne.n	8009428 <_strtol_l.isra.0+0xd8>
 800943a:	f8c8 1000 	str.w	r1, [r8]
 800943e:	e794      	b.n	800936a <_strtol_l.isra.0+0x1a>
 8009440:	0800a629 	.word	0x0800a629

08009444 <strtol>:
 8009444:	4613      	mov	r3, r2
 8009446:	460a      	mov	r2, r1
 8009448:	4601      	mov	r1, r0
 800944a:	4802      	ldr	r0, [pc, #8]	@ (8009454 <strtol+0x10>)
 800944c:	6800      	ldr	r0, [r0, #0]
 800944e:	f7ff bf7f 	b.w	8009350 <_strtol_l.isra.0>
 8009452:	bf00      	nop
 8009454:	200000b4 	.word	0x200000b4

08009458 <std>:
 8009458:	2300      	movs	r3, #0
 800945a:	b510      	push	{r4, lr}
 800945c:	4604      	mov	r4, r0
 800945e:	6083      	str	r3, [r0, #8]
 8009460:	8181      	strh	r1, [r0, #12]
 8009462:	4619      	mov	r1, r3
 8009464:	6643      	str	r3, [r0, #100]	@ 0x64
 8009466:	81c2      	strh	r2, [r0, #14]
 8009468:	2208      	movs	r2, #8
 800946a:	6183      	str	r3, [r0, #24]
 800946c:	e9c0 3300 	strd	r3, r3, [r0]
 8009470:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009474:	305c      	adds	r0, #92	@ 0x5c
 8009476:	f000 f9f9 	bl	800986c <memset>
 800947a:	4b0d      	ldr	r3, [pc, #52]	@ (80094b0 <std+0x58>)
 800947c:	6224      	str	r4, [r4, #32]
 800947e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009480:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <std+0x5c>)
 8009482:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009484:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <std+0x60>)
 8009486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009488:	4b0c      	ldr	r3, [pc, #48]	@ (80094bc <std+0x64>)
 800948a:	6323      	str	r3, [r4, #48]	@ 0x30
 800948c:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <std+0x68>)
 800948e:	429c      	cmp	r4, r3
 8009490:	d006      	beq.n	80094a0 <std+0x48>
 8009492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009496:	4294      	cmp	r4, r2
 8009498:	d002      	beq.n	80094a0 <std+0x48>
 800949a:	33d0      	adds	r3, #208	@ 0xd0
 800949c:	429c      	cmp	r4, r3
 800949e:	d105      	bne.n	80094ac <std+0x54>
 80094a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a8:	f000 bad4 	b.w	8009a54 <__retarget_lock_init_recursive>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	bf00      	nop
 80094b0:	080096bd 	.word	0x080096bd
 80094b4:	080096df 	.word	0x080096df
 80094b8:	08009717 	.word	0x08009717
 80094bc:	0800973b 	.word	0x0800973b
 80094c0:	20000240 	.word	0x20000240

080094c4 <stdio_exit_handler>:
 80094c4:	4a02      	ldr	r2, [pc, #8]	@ (80094d0 <stdio_exit_handler+0xc>)
 80094c6:	4903      	ldr	r1, [pc, #12]	@ (80094d4 <stdio_exit_handler+0x10>)
 80094c8:	4803      	ldr	r0, [pc, #12]	@ (80094d8 <stdio_exit_handler+0x14>)
 80094ca:	f000 b869 	b.w	80095a0 <_fwalk_sglue>
 80094ce:	bf00      	nop
 80094d0:	200000a8 	.word	0x200000a8
 80094d4:	0800a345 	.word	0x0800a345
 80094d8:	200000b8 	.word	0x200000b8

080094dc <cleanup_stdio>:
 80094dc:	6841      	ldr	r1, [r0, #4]
 80094de:	4b0c      	ldr	r3, [pc, #48]	@ (8009510 <cleanup_stdio+0x34>)
 80094e0:	4299      	cmp	r1, r3
 80094e2:	b510      	push	{r4, lr}
 80094e4:	4604      	mov	r4, r0
 80094e6:	d001      	beq.n	80094ec <cleanup_stdio+0x10>
 80094e8:	f000 ff2c 	bl	800a344 <_fflush_r>
 80094ec:	68a1      	ldr	r1, [r4, #8]
 80094ee:	4b09      	ldr	r3, [pc, #36]	@ (8009514 <cleanup_stdio+0x38>)
 80094f0:	4299      	cmp	r1, r3
 80094f2:	d002      	beq.n	80094fa <cleanup_stdio+0x1e>
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 ff25 	bl	800a344 <_fflush_r>
 80094fa:	68e1      	ldr	r1, [r4, #12]
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <cleanup_stdio+0x3c>)
 80094fe:	4299      	cmp	r1, r3
 8009500:	d004      	beq.n	800950c <cleanup_stdio+0x30>
 8009502:	4620      	mov	r0, r4
 8009504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009508:	f000 bf1c 	b.w	800a344 <_fflush_r>
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	20000240 	.word	0x20000240
 8009514:	200002a8 	.word	0x200002a8
 8009518:	20000310 	.word	0x20000310

0800951c <global_stdio_init.part.0>:
 800951c:	b510      	push	{r4, lr}
 800951e:	4b0b      	ldr	r3, [pc, #44]	@ (800954c <global_stdio_init.part.0+0x30>)
 8009520:	2104      	movs	r1, #4
 8009522:	4c0b      	ldr	r4, [pc, #44]	@ (8009550 <global_stdio_init.part.0+0x34>)
 8009524:	4a0b      	ldr	r2, [pc, #44]	@ (8009554 <global_stdio_init.part.0+0x38>)
 8009526:	4620      	mov	r0, r4
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	f7ff ff94 	bl	8009458 <std>
 8009530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009534:	2201      	movs	r2, #1
 8009536:	2109      	movs	r1, #9
 8009538:	f7ff ff8e 	bl	8009458 <std>
 800953c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009540:	2202      	movs	r2, #2
 8009542:	2112      	movs	r1, #18
 8009544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009548:	f7ff bf86 	b.w	8009458 <std>
 800954c:	20000378 	.word	0x20000378
 8009550:	20000240 	.word	0x20000240
 8009554:	080094c5 	.word	0x080094c5

08009558 <__sfp_lock_acquire>:
 8009558:	4801      	ldr	r0, [pc, #4]	@ (8009560 <__sfp_lock_acquire+0x8>)
 800955a:	f000 ba7c 	b.w	8009a56 <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	20000381 	.word	0x20000381

08009564 <__sfp_lock_release>:
 8009564:	4801      	ldr	r0, [pc, #4]	@ (800956c <__sfp_lock_release+0x8>)
 8009566:	f000 ba77 	b.w	8009a58 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	20000381 	.word	0x20000381

08009570 <__sinit>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4604      	mov	r4, r0
 8009574:	f7ff fff0 	bl	8009558 <__sfp_lock_acquire>
 8009578:	6a23      	ldr	r3, [r4, #32]
 800957a:	b11b      	cbz	r3, 8009584 <__sinit+0x14>
 800957c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009580:	f7ff bff0 	b.w	8009564 <__sfp_lock_release>
 8009584:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <__sinit+0x28>)
 8009586:	6223      	str	r3, [r4, #32]
 8009588:	4b04      	ldr	r3, [pc, #16]	@ (800959c <__sinit+0x2c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1f5      	bne.n	800957c <__sinit+0xc>
 8009590:	f7ff ffc4 	bl	800951c <global_stdio_init.part.0>
 8009594:	e7f2      	b.n	800957c <__sinit+0xc>
 8009596:	bf00      	nop
 8009598:	080094dd 	.word	0x080094dd
 800959c:	20000378 	.word	0x20000378

080095a0 <_fwalk_sglue>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	4607      	mov	r7, r0
 80095a6:	4688      	mov	r8, r1
 80095a8:	4614      	mov	r4, r2
 80095aa:	2600      	movs	r6, #0
 80095ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095b0:	f1b9 0901 	subs.w	r9, r9, #1
 80095b4:	d505      	bpl.n	80095c2 <_fwalk_sglue+0x22>
 80095b6:	6824      	ldr	r4, [r4, #0]
 80095b8:	2c00      	cmp	r4, #0
 80095ba:	d1f7      	bne.n	80095ac <_fwalk_sglue+0xc>
 80095bc:	4630      	mov	r0, r6
 80095be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d907      	bls.n	80095d8 <_fwalk_sglue+0x38>
 80095c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095cc:	3301      	adds	r3, #1
 80095ce:	d003      	beq.n	80095d8 <_fwalk_sglue+0x38>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4638      	mov	r0, r7
 80095d4:	47c0      	blx	r8
 80095d6:	4306      	orrs	r6, r0
 80095d8:	3568      	adds	r5, #104	@ 0x68
 80095da:	e7e9      	b.n	80095b0 <_fwalk_sglue+0x10>

080095dc <iprintf>:
 80095dc:	b40f      	push	{r0, r1, r2, r3}
 80095de:	b507      	push	{r0, r1, r2, lr}
 80095e0:	4906      	ldr	r1, [pc, #24]	@ (80095fc <iprintf+0x20>)
 80095e2:	ab04      	add	r3, sp, #16
 80095e4:	6808      	ldr	r0, [r1, #0]
 80095e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ea:	6881      	ldr	r1, [r0, #8]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	f000 fb7d 	bl	8009cec <_vfiprintf_r>
 80095f2:	b003      	add	sp, #12
 80095f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095f8:	b004      	add	sp, #16
 80095fa:	4770      	bx	lr
 80095fc:	200000b4 	.word	0x200000b4

08009600 <_puts_r>:
 8009600:	6a03      	ldr	r3, [r0, #32]
 8009602:	b570      	push	{r4, r5, r6, lr}
 8009604:	4605      	mov	r5, r0
 8009606:	460e      	mov	r6, r1
 8009608:	6884      	ldr	r4, [r0, #8]
 800960a:	b90b      	cbnz	r3, 8009610 <_puts_r+0x10>
 800960c:	f7ff ffb0 	bl	8009570 <__sinit>
 8009610:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009612:	07db      	lsls	r3, r3, #31
 8009614:	d405      	bmi.n	8009622 <_puts_r+0x22>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	0598      	lsls	r0, r3, #22
 800961a:	d402      	bmi.n	8009622 <_puts_r+0x22>
 800961c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961e:	f000 fa1a 	bl	8009a56 <__retarget_lock_acquire_recursive>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	0719      	lsls	r1, r3, #28
 8009626:	d502      	bpl.n	800962e <_puts_r+0x2e>
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d135      	bne.n	800969a <_puts_r+0x9a>
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f000 f8c5 	bl	80097c0 <__swsetup_r>
 8009636:	b380      	cbz	r0, 800969a <_puts_r+0x9a>
 8009638:	f04f 35ff 	mov.w	r5, #4294967295
 800963c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800963e:	07da      	lsls	r2, r3, #31
 8009640:	d405      	bmi.n	800964e <_puts_r+0x4e>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	059b      	lsls	r3, r3, #22
 8009646:	d402      	bmi.n	800964e <_puts_r+0x4e>
 8009648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800964a:	f000 fa05 	bl	8009a58 <__retarget_lock_release_recursive>
 800964e:	4628      	mov	r0, r5
 8009650:	bd70      	pop	{r4, r5, r6, pc}
 8009652:	2b00      	cmp	r3, #0
 8009654:	da04      	bge.n	8009660 <_puts_r+0x60>
 8009656:	69a2      	ldr	r2, [r4, #24]
 8009658:	429a      	cmp	r2, r3
 800965a:	dc17      	bgt.n	800968c <_puts_r+0x8c>
 800965c:	290a      	cmp	r1, #10
 800965e:	d015      	beq.n	800968c <_puts_r+0x8c>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	6022      	str	r2, [r4, #0]
 8009666:	7019      	strb	r1, [r3, #0]
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800966e:	3b01      	subs	r3, #1
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	2900      	cmp	r1, #0
 8009674:	d1ed      	bne.n	8009652 <_puts_r+0x52>
 8009676:	2b00      	cmp	r3, #0
 8009678:	da11      	bge.n	800969e <_puts_r+0x9e>
 800967a:	4622      	mov	r2, r4
 800967c:	210a      	movs	r1, #10
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f85f 	bl	8009742 <__swbuf_r>
 8009684:	3001      	adds	r0, #1
 8009686:	d0d7      	beq.n	8009638 <_puts_r+0x38>
 8009688:	250a      	movs	r5, #10
 800968a:	e7d7      	b.n	800963c <_puts_r+0x3c>
 800968c:	4622      	mov	r2, r4
 800968e:	4628      	mov	r0, r5
 8009690:	f000 f857 	bl	8009742 <__swbuf_r>
 8009694:	3001      	adds	r0, #1
 8009696:	d1e7      	bne.n	8009668 <_puts_r+0x68>
 8009698:	e7ce      	b.n	8009638 <_puts_r+0x38>
 800969a:	3e01      	subs	r6, #1
 800969c:	e7e4      	b.n	8009668 <_puts_r+0x68>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	6022      	str	r2, [r4, #0]
 80096a4:	220a      	movs	r2, #10
 80096a6:	701a      	strb	r2, [r3, #0]
 80096a8:	e7ee      	b.n	8009688 <_puts_r+0x88>
	...

080096ac <puts>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <puts+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f7ff bfa5 	b.w	8009600 <_puts_r>
 80096b6:	bf00      	nop
 80096b8:	200000b4 	.word	0x200000b4

080096bc <__sread>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	f000 f978 	bl	80099b8 <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	bfab      	itete	ge
 80096cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096ce:	89a3      	ldrhlt	r3, [r4, #12]
 80096d0:	181b      	addge	r3, r3, r0
 80096d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096d6:	bfac      	ite	ge
 80096d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096da:	81a3      	strhlt	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__swrite>:
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	461f      	mov	r7, r3
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	4605      	mov	r5, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	05db      	lsls	r3, r3, #23
 80096ec:	4616      	mov	r6, r2
 80096ee:	d505      	bpl.n	80096fc <__swrite+0x1e>
 80096f0:	2302      	movs	r3, #2
 80096f2:	2200      	movs	r2, #0
 80096f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f8:	f000 f94c 	bl	8009994 <_lseek_r>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	4632      	mov	r2, r6
 8009700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009704:	4628      	mov	r0, r5
 8009706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	463b      	mov	r3, r7
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	f000 b963 	b.w	80099dc <_write_r>

08009716 <__sseek>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971e:	f000 f939 	bl	8009994 <_lseek_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	bf15      	itete	ne
 8009728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800972a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800972e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009732:	81a3      	strheq	r3, [r4, #12]
 8009734:	bf18      	it	ne
 8009736:	81a3      	strhne	r3, [r4, #12]
 8009738:	bd10      	pop	{r4, pc}

0800973a <__sclose>:
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 b919 	b.w	8009974 <_close_r>

08009742 <__swbuf_r>:
 8009742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009744:	460e      	mov	r6, r1
 8009746:	4614      	mov	r4, r2
 8009748:	4605      	mov	r5, r0
 800974a:	b118      	cbz	r0, 8009754 <__swbuf_r+0x12>
 800974c:	6a03      	ldr	r3, [r0, #32]
 800974e:	b90b      	cbnz	r3, 8009754 <__swbuf_r+0x12>
 8009750:	f7ff ff0e 	bl	8009570 <__sinit>
 8009754:	69a3      	ldr	r3, [r4, #24]
 8009756:	60a3      	str	r3, [r4, #8]
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	071a      	lsls	r2, r3, #28
 800975c:	d501      	bpl.n	8009762 <__swbuf_r+0x20>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	b943      	cbnz	r3, 8009774 <__swbuf_r+0x32>
 8009762:	4621      	mov	r1, r4
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f82b 	bl	80097c0 <__swsetup_r>
 800976a:	b118      	cbz	r0, 8009774 <__swbuf_r+0x32>
 800976c:	f04f 37ff 	mov.w	r7, #4294967295
 8009770:	4638      	mov	r0, r7
 8009772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	b2f6      	uxtb	r6, r6
 8009778:	6922      	ldr	r2, [r4, #16]
 800977a:	4637      	mov	r7, r6
 800977c:	1a98      	subs	r0, r3, r2
 800977e:	6963      	ldr	r3, [r4, #20]
 8009780:	4283      	cmp	r3, r0
 8009782:	dc05      	bgt.n	8009790 <__swbuf_r+0x4e>
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fddc 	bl	800a344 <_fflush_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	d1ed      	bne.n	800976c <__swbuf_r+0x2a>
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	3b01      	subs	r3, #1
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	701e      	strb	r6, [r3, #0]
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	6962      	ldr	r2, [r4, #20]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d004      	beq.n	80097b0 <__swbuf_r+0x6e>
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	07db      	lsls	r3, r3, #31
 80097aa:	d5e1      	bpl.n	8009770 <__swbuf_r+0x2e>
 80097ac:	2e0a      	cmp	r6, #10
 80097ae:	d1df      	bne.n	8009770 <__swbuf_r+0x2e>
 80097b0:	4621      	mov	r1, r4
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 fdc6 	bl	800a344 <_fflush_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d0d9      	beq.n	8009770 <__swbuf_r+0x2e>
 80097bc:	e7d6      	b.n	800976c <__swbuf_r+0x2a>
	...

080097c0 <__swsetup_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4b29      	ldr	r3, [pc, #164]	@ (8009868 <__swsetup_r+0xa8>)
 80097c4:	4605      	mov	r5, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	b118      	cbz	r0, 80097d4 <__swsetup_r+0x14>
 80097cc:	6a03      	ldr	r3, [r0, #32]
 80097ce:	b90b      	cbnz	r3, 80097d4 <__swsetup_r+0x14>
 80097d0:	f7ff fece 	bl	8009570 <__sinit>
 80097d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d8:	0719      	lsls	r1, r3, #28
 80097da:	d422      	bmi.n	8009822 <__swsetup_r+0x62>
 80097dc:	06da      	lsls	r2, r3, #27
 80097de:	d407      	bmi.n	80097f0 <__swsetup_r+0x30>
 80097e0:	2209      	movs	r2, #9
 80097e2:	602a      	str	r2, [r5, #0]
 80097e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	e033      	b.n	8009858 <__swsetup_r+0x98>
 80097f0:	0758      	lsls	r0, r3, #29
 80097f2:	d512      	bpl.n	800981a <__swsetup_r+0x5a>
 80097f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f6:	b141      	cbz	r1, 800980a <__swsetup_r+0x4a>
 80097f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097fc:	4299      	cmp	r1, r3
 80097fe:	d002      	beq.n	8009806 <__swsetup_r+0x46>
 8009800:	4628      	mov	r0, r5
 8009802:	f000 f949 	bl	8009a98 <_free_r>
 8009806:	2300      	movs	r3, #0
 8009808:	6363      	str	r3, [r4, #52]	@ 0x34
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	2300      	movs	r3, #0
 8009814:	6063      	str	r3, [r4, #4]
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f043 0308 	orr.w	r3, r3, #8
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	b94b      	cbnz	r3, 800983a <__swsetup_r+0x7a>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800982c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009830:	d003      	beq.n	800983a <__swsetup_r+0x7a>
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 fde4 	bl	800a402 <__smakebuf_r>
 800983a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800983e:	f013 0201 	ands.w	r2, r3, #1
 8009842:	d00a      	beq.n	800985a <__swsetup_r+0x9a>
 8009844:	2200      	movs	r2, #0
 8009846:	60a2      	str	r2, [r4, #8]
 8009848:	6962      	ldr	r2, [r4, #20]
 800984a:	4252      	negs	r2, r2
 800984c:	61a2      	str	r2, [r4, #24]
 800984e:	6922      	ldr	r2, [r4, #16]
 8009850:	b942      	cbnz	r2, 8009864 <__swsetup_r+0xa4>
 8009852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009856:	d1c5      	bne.n	80097e4 <__swsetup_r+0x24>
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	0799      	lsls	r1, r3, #30
 800985c:	bf58      	it	pl
 800985e:	6962      	ldrpl	r2, [r4, #20]
 8009860:	60a2      	str	r2, [r4, #8]
 8009862:	e7f4      	b.n	800984e <__swsetup_r+0x8e>
 8009864:	2000      	movs	r0, #0
 8009866:	e7f7      	b.n	8009858 <__swsetup_r+0x98>
 8009868:	200000b4 	.word	0x200000b4

0800986c <memset>:
 800986c:	4402      	add	r2, r0
 800986e:	4603      	mov	r3, r0
 8009870:	4293      	cmp	r3, r2
 8009872:	d100      	bne.n	8009876 <memset+0xa>
 8009874:	4770      	bx	lr
 8009876:	f803 1b01 	strb.w	r1, [r3], #1
 800987a:	e7f9      	b.n	8009870 <memset+0x4>

0800987c <strchr>:
 800987c:	b2c9      	uxtb	r1, r1
 800987e:	4603      	mov	r3, r0
 8009880:	4618      	mov	r0, r3
 8009882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009886:	b112      	cbz	r2, 800988e <strchr+0x12>
 8009888:	428a      	cmp	r2, r1
 800988a:	d1f9      	bne.n	8009880 <strchr+0x4>
 800988c:	4770      	bx	lr
 800988e:	2900      	cmp	r1, #0
 8009890:	bf18      	it	ne
 8009892:	2000      	movne	r0, #0
 8009894:	4770      	bx	lr

08009896 <strncpy>:
 8009896:	3901      	subs	r1, #1
 8009898:	4603      	mov	r3, r0
 800989a:	b510      	push	{r4, lr}
 800989c:	b132      	cbz	r2, 80098ac <strncpy+0x16>
 800989e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098a2:	3a01      	subs	r2, #1
 80098a4:	f803 4b01 	strb.w	r4, [r3], #1
 80098a8:	2c00      	cmp	r4, #0
 80098aa:	d1f7      	bne.n	800989c <strncpy+0x6>
 80098ac:	441a      	add	r2, r3
 80098ae:	2100      	movs	r1, #0
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d100      	bne.n	80098b6 <strncpy+0x20>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ba:	e7f9      	b.n	80098b0 <strncpy+0x1a>

080098bc <strtok>:
 80098bc:	4b16      	ldr	r3, [pc, #88]	@ (8009918 <strtok+0x5c>)
 80098be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c2:	681f      	ldr	r7, [r3, #0]
 80098c4:	4605      	mov	r5, r0
 80098c6:	460e      	mov	r6, r1
 80098c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80098ca:	b9ec      	cbnz	r4, 8009908 <strtok+0x4c>
 80098cc:	2050      	movs	r0, #80	@ 0x50
 80098ce:	f000 f92d 	bl	8009b2c <malloc>
 80098d2:	4602      	mov	r2, r0
 80098d4:	6478      	str	r0, [r7, #68]	@ 0x44
 80098d6:	b920      	cbnz	r0, 80098e2 <strtok+0x26>
 80098d8:	4b10      	ldr	r3, [pc, #64]	@ (800991c <strtok+0x60>)
 80098da:	215b      	movs	r1, #91	@ 0x5b
 80098dc:	4810      	ldr	r0, [pc, #64]	@ (8009920 <strtok+0x64>)
 80098de:	f000 f8bd 	bl	8009a5c <__assert_func>
 80098e2:	e9c0 4400 	strd	r4, r4, [r0]
 80098e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80098ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80098ee:	6184      	str	r4, [r0, #24]
 80098f0:	7704      	strb	r4, [r0, #28]
 80098f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80098f4:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80098f8:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80098fc:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009900:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009904:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	2301      	movs	r3, #1
 8009910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	f000 b806 	b.w	8009924 <__strtok_r>
 8009918:	200000b4 	.word	0x200000b4
 800991c:	0800a729 	.word	0x0800a729
 8009920:	0800a740 	.word	0x0800a740

08009924 <__strtok_r>:
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	4604      	mov	r4, r0
 8009928:	b908      	cbnz	r0, 800992e <__strtok_r+0xa>
 800992a:	6814      	ldr	r4, [r2, #0]
 800992c:	b144      	cbz	r4, 8009940 <__strtok_r+0x1c>
 800992e:	4620      	mov	r0, r4
 8009930:	460f      	mov	r7, r1
 8009932:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009936:	f817 6b01 	ldrb.w	r6, [r7], #1
 800993a:	b91e      	cbnz	r6, 8009944 <__strtok_r+0x20>
 800993c:	b965      	cbnz	r5, 8009958 <__strtok_r+0x34>
 800993e:	6015      	str	r5, [r2, #0]
 8009940:	2000      	movs	r0, #0
 8009942:	e005      	b.n	8009950 <__strtok_r+0x2c>
 8009944:	42b5      	cmp	r5, r6
 8009946:	d1f6      	bne.n	8009936 <__strtok_r+0x12>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f0      	bne.n	800992e <__strtok_r+0xa>
 800994c:	6014      	str	r4, [r2, #0]
 800994e:	7003      	strb	r3, [r0, #0]
 8009950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009952:	461c      	mov	r4, r3
 8009954:	e00c      	b.n	8009970 <__strtok_r+0x4c>
 8009956:	b91d      	cbnz	r5, 8009960 <__strtok_r+0x3c>
 8009958:	4627      	mov	r7, r4
 800995a:	460e      	mov	r6, r1
 800995c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009960:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009964:	42ab      	cmp	r3, r5
 8009966:	d1f6      	bne.n	8009956 <__strtok_r+0x32>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0f2      	beq.n	8009952 <__strtok_r+0x2e>
 800996c:	2300      	movs	r3, #0
 800996e:	703b      	strb	r3, [r7, #0]
 8009970:	6014      	str	r4, [r2, #0]
 8009972:	e7ed      	b.n	8009950 <__strtok_r+0x2c>

08009974 <_close_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	2300      	movs	r3, #0
 8009978:	4d05      	ldr	r5, [pc, #20]	@ (8009990 <_close_r+0x1c>)
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7f7 fd44 	bl	800140c <_close>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_close_r+0x1a>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_close_r+0x1a>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	2000037c 	.word	0x2000037c

08009994 <_lseek_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4604      	mov	r4, r0
 8009998:	4d06      	ldr	r5, [pc, #24]	@ (80099b4 <_lseek_r+0x20>)
 800999a:	4608      	mov	r0, r1
 800999c:	4611      	mov	r1, r2
 800999e:	2200      	movs	r2, #0
 80099a0:	602a      	str	r2, [r5, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f7f7 fd59 	bl	800145a <_lseek>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_lseek_r+0x1e>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_lseek_r+0x1e>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	2000037c 	.word	0x2000037c

080099b8 <_read_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4604      	mov	r4, r0
 80099bc:	4d06      	ldr	r5, [pc, #24]	@ (80099d8 <_read_r+0x20>)
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f7 fce7 	bl	800139a <_read>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_read_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_read_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	2000037c 	.word	0x2000037c

080099dc <_write_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4604      	mov	r4, r0
 80099e0:	4d06      	ldr	r5, [pc, #24]	@ (80099fc <_write_r+0x20>)
 80099e2:	4608      	mov	r0, r1
 80099e4:	4611      	mov	r1, r2
 80099e6:	2200      	movs	r2, #0
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	f7f7 fcf2 	bl	80013d4 <_write>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_write_r+0x1e>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_write_r+0x1e>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	2000037c 	.word	0x2000037c

08009a00 <__errno>:
 8009a00:	4b01      	ldr	r3, [pc, #4]	@ (8009a08 <__errno+0x8>)
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	200000b4 	.word	0x200000b4

08009a0c <__libc_init_array>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a44 <__libc_init_array+0x38>)
 8009a10:	2600      	movs	r6, #0
 8009a12:	4c0d      	ldr	r4, [pc, #52]	@ (8009a48 <__libc_init_array+0x3c>)
 8009a14:	1b64      	subs	r4, r4, r5
 8009a16:	10a4      	asrs	r4, r4, #2
 8009a18:	42a6      	cmp	r6, r4
 8009a1a:	d109      	bne.n	8009a30 <__libc_init_array+0x24>
 8009a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a4c <__libc_init_array+0x40>)
 8009a1e:	2600      	movs	r6, #0
 8009a20:	4c0b      	ldr	r4, [pc, #44]	@ (8009a50 <__libc_init_array+0x44>)
 8009a22:	f000 fdb7 	bl	800a594 <_init>
 8009a26:	1b64      	subs	r4, r4, r5
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	42a6      	cmp	r6, r4
 8009a2c:	d105      	bne.n	8009a3a <__libc_init_array+0x2e>
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a34:	3601      	adds	r6, #1
 8009a36:	4798      	blx	r3
 8009a38:	e7ee      	b.n	8009a18 <__libc_init_array+0xc>
 8009a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3e:	3601      	adds	r6, #1
 8009a40:	4798      	blx	r3
 8009a42:	e7f2      	b.n	8009a2a <__libc_init_array+0x1e>
 8009a44:	0800a814 	.word	0x0800a814
 8009a48:	0800a814 	.word	0x0800a814
 8009a4c:	0800a814 	.word	0x0800a814
 8009a50:	0800a818 	.word	0x0800a818

08009a54 <__retarget_lock_init_recursive>:
 8009a54:	4770      	bx	lr

08009a56 <__retarget_lock_acquire_recursive>:
 8009a56:	4770      	bx	lr

08009a58 <__retarget_lock_release_recursive>:
 8009a58:	4770      	bx	lr
	...

08009a5c <__assert_func>:
 8009a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5e:	4614      	mov	r4, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4b09      	ldr	r3, [pc, #36]	@ (8009a88 <__assert_func+0x2c>)
 8009a64:	4605      	mov	r5, r0
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68d8      	ldr	r0, [r3, #12]
 8009a6a:	b14c      	cbz	r4, 8009a80 <__assert_func+0x24>
 8009a6c:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <__assert_func+0x30>)
 8009a6e:	9100      	str	r1, [sp, #0]
 8009a70:	4907      	ldr	r1, [pc, #28]	@ (8009a90 <__assert_func+0x34>)
 8009a72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a76:	462b      	mov	r3, r5
 8009a78:	f000 fc8c 	bl	800a394 <fiprintf>
 8009a7c:	f000 fd3e 	bl	800a4fc <abort>
 8009a80:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <__assert_func+0x38>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e7f3      	b.n	8009a6e <__assert_func+0x12>
 8009a86:	bf00      	nop
 8009a88:	200000b4 	.word	0x200000b4
 8009a8c:	0800a79a 	.word	0x0800a79a
 8009a90:	0800a7a7 	.word	0x0800a7a7
 8009a94:	0800a7d5 	.word	0x0800a7d5

08009a98 <_free_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d041      	beq.n	8009b24 <_free_r+0x8c>
 8009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa4:	1f0c      	subs	r4, r1, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfb8      	it	lt
 8009aaa:	18e4      	addlt	r4, r4, r3
 8009aac:	f000 f8e8 	bl	8009c80 <__malloc_lock>
 8009ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b28 <_free_r+0x90>)
 8009ab2:	6813      	ldr	r3, [r2, #0]
 8009ab4:	b933      	cbnz	r3, 8009ac4 <_free_r+0x2c>
 8009ab6:	6063      	str	r3, [r4, #4]
 8009ab8:	6014      	str	r4, [r2, #0]
 8009aba:	4628      	mov	r0, r5
 8009abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac0:	f000 b8e4 	b.w	8009c8c <__malloc_unlock>
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	d908      	bls.n	8009ada <_free_r+0x42>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	1821      	adds	r1, r4, r0
 8009acc:	428b      	cmp	r3, r1
 8009ace:	bf01      	itttt	eq
 8009ad0:	6819      	ldreq	r1, [r3, #0]
 8009ad2:	685b      	ldreq	r3, [r3, #4]
 8009ad4:	1809      	addeq	r1, r1, r0
 8009ad6:	6021      	streq	r1, [r4, #0]
 8009ad8:	e7ed      	b.n	8009ab6 <_free_r+0x1e>
 8009ada:	461a      	mov	r2, r3
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	b10b      	cbz	r3, 8009ae4 <_free_r+0x4c>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d9fa      	bls.n	8009ada <_free_r+0x42>
 8009ae4:	6811      	ldr	r1, [r2, #0]
 8009ae6:	1850      	adds	r0, r2, r1
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	d10b      	bne.n	8009b04 <_free_r+0x6c>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	4401      	add	r1, r0
 8009af0:	1850      	adds	r0, r2, r1
 8009af2:	6011      	str	r1, [r2, #0]
 8009af4:	4283      	cmp	r3, r0
 8009af6:	d1e0      	bne.n	8009aba <_free_r+0x22>
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4408      	add	r0, r1
 8009afe:	6053      	str	r3, [r2, #4]
 8009b00:	6010      	str	r0, [r2, #0]
 8009b02:	e7da      	b.n	8009aba <_free_r+0x22>
 8009b04:	d902      	bls.n	8009b0c <_free_r+0x74>
 8009b06:	230c      	movs	r3, #12
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	e7d6      	b.n	8009aba <_free_r+0x22>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	1821      	adds	r1, r4, r0
 8009b10:	428b      	cmp	r3, r1
 8009b12:	bf02      	ittt	eq
 8009b14:	6819      	ldreq	r1, [r3, #0]
 8009b16:	685b      	ldreq	r3, [r3, #4]
 8009b18:	1809      	addeq	r1, r1, r0
 8009b1a:	6063      	str	r3, [r4, #4]
 8009b1c:	bf08      	it	eq
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	6054      	str	r4, [r2, #4]
 8009b22:	e7ca      	b.n	8009aba <_free_r+0x22>
 8009b24:	bd38      	pop	{r3, r4, r5, pc}
 8009b26:	bf00      	nop
 8009b28:	20000388 	.word	0x20000388

08009b2c <malloc>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	@ (8009b38 <malloc+0xc>)
 8009b2e:	4601      	mov	r1, r0
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f000 b825 	b.w	8009b80 <_malloc_r>
 8009b36:	bf00      	nop
 8009b38:	200000b4 	.word	0x200000b4

08009b3c <sbrk_aligned>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009b7c <sbrk_aligned+0x40>)
 8009b40:	460c      	mov	r4, r1
 8009b42:	4605      	mov	r5, r0
 8009b44:	6831      	ldr	r1, [r6, #0]
 8009b46:	b911      	cbnz	r1, 8009b4e <sbrk_aligned+0x12>
 8009b48:	f000 fcba 	bl	800a4c0 <_sbrk_r>
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 fcb5 	bl	800a4c0 <_sbrk_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d103      	bne.n	8009b62 <sbrk_aligned+0x26>
 8009b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b5e:	4620      	mov	r0, r4
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	1cc4      	adds	r4, r0, #3
 8009b64:	f024 0403 	bic.w	r4, r4, #3
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d0f8      	beq.n	8009b5e <sbrk_aligned+0x22>
 8009b6c:	1a21      	subs	r1, r4, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fca6 	bl	800a4c0 <_sbrk_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1f2      	bne.n	8009b5e <sbrk_aligned+0x22>
 8009b78:	e7ef      	b.n	8009b5a <sbrk_aligned+0x1e>
 8009b7a:	bf00      	nop
 8009b7c:	20000384 	.word	0x20000384

08009b80 <_malloc_r>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	4606      	mov	r6, r0
 8009b88:	f025 0503 	bic.w	r5, r5, #3
 8009b8c:	3508      	adds	r5, #8
 8009b8e:	2d0c      	cmp	r5, #12
 8009b90:	bf38      	it	cc
 8009b92:	250c      	movcc	r5, #12
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d904      	bls.n	8009ba6 <_malloc_r+0x26>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c7c <_malloc_r+0xfc>
 8009baa:	f000 f869 	bl	8009c80 <__malloc_lock>
 8009bae:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	bb44      	cbnz	r4, 8009c08 <_malloc_r+0x88>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff ffbf 	bl	8009b3c <sbrk_aligned>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	d158      	bne.n	8009c76 <_malloc_r+0xf6>
 8009bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8009bc8:	4627      	mov	r7, r4
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d143      	bne.n	8009c56 <_malloc_r+0xd6>
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	d04b      	beq.n	8009c6a <_malloc_r+0xea>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	eb04 0903 	add.w	r9, r4, r3
 8009bdc:	f000 fc70 	bl	800a4c0 <_sbrk_r>
 8009be0:	4581      	cmp	r9, r0
 8009be2:	d142      	bne.n	8009c6a <_malloc_r+0xea>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	4630      	mov	r0, r6
 8009be8:	1a6d      	subs	r5, r5, r1
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7ff ffa6 	bl	8009b3c <sbrk_aligned>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d03a      	beq.n	8009c6a <_malloc_r+0xea>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	442b      	add	r3, r5
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	bb62      	cbnz	r2, 8009c5c <_malloc_r+0xdc>
 8009c02:	f8c8 7000 	str.w	r7, [r8]
 8009c06:	e00f      	b.n	8009c28 <_malloc_r+0xa8>
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	1b52      	subs	r2, r2, r5
 8009c0c:	d420      	bmi.n	8009c50 <_malloc_r+0xd0>
 8009c0e:	2a0b      	cmp	r2, #11
 8009c10:	d917      	bls.n	8009c42 <_malloc_r+0xc2>
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	6025      	str	r5, [r4, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	6059      	strne	r1, [r3, #4]
 8009c1c:	6863      	ldr	r3, [r4, #4]
 8009c1e:	bf08      	it	eq
 8009c20:	f8c8 1000 	streq.w	r1, [r8]
 8009c24:	5162      	str	r2, [r4, r5]
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f82f 	bl	8009c8c <__malloc_unlock>
 8009c2e:	f104 000b 	add.w	r0, r4, #11
 8009c32:	1d23      	adds	r3, r4, #4
 8009c34:	f020 0007 	bic.w	r0, r0, #7
 8009c38:	1ac2      	subs	r2, r0, r3
 8009c3a:	bf1c      	itt	ne
 8009c3c:	1a1b      	subne	r3, r3, r0
 8009c3e:	50a3      	strne	r3, [r4, r2]
 8009c40:	e7af      	b.n	8009ba2 <_malloc_r+0x22>
 8009c42:	6862      	ldr	r2, [r4, #4]
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	bf0c      	ite	eq
 8009c48:	f8c8 2000 	streq.w	r2, [r8]
 8009c4c:	605a      	strne	r2, [r3, #4]
 8009c4e:	e7eb      	b.n	8009c28 <_malloc_r+0xa8>
 8009c50:	4623      	mov	r3, r4
 8009c52:	6864      	ldr	r4, [r4, #4]
 8009c54:	e7ae      	b.n	8009bb4 <_malloc_r+0x34>
 8009c56:	463c      	mov	r4, r7
 8009c58:	687f      	ldr	r7, [r7, #4]
 8009c5a:	e7b6      	b.n	8009bca <_malloc_r+0x4a>
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d1fb      	bne.n	8009c5c <_malloc_r+0xdc>
 8009c64:	2300      	movs	r3, #0
 8009c66:	6053      	str	r3, [r2, #4]
 8009c68:	e7de      	b.n	8009c28 <_malloc_r+0xa8>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	6033      	str	r3, [r6, #0]
 8009c70:	f000 f80c 	bl	8009c8c <__malloc_unlock>
 8009c74:	e794      	b.n	8009ba0 <_malloc_r+0x20>
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	e7d6      	b.n	8009c28 <_malloc_r+0xa8>
 8009c7a:	bf00      	nop
 8009c7c:	20000388 	.word	0x20000388

08009c80 <__malloc_lock>:
 8009c80:	4801      	ldr	r0, [pc, #4]	@ (8009c88 <__malloc_lock+0x8>)
 8009c82:	f7ff bee8 	b.w	8009a56 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20000380 	.word	0x20000380

08009c8c <__malloc_unlock>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	@ (8009c94 <__malloc_unlock+0x8>)
 8009c8e:	f7ff bee3 	b.w	8009a58 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20000380 	.word	0x20000380

08009c98 <__sfputc_r>:
 8009c98:	6893      	ldr	r3, [r2, #8]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	b410      	push	{r4}
 8009ca0:	6093      	str	r3, [r2, #8]
 8009ca2:	da08      	bge.n	8009cb6 <__sfputc_r+0x1e>
 8009ca4:	6994      	ldr	r4, [r2, #24]
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	db01      	blt.n	8009cae <__sfputc_r+0x16>
 8009caa:	290a      	cmp	r1, #10
 8009cac:	d103      	bne.n	8009cb6 <__sfputc_r+0x1e>
 8009cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb2:	f7ff bd46 	b.w	8009742 <__swbuf_r>
 8009cb6:	6813      	ldr	r3, [r2, #0]
 8009cb8:	1c58      	adds	r0, r3, #1
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	7019      	strb	r1, [r3, #0]
 8009cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <__sfputs_r>:
 8009cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc8:	4606      	mov	r6, r0
 8009cca:	460f      	mov	r7, r1
 8009ccc:	4614      	mov	r4, r2
 8009cce:	18d5      	adds	r5, r2, r3
 8009cd0:	42ac      	cmp	r4, r5
 8009cd2:	d101      	bne.n	8009cd8 <__sfputs_r+0x12>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e007      	b.n	8009ce8 <__sfputs_r+0x22>
 8009cd8:	463a      	mov	r2, r7
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ffda 	bl	8009c98 <__sfputc_r>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d1f3      	bne.n	8009cd0 <__sfputs_r+0xa>
 8009ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cec <_vfiprintf_r>:
 8009cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	460d      	mov	r5, r1
 8009cf2:	b09d      	sub	sp, #116	@ 0x74
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	4698      	mov	r8, r3
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	b118      	cbz	r0, 8009d04 <_vfiprintf_r+0x18>
 8009cfc:	6a03      	ldr	r3, [r0, #32]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <_vfiprintf_r+0x18>
 8009d00:	f7ff fc36 	bl	8009570 <__sinit>
 8009d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d06:	07d9      	lsls	r1, r3, #31
 8009d08:	d405      	bmi.n	8009d16 <_vfiprintf_r+0x2a>
 8009d0a:	89ab      	ldrh	r3, [r5, #12]
 8009d0c:	059a      	lsls	r2, r3, #22
 8009d0e:	d402      	bmi.n	8009d16 <_vfiprintf_r+0x2a>
 8009d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d12:	f7ff fea0 	bl	8009a56 <__retarget_lock_acquire_recursive>
 8009d16:	89ab      	ldrh	r3, [r5, #12]
 8009d18:	071b      	lsls	r3, r3, #28
 8009d1a:	d501      	bpl.n	8009d20 <_vfiprintf_r+0x34>
 8009d1c:	692b      	ldr	r3, [r5, #16]
 8009d1e:	b99b      	cbnz	r3, 8009d48 <_vfiprintf_r+0x5c>
 8009d20:	4629      	mov	r1, r5
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff fd4c 	bl	80097c0 <__swsetup_r>
 8009d28:	b170      	cbz	r0, 8009d48 <_vfiprintf_r+0x5c>
 8009d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d2c:	07dc      	lsls	r4, r3, #31
 8009d2e:	d504      	bpl.n	8009d3a <_vfiprintf_r+0x4e>
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	b01d      	add	sp, #116	@ 0x74
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3a:	89ab      	ldrh	r3, [r5, #12]
 8009d3c:	0598      	lsls	r0, r3, #22
 8009d3e:	d4f7      	bmi.n	8009d30 <_vfiprintf_r+0x44>
 8009d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d42:	f7ff fe89 	bl	8009a58 <__retarget_lock_release_recursive>
 8009d46:	e7f3      	b.n	8009d30 <_vfiprintf_r+0x44>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d4e:	f04f 0901 	mov.w	r9, #1
 8009d52:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009f08 <_vfiprintf_r+0x21c>
 8009d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d5e:	2330      	movs	r3, #48	@ 0x30
 8009d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d64:	4623      	mov	r3, r4
 8009d66:	469a      	mov	sl, r3
 8009d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6c:	b10a      	cbz	r2, 8009d72 <_vfiprintf_r+0x86>
 8009d6e:	2a25      	cmp	r2, #37	@ 0x25
 8009d70:	d1f9      	bne.n	8009d66 <_vfiprintf_r+0x7a>
 8009d72:	ebba 0b04 	subs.w	fp, sl, r4
 8009d76:	d00b      	beq.n	8009d90 <_vfiprintf_r+0xa4>
 8009d78:	465b      	mov	r3, fp
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f7ff ffa1 	bl	8009cc6 <__sfputs_r>
 8009d84:	3001      	adds	r0, #1
 8009d86:	f000 80a7 	beq.w	8009ed8 <_vfiprintf_r+0x1ec>
 8009d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d8c:	445a      	add	r2, fp
 8009d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d90:	f89a 3000 	ldrb.w	r3, [sl]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 809f 	beq.w	8009ed8 <_vfiprintf_r+0x1ec>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009da0:	f10a 0a01 	add.w	sl, sl, #1
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	9307      	str	r3, [sp, #28]
 8009da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db2:	4654      	mov	r4, sl
 8009db4:	2205      	movs	r2, #5
 8009db6:	4854      	ldr	r0, [pc, #336]	@ (8009f08 <_vfiprintf_r+0x21c>)
 8009db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbc:	f000 fb90 	bl	800a4e0 <memchr>
 8009dc0:	9a04      	ldr	r2, [sp, #16]
 8009dc2:	b9d8      	cbnz	r0, 8009dfc <_vfiprintf_r+0x110>
 8009dc4:	06d1      	lsls	r1, r2, #27
 8009dc6:	bf44      	itt	mi
 8009dc8:	2320      	movmi	r3, #32
 8009dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dce:	0713      	lsls	r3, r2, #28
 8009dd0:	bf44      	itt	mi
 8009dd2:	232b      	movmi	r3, #43	@ 0x2b
 8009dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dde:	d015      	beq.n	8009e0c <_vfiprintf_r+0x120>
 8009de0:	9a07      	ldr	r2, [sp, #28]
 8009de2:	4654      	mov	r4, sl
 8009de4:	2000      	movs	r0, #0
 8009de6:	f04f 0c0a 	mov.w	ip, #10
 8009dea:	4621      	mov	r1, r4
 8009dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009df0:	3b30      	subs	r3, #48	@ 0x30
 8009df2:	2b09      	cmp	r3, #9
 8009df4:	d94b      	bls.n	8009e8e <_vfiprintf_r+0x1a2>
 8009df6:	b1b0      	cbz	r0, 8009e26 <_vfiprintf_r+0x13a>
 8009df8:	9207      	str	r2, [sp, #28]
 8009dfa:	e014      	b.n	8009e26 <_vfiprintf_r+0x13a>
 8009dfc:	eba0 0308 	sub.w	r3, r0, r8
 8009e00:	46a2      	mov	sl, r4
 8009e02:	fa09 f303 	lsl.w	r3, r9, r3
 8009e06:	4313      	orrs	r3, r2
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	e7d2      	b.n	8009db2 <_vfiprintf_r+0xc6>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	1d19      	adds	r1, r3, #4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	9103      	str	r1, [sp, #12]
 8009e16:	bfbb      	ittet	lt
 8009e18:	425b      	neglt	r3, r3
 8009e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1e:	9307      	strge	r3, [sp, #28]
 8009e20:	9307      	strlt	r3, [sp, #28]
 8009e22:	bfb8      	it	lt
 8009e24:	9204      	strlt	r2, [sp, #16]
 8009e26:	7823      	ldrb	r3, [r4, #0]
 8009e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e2a:	d10a      	bne.n	8009e42 <_vfiprintf_r+0x156>
 8009e2c:	7863      	ldrb	r3, [r4, #1]
 8009e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e30:	d132      	bne.n	8009e98 <_vfiprintf_r+0x1ac>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	3402      	adds	r4, #2
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e3e:	9203      	str	r2, [sp, #12]
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f18 <_vfiprintf_r+0x22c>
 8009e46:	2203      	movs	r2, #3
 8009e48:	7821      	ldrb	r1, [r4, #0]
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	f000 fb48 	bl	800a4e0 <memchr>
 8009e50:	b138      	cbz	r0, 8009e62 <_vfiprintf_r+0x176>
 8009e52:	eba0 000a 	sub.w	r0, r0, sl
 8009e56:	2240      	movs	r2, #64	@ 0x40
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	4082      	lsls	r2, r0
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e66:	2206      	movs	r2, #6
 8009e68:	4828      	ldr	r0, [pc, #160]	@ (8009f0c <_vfiprintf_r+0x220>)
 8009e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e6e:	f000 fb37 	bl	800a4e0 <memchr>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d03f      	beq.n	8009ef6 <_vfiprintf_r+0x20a>
 8009e76:	4b26      	ldr	r3, [pc, #152]	@ (8009f10 <_vfiprintf_r+0x224>)
 8009e78:	bb1b      	cbnz	r3, 8009ec2 <_vfiprintf_r+0x1d6>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	3307      	adds	r3, #7
 8009e7e:	f023 0307 	bic.w	r3, r3, #7
 8009e82:	3308      	adds	r3, #8
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	443b      	add	r3, r7
 8009e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e8c:	e76a      	b.n	8009d64 <_vfiprintf_r+0x78>
 8009e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e92:	460c      	mov	r4, r1
 8009e94:	2001      	movs	r0, #1
 8009e96:	e7a8      	b.n	8009dea <_vfiprintf_r+0xfe>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	3401      	adds	r4, #1
 8009e9c:	f04f 0c0a 	mov.w	ip, #10
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eaa:	3a30      	subs	r2, #48	@ 0x30
 8009eac:	2a09      	cmp	r2, #9
 8009eae:	d903      	bls.n	8009eb8 <_vfiprintf_r+0x1cc>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0c6      	beq.n	8009e42 <_vfiprintf_r+0x156>
 8009eb4:	9105      	str	r1, [sp, #20]
 8009eb6:	e7c4      	b.n	8009e42 <_vfiprintf_r+0x156>
 8009eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7f0      	b.n	8009ea4 <_vfiprintf_r+0x1b8>
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	a904      	add	r1, sp, #16
 8009ec8:	4630      	mov	r0, r6
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	4b11      	ldr	r3, [pc, #68]	@ (8009f14 <_vfiprintf_r+0x228>)
 8009ece:	f3af 8000 	nop.w
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	1c78      	adds	r0, r7, #1
 8009ed6:	d1d6      	bne.n	8009e86 <_vfiprintf_r+0x19a>
 8009ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eda:	07d9      	lsls	r1, r3, #31
 8009edc:	d405      	bmi.n	8009eea <_vfiprintf_r+0x1fe>
 8009ede:	89ab      	ldrh	r3, [r5, #12]
 8009ee0:	059a      	lsls	r2, r3, #22
 8009ee2:	d402      	bmi.n	8009eea <_vfiprintf_r+0x1fe>
 8009ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ee6:	f7ff fdb7 	bl	8009a58 <__retarget_lock_release_recursive>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	065b      	lsls	r3, r3, #25
 8009eee:	f53f af1f 	bmi.w	8009d30 <_vfiprintf_r+0x44>
 8009ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ef4:	e71e      	b.n	8009d34 <_vfiprintf_r+0x48>
 8009ef6:	ab03      	add	r3, sp, #12
 8009ef8:	462a      	mov	r2, r5
 8009efa:	a904      	add	r1, sp, #16
 8009efc:	4630      	mov	r0, r6
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	4b04      	ldr	r3, [pc, #16]	@ (8009f14 <_vfiprintf_r+0x228>)
 8009f02:	f000 f87d 	bl	800a000 <_printf_i>
 8009f06:	e7e4      	b.n	8009ed2 <_vfiprintf_r+0x1e6>
 8009f08:	0800a7d6 	.word	0x0800a7d6
 8009f0c:	0800a7e0 	.word	0x0800a7e0
 8009f10:	00000000 	.word	0x00000000
 8009f14:	08009cc7 	.word	0x08009cc7
 8009f18:	0800a7dc 	.word	0x0800a7dc

08009f1c <_printf_common>:
 8009f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	4616      	mov	r6, r2
 8009f22:	4698      	mov	r8, r3
 8009f24:	688a      	ldr	r2, [r1, #8]
 8009f26:	4607      	mov	r7, r0
 8009f28:	690b      	ldr	r3, [r1, #16]
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f30:	4293      	cmp	r3, r2
 8009f32:	bfb8      	it	lt
 8009f34:	4613      	movlt	r3, r2
 8009f36:	6033      	str	r3, [r6, #0]
 8009f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f3c:	b10a      	cbz	r2, 8009f42 <_printf_common+0x26>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	0699      	lsls	r1, r3, #26
 8009f46:	bf42      	ittt	mi
 8009f48:	6833      	ldrmi	r3, [r6, #0]
 8009f4a:	3302      	addmi	r3, #2
 8009f4c:	6033      	strmi	r3, [r6, #0]
 8009f4e:	6825      	ldr	r5, [r4, #0]
 8009f50:	f015 0506 	ands.w	r5, r5, #6
 8009f54:	d106      	bne.n	8009f64 <_printf_common+0x48>
 8009f56:	f104 0a19 	add.w	sl, r4, #25
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	6832      	ldr	r2, [r6, #0]
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	dc2b      	bgt.n	8009fbc <_printf_common+0xa0>
 8009f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	3b00      	subs	r3, #0
 8009f6c:	bf18      	it	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	0692      	lsls	r2, r2, #26
 8009f72:	d430      	bmi.n	8009fd6 <_printf_common+0xba>
 8009f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c8      	blx	r9
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d023      	beq.n	8009fca <_printf_common+0xae>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	341a      	adds	r4, #26
 8009f86:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009f8a:	f003 0306 	and.w	r3, r3, #6
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	bf0a      	itet	eq
 8009f92:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009f96:	2500      	movne	r5, #0
 8009f98:	6833      	ldreq	r3, [r6, #0]
 8009f9a:	f04f 0600 	mov.w	r6, #0
 8009f9e:	bf08      	it	eq
 8009fa0:	1aed      	subeq	r5, r5, r3
 8009fa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009fa6:	bf08      	it	eq
 8009fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fac:	4293      	cmp	r3, r2
 8009fae:	bfc4      	itt	gt
 8009fb0:	1a9b      	subgt	r3, r3, r2
 8009fb2:	18ed      	addgt	r5, r5, r3
 8009fb4:	42b5      	cmp	r5, r6
 8009fb6:	d11a      	bne.n	8009fee <_printf_common+0xd2>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e008      	b.n	8009fce <_printf_common+0xb2>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c8      	blx	r9
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d103      	bne.n	8009fd2 <_printf_common+0xb6>
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd2:	3501      	adds	r5, #1
 8009fd4:	e7c1      	b.n	8009f5a <_printf_common+0x3e>
 8009fd6:	18e1      	adds	r1, r4, r3
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	2030      	movs	r0, #48	@ 0x30
 8009fdc:	3302      	adds	r3, #2
 8009fde:	4422      	add	r2, r4
 8009fe0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fec:	e7c2      	b.n	8009f74 <_printf_common+0x58>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	47c8      	blx	r9
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d0e6      	beq.n	8009fca <_printf_common+0xae>
 8009ffc:	3601      	adds	r6, #1
 8009ffe:	e7d9      	b.n	8009fb4 <_printf_common+0x98>

0800a000 <_printf_i>:
 800a000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a004:	7e0f      	ldrb	r7, [r1, #24]
 800a006:	4691      	mov	r9, r2
 800a008:	4680      	mov	r8, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	2f78      	cmp	r7, #120	@ 0x78
 800a00e:	469a      	mov	sl, r3
 800a010:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a016:	d807      	bhi.n	800a028 <_printf_i+0x28>
 800a018:	2f62      	cmp	r7, #98	@ 0x62
 800a01a:	d80a      	bhi.n	800a032 <_printf_i+0x32>
 800a01c:	2f00      	cmp	r7, #0
 800a01e:	f000 80d1 	beq.w	800a1c4 <_printf_i+0x1c4>
 800a022:	2f58      	cmp	r7, #88	@ 0x58
 800a024:	f000 80b8 	beq.w	800a198 <_printf_i+0x198>
 800a028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a02c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a030:	e03a      	b.n	800a0a8 <_printf_i+0xa8>
 800a032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a036:	2b15      	cmp	r3, #21
 800a038:	d8f6      	bhi.n	800a028 <_printf_i+0x28>
 800a03a:	a101      	add	r1, pc, #4	@ (adr r1, 800a040 <_printf_i+0x40>)
 800a03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a040:	0800a099 	.word	0x0800a099
 800a044:	0800a0ad 	.word	0x0800a0ad
 800a048:	0800a029 	.word	0x0800a029
 800a04c:	0800a029 	.word	0x0800a029
 800a050:	0800a029 	.word	0x0800a029
 800a054:	0800a029 	.word	0x0800a029
 800a058:	0800a0ad 	.word	0x0800a0ad
 800a05c:	0800a029 	.word	0x0800a029
 800a060:	0800a029 	.word	0x0800a029
 800a064:	0800a029 	.word	0x0800a029
 800a068:	0800a029 	.word	0x0800a029
 800a06c:	0800a1ab 	.word	0x0800a1ab
 800a070:	0800a0d7 	.word	0x0800a0d7
 800a074:	0800a165 	.word	0x0800a165
 800a078:	0800a029 	.word	0x0800a029
 800a07c:	0800a029 	.word	0x0800a029
 800a080:	0800a1cd 	.word	0x0800a1cd
 800a084:	0800a029 	.word	0x0800a029
 800a088:	0800a0d7 	.word	0x0800a0d7
 800a08c:	0800a029 	.word	0x0800a029
 800a090:	0800a029 	.word	0x0800a029
 800a094:	0800a16d 	.word	0x0800a16d
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6032      	str	r2, [r6, #0]
 800a0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e09c      	b.n	800a1e6 <_printf_i+0x1e6>
 800a0ac:	6833      	ldr	r3, [r6, #0]
 800a0ae:	6820      	ldr	r0, [r4, #0]
 800a0b0:	1d19      	adds	r1, r3, #4
 800a0b2:	6031      	str	r1, [r6, #0]
 800a0b4:	0606      	lsls	r6, r0, #24
 800a0b6:	d501      	bpl.n	800a0bc <_printf_i+0xbc>
 800a0b8:	681d      	ldr	r5, [r3, #0]
 800a0ba:	e003      	b.n	800a0c4 <_printf_i+0xc4>
 800a0bc:	0645      	lsls	r5, r0, #25
 800a0be:	d5fb      	bpl.n	800a0b8 <_printf_i+0xb8>
 800a0c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	da03      	bge.n	800a0d0 <_printf_i+0xd0>
 800a0c8:	232d      	movs	r3, #45	@ 0x2d
 800a0ca:	426d      	negs	r5, r5
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d0:	4858      	ldr	r0, [pc, #352]	@ (800a234 <_printf_i+0x234>)
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e011      	b.n	800a0fa <_printf_i+0xfa>
 800a0d6:	6821      	ldr	r1, [r4, #0]
 800a0d8:	6833      	ldr	r3, [r6, #0]
 800a0da:	0608      	lsls	r0, r1, #24
 800a0dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0e0:	d402      	bmi.n	800a0e8 <_printf_i+0xe8>
 800a0e2:	0649      	lsls	r1, r1, #25
 800a0e4:	bf48      	it	mi
 800a0e6:	b2ad      	uxthmi	r5, r5
 800a0e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0ea:	6033      	str	r3, [r6, #0]
 800a0ec:	4851      	ldr	r0, [pc, #324]	@ (800a234 <_printf_i+0x234>)
 800a0ee:	bf14      	ite	ne
 800a0f0:	230a      	movne	r3, #10
 800a0f2:	2308      	moveq	r3, #8
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0fa:	6866      	ldr	r6, [r4, #4]
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	60a6      	str	r6, [r4, #8]
 800a100:	db05      	blt.n	800a10e <_printf_i+0x10e>
 800a102:	6821      	ldr	r1, [r4, #0]
 800a104:	432e      	orrs	r6, r5
 800a106:	f021 0104 	bic.w	r1, r1, #4
 800a10a:	6021      	str	r1, [r4, #0]
 800a10c:	d04b      	beq.n	800a1a6 <_printf_i+0x1a6>
 800a10e:	4616      	mov	r6, r2
 800a110:	fbb5 f1f3 	udiv	r1, r5, r3
 800a114:	fb03 5711 	mls	r7, r3, r1, r5
 800a118:	5dc7      	ldrb	r7, [r0, r7]
 800a11a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a11e:	462f      	mov	r7, r5
 800a120:	460d      	mov	r5, r1
 800a122:	42bb      	cmp	r3, r7
 800a124:	d9f4      	bls.n	800a110 <_printf_i+0x110>
 800a126:	2b08      	cmp	r3, #8
 800a128:	d10b      	bne.n	800a142 <_printf_i+0x142>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	07df      	lsls	r7, r3, #31
 800a12e:	d508      	bpl.n	800a142 <_printf_i+0x142>
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	6861      	ldr	r1, [r4, #4]
 800a134:	4299      	cmp	r1, r3
 800a136:	bfde      	ittt	le
 800a138:	2330      	movle	r3, #48	@ 0x30
 800a13a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a13e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a142:	1b92      	subs	r2, r2, r6
 800a144:	6122      	str	r2, [r4, #16]
 800a146:	464b      	mov	r3, r9
 800a148:	aa03      	add	r2, sp, #12
 800a14a:	4621      	mov	r1, r4
 800a14c:	4640      	mov	r0, r8
 800a14e:	f8cd a000 	str.w	sl, [sp]
 800a152:	f7ff fee3 	bl	8009f1c <_printf_common>
 800a156:	3001      	adds	r0, #1
 800a158:	d14a      	bne.n	800a1f0 <_printf_i+0x1f0>
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295
 800a15e:	b004      	add	sp, #16
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	f043 0320 	orr.w	r3, r3, #32
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	2778      	movs	r7, #120	@ 0x78
 800a16e:	4832      	ldr	r0, [pc, #200]	@ (800a238 <_printf_i+0x238>)
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a176:	061f      	lsls	r7, r3, #24
 800a178:	6831      	ldr	r1, [r6, #0]
 800a17a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a17e:	d402      	bmi.n	800a186 <_printf_i+0x186>
 800a180:	065f      	lsls	r7, r3, #25
 800a182:	bf48      	it	mi
 800a184:	b2ad      	uxthmi	r5, r5
 800a186:	6031      	str	r1, [r6, #0]
 800a188:	07d9      	lsls	r1, r3, #31
 800a18a:	bf44      	itt	mi
 800a18c:	f043 0320 	orrmi.w	r3, r3, #32
 800a190:	6023      	strmi	r3, [r4, #0]
 800a192:	b11d      	cbz	r5, 800a19c <_printf_i+0x19c>
 800a194:	2310      	movs	r3, #16
 800a196:	e7ad      	b.n	800a0f4 <_printf_i+0xf4>
 800a198:	4826      	ldr	r0, [pc, #152]	@ (800a234 <_printf_i+0x234>)
 800a19a:	e7e9      	b.n	800a170 <_printf_i+0x170>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	f023 0320 	bic.w	r3, r3, #32
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	e7f6      	b.n	800a194 <_printf_i+0x194>
 800a1a6:	4616      	mov	r6, r2
 800a1a8:	e7bd      	b.n	800a126 <_printf_i+0x126>
 800a1aa:	6833      	ldr	r3, [r6, #0]
 800a1ac:	6825      	ldr	r5, [r4, #0]
 800a1ae:	1d18      	adds	r0, r3, #4
 800a1b0:	6961      	ldr	r1, [r4, #20]
 800a1b2:	6030      	str	r0, [r6, #0]
 800a1b4:	062e      	lsls	r6, r5, #24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	d501      	bpl.n	800a1be <_printf_i+0x1be>
 800a1ba:	6019      	str	r1, [r3, #0]
 800a1bc:	e002      	b.n	800a1c4 <_printf_i+0x1c4>
 800a1be:	0668      	lsls	r0, r5, #25
 800a1c0:	d5fb      	bpl.n	800a1ba <_printf_i+0x1ba>
 800a1c2:	8019      	strh	r1, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	e7bc      	b.n	800a146 <_printf_i+0x146>
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	6032      	str	r2, [r6, #0]
 800a1d4:	681e      	ldr	r6, [r3, #0]
 800a1d6:	6862      	ldr	r2, [r4, #4]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f981 	bl	800a4e0 <memchr>
 800a1de:	b108      	cbz	r0, 800a1e4 <_printf_i+0x1e4>
 800a1e0:	1b80      	subs	r0, r0, r6
 800a1e2:	6060      	str	r0, [r4, #4]
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ee:	e7aa      	b.n	800a146 <_printf_i+0x146>
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	47d0      	blx	sl
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0ad      	beq.n	800a15a <_printf_i+0x15a>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	079b      	lsls	r3, r3, #30
 800a202:	d413      	bmi.n	800a22c <_printf_i+0x22c>
 800a204:	68e0      	ldr	r0, [r4, #12]
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	4298      	cmp	r0, r3
 800a20a:	bfb8      	it	lt
 800a20c:	4618      	movlt	r0, r3
 800a20e:	e7a6      	b.n	800a15e <_printf_i+0x15e>
 800a210:	2301      	movs	r3, #1
 800a212:	4632      	mov	r2, r6
 800a214:	4649      	mov	r1, r9
 800a216:	4640      	mov	r0, r8
 800a218:	47d0      	blx	sl
 800a21a:	3001      	adds	r0, #1
 800a21c:	d09d      	beq.n	800a15a <_printf_i+0x15a>
 800a21e:	3501      	adds	r5, #1
 800a220:	68e3      	ldr	r3, [r4, #12]
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	1a5b      	subs	r3, r3, r1
 800a226:	42ab      	cmp	r3, r5
 800a228:	dcf2      	bgt.n	800a210 <_printf_i+0x210>
 800a22a:	e7eb      	b.n	800a204 <_printf_i+0x204>
 800a22c:	2500      	movs	r5, #0
 800a22e:	f104 0619 	add.w	r6, r4, #25
 800a232:	e7f5      	b.n	800a220 <_printf_i+0x220>
 800a234:	0800a7e7 	.word	0x0800a7e7
 800a238:	0800a7f8 	.word	0x0800a7f8

0800a23c <__sflush_r>:
 800a23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	0716      	lsls	r6, r2, #28
 800a246:	4605      	mov	r5, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	d454      	bmi.n	800a2f6 <__sflush_r+0xba>
 800a24c:	684b      	ldr	r3, [r1, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc02      	bgt.n	800a258 <__sflush_r+0x1c>
 800a252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	dd48      	ble.n	800a2ea <__sflush_r+0xae>
 800a258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d045      	beq.n	800a2ea <__sflush_r+0xae>
 800a25e:	2300      	movs	r3, #0
 800a260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a264:	682f      	ldr	r7, [r5, #0]
 800a266:	6a21      	ldr	r1, [r4, #32]
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	d030      	beq.n	800a2ce <__sflush_r+0x92>
 800a26c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	0759      	lsls	r1, r3, #29
 800a272:	d505      	bpl.n	800a280 <__sflush_r+0x44>
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a27a:	b10b      	cbz	r3, 800a280 <__sflush_r+0x44>
 800a27c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	2300      	movs	r3, #0
 800a282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	4628      	mov	r0, r5
 800a288:	47b0      	blx	r6
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	d106      	bne.n	800a29e <__sflush_r+0x62>
 800a290:	6829      	ldr	r1, [r5, #0]
 800a292:	291d      	cmp	r1, #29
 800a294:	d82b      	bhi.n	800a2ee <__sflush_r+0xb2>
 800a296:	4a2a      	ldr	r2, [pc, #168]	@ (800a340 <__sflush_r+0x104>)
 800a298:	40ca      	lsrs	r2, r1
 800a29a:	07d6      	lsls	r6, r2, #31
 800a29c:	d527      	bpl.n	800a2ee <__sflush_r+0xb2>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	04d9      	lsls	r1, r3, #19
 800a2a2:	6062      	str	r2, [r4, #4]
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	d504      	bpl.n	800a2b4 <__sflush_r+0x78>
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	d101      	bne.n	800a2b2 <__sflush_r+0x76>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	b903      	cbnz	r3, 800a2b4 <__sflush_r+0x78>
 800a2b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2b6:	602f      	str	r7, [r5, #0]
 800a2b8:	b1b9      	cbz	r1, 800a2ea <__sflush_r+0xae>
 800a2ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	d002      	beq.n	800a2c8 <__sflush_r+0x8c>
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f7ff fbe8 	bl	8009a98 <_free_r>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2cc:	e00d      	b.n	800a2ea <__sflush_r+0xae>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b0      	blx	r6
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	1c50      	adds	r0, r2, #1
 800a2d8:	d1c9      	bne.n	800a26e <__sflush_r+0x32>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0c6      	beq.n	800a26e <__sflush_r+0x32>
 800a2e0:	2b1d      	cmp	r3, #29
 800a2e2:	d001      	beq.n	800a2e8 <__sflush_r+0xac>
 800a2e4:	2b16      	cmp	r3, #22
 800a2e6:	d11d      	bne.n	800a324 <__sflush_r+0xe8>
 800a2e8:	602f      	str	r7, [r5, #0]
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	e021      	b.n	800a332 <__sflush_r+0xf6>
 800a2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2f2:	b21b      	sxth	r3, r3
 800a2f4:	e01a      	b.n	800a32c <__sflush_r+0xf0>
 800a2f6:	690f      	ldr	r7, [r1, #16]
 800a2f8:	2f00      	cmp	r7, #0
 800a2fa:	d0f6      	beq.n	800a2ea <__sflush_r+0xae>
 800a2fc:	0793      	lsls	r3, r2, #30
 800a2fe:	680e      	ldr	r6, [r1, #0]
 800a300:	600f      	str	r7, [r1, #0]
 800a302:	bf0c      	ite	eq
 800a304:	694b      	ldreq	r3, [r1, #20]
 800a306:	2300      	movne	r3, #0
 800a308:	eba6 0807 	sub.w	r8, r6, r7
 800a30c:	608b      	str	r3, [r1, #8]
 800a30e:	f1b8 0f00 	cmp.w	r8, #0
 800a312:	ddea      	ble.n	800a2ea <__sflush_r+0xae>
 800a314:	4643      	mov	r3, r8
 800a316:	463a      	mov	r2, r7
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	4628      	mov	r0, r5
 800a31c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a31e:	47b0      	blx	r6
 800a320:	2800      	cmp	r0, #0
 800a322:	dc08      	bgt.n	800a336 <__sflush_r+0xfa>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a336:	4407      	add	r7, r0
 800a338:	eba8 0800 	sub.w	r8, r8, r0
 800a33c:	e7e7      	b.n	800a30e <__sflush_r+0xd2>
 800a33e:	bf00      	nop
 800a340:	20400001 	.word	0x20400001

0800a344 <_fflush_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4605      	mov	r5, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	b913      	cbnz	r3, 800a354 <_fflush_r+0x10>
 800a34e:	2500      	movs	r5, #0
 800a350:	4628      	mov	r0, r5
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	b118      	cbz	r0, 800a35e <_fflush_r+0x1a>
 800a356:	6a03      	ldr	r3, [r0, #32]
 800a358:	b90b      	cbnz	r3, 800a35e <_fflush_r+0x1a>
 800a35a:	f7ff f909 	bl	8009570 <__sinit>
 800a35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f3      	beq.n	800a34e <_fflush_r+0xa>
 800a366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a368:	07d0      	lsls	r0, r2, #31
 800a36a:	d404      	bmi.n	800a376 <_fflush_r+0x32>
 800a36c:	0599      	lsls	r1, r3, #22
 800a36e:	d402      	bmi.n	800a376 <_fflush_r+0x32>
 800a370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a372:	f7ff fb70 	bl	8009a56 <__retarget_lock_acquire_recursive>
 800a376:	4628      	mov	r0, r5
 800a378:	4621      	mov	r1, r4
 800a37a:	f7ff ff5f 	bl	800a23c <__sflush_r>
 800a37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a380:	4605      	mov	r5, r0
 800a382:	07da      	lsls	r2, r3, #31
 800a384:	d4e4      	bmi.n	800a350 <_fflush_r+0xc>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	059b      	lsls	r3, r3, #22
 800a38a:	d4e1      	bmi.n	800a350 <_fflush_r+0xc>
 800a38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a38e:	f7ff fb63 	bl	8009a58 <__retarget_lock_release_recursive>
 800a392:	e7dd      	b.n	800a350 <_fflush_r+0xc>

0800a394 <fiprintf>:
 800a394:	b40e      	push	{r1, r2, r3}
 800a396:	b503      	push	{r0, r1, lr}
 800a398:	ab03      	add	r3, sp, #12
 800a39a:	4601      	mov	r1, r0
 800a39c:	4805      	ldr	r0, [pc, #20]	@ (800a3b4 <fiprintf+0x20>)
 800a39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a2:	6800      	ldr	r0, [r0, #0]
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	f7ff fca1 	bl	8009cec <_vfiprintf_r>
 800a3aa:	b002      	add	sp, #8
 800a3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b0:	b003      	add	sp, #12
 800a3b2:	4770      	bx	lr
 800a3b4:	200000b4 	.word	0x200000b4

0800a3b8 <__swhatbuf_r>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c0:	b096      	sub	sp, #88	@ 0x58
 800a3c2:	4615      	mov	r5, r2
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	461e      	mov	r6, r3
 800a3c8:	da0c      	bge.n	800a3e4 <__swhatbuf_r+0x2c>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3d2:	bf14      	ite	ne
 800a3d4:	2340      	movne	r3, #64	@ 0x40
 800a3d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3da:	2000      	movs	r0, #0
 800a3dc:	6031      	str	r1, [r6, #0]
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	b016      	add	sp, #88	@ 0x58
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	466a      	mov	r2, sp
 800a3e6:	f000 f849 	bl	800a47c <_fstat_r>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	dbed      	blt.n	800a3ca <__swhatbuf_r+0x12>
 800a3ee:	9901      	ldr	r1, [sp, #4]
 800a3f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3f8:	4259      	negs	r1, r3
 800a3fa:	4159      	adcs	r1, r3
 800a3fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a400:	e7eb      	b.n	800a3da <__swhatbuf_r+0x22>

0800a402 <__smakebuf_r>:
 800a402:	898b      	ldrh	r3, [r1, #12]
 800a404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a406:	079d      	lsls	r5, r3, #30
 800a408:	4606      	mov	r6, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	d507      	bpl.n	800a41e <__smakebuf_r+0x1c>
 800a40e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	6123      	str	r3, [r4, #16]
 800a416:	2301      	movs	r3, #1
 800a418:	6163      	str	r3, [r4, #20]
 800a41a:	b003      	add	sp, #12
 800a41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a41e:	ab01      	add	r3, sp, #4
 800a420:	466a      	mov	r2, sp
 800a422:	f7ff ffc9 	bl	800a3b8 <__swhatbuf_r>
 800a426:	9f00      	ldr	r7, [sp, #0]
 800a428:	4605      	mov	r5, r0
 800a42a:	4630      	mov	r0, r6
 800a42c:	4639      	mov	r1, r7
 800a42e:	f7ff fba7 	bl	8009b80 <_malloc_r>
 800a432:	b948      	cbnz	r0, 800a448 <__smakebuf_r+0x46>
 800a434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a438:	059a      	lsls	r2, r3, #22
 800a43a:	d4ee      	bmi.n	800a41a <__smakebuf_r+0x18>
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	81a3      	strh	r3, [r4, #12]
 800a446:	e7e2      	b.n	800a40e <__smakebuf_r+0xc>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	6020      	str	r0, [r4, #0]
 800a44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	9b01      	ldr	r3, [sp, #4]
 800a454:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a458:	b15b      	cbz	r3, 800a472 <__smakebuf_r+0x70>
 800a45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45e:	4630      	mov	r0, r6
 800a460:	f000 f81e 	bl	800a4a0 <_isatty_r>
 800a464:	b128      	cbz	r0, 800a472 <__smakebuf_r+0x70>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	431d      	orrs	r5, r3
 800a476:	81a5      	strh	r5, [r4, #12]
 800a478:	e7cf      	b.n	800a41a <__smakebuf_r+0x18>
	...

0800a47c <_fstat_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	2300      	movs	r3, #0
 800a480:	4d06      	ldr	r5, [pc, #24]	@ (800a49c <_fstat_r+0x20>)
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f7f6 ffcb 	bl	8001424 <_fstat>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d102      	bne.n	800a498 <_fstat_r+0x1c>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b103      	cbz	r3, 800a498 <_fstat_r+0x1c>
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	2000037c 	.word	0x2000037c

0800a4a0 <_isatty_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4d05      	ldr	r5, [pc, #20]	@ (800a4bc <_isatty_r+0x1c>)
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	f7f6 ffca 	bl	8001444 <_isatty>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_isatty_r+0x1a>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_isatty_r+0x1a>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	2000037c 	.word	0x2000037c

0800a4c0 <_sbrk_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4d05      	ldr	r5, [pc, #20]	@ (800a4dc <_sbrk_r+0x1c>)
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f6 ffd2 	bl	8001474 <_sbrk>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_sbrk_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_sbrk_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	2000037c 	.word	0x2000037c

0800a4e0 <memchr>:
 800a4e0:	b2c9      	uxtb	r1, r1
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4402      	add	r2, r0
 800a4e6:	b510      	push	{r4, lr}
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	d101      	bne.n	800a4f2 <memchr+0x12>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e003      	b.n	800a4fa <memchr+0x1a>
 800a4f2:	7804      	ldrb	r4, [r0, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	428c      	cmp	r4, r1
 800a4f8:	d1f6      	bne.n	800a4e8 <memchr+0x8>
 800a4fa:	bd10      	pop	{r4, pc}

0800a4fc <abort>:
 800a4fc:	2006      	movs	r0, #6
 800a4fe:	b508      	push	{r3, lr}
 800a500:	f000 f82c 	bl	800a55c <raise>
 800a504:	2001      	movs	r0, #1
 800a506:	f7f6 ff3d 	bl	8001384 <_exit>

0800a50a <_raise_r>:
 800a50a:	291f      	cmp	r1, #31
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4605      	mov	r5, r0
 800a510:	460c      	mov	r4, r1
 800a512:	d904      	bls.n	800a51e <_raise_r+0x14>
 800a514:	2316      	movs	r3, #22
 800a516:	6003      	str	r3, [r0, #0]
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	bd38      	pop	{r3, r4, r5, pc}
 800a51e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a520:	b112      	cbz	r2, 800a528 <_raise_r+0x1e>
 800a522:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a526:	b94b      	cbnz	r3, 800a53c <_raise_r+0x32>
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f831 	bl	800a590 <_getpid_r>
 800a52e:	4622      	mov	r2, r4
 800a530:	4601      	mov	r1, r0
 800a532:	4628      	mov	r0, r5
 800a534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a538:	f000 b818 	b.w	800a56c <_kill_r>
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d00a      	beq.n	800a556 <_raise_r+0x4c>
 800a540:	1c59      	adds	r1, r3, #1
 800a542:	d103      	bne.n	800a54c <_raise_r+0x42>
 800a544:	2316      	movs	r3, #22
 800a546:	6003      	str	r3, [r0, #0]
 800a548:	2001      	movs	r0, #1
 800a54a:	e7e7      	b.n	800a51c <_raise_r+0x12>
 800a54c:	2100      	movs	r1, #0
 800a54e:	4620      	mov	r0, r4
 800a550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a554:	4798      	blx	r3
 800a556:	2000      	movs	r0, #0
 800a558:	e7e0      	b.n	800a51c <_raise_r+0x12>
	...

0800a55c <raise>:
 800a55c:	4b02      	ldr	r3, [pc, #8]	@ (800a568 <raise+0xc>)
 800a55e:	4601      	mov	r1, r0
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f7ff bfd2 	b.w	800a50a <_raise_r>
 800a566:	bf00      	nop
 800a568:	200000b4 	.word	0x200000b4

0800a56c <_kill_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	2300      	movs	r3, #0
 800a570:	4d06      	ldr	r5, [pc, #24]	@ (800a58c <_kill_r+0x20>)
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	4611      	mov	r1, r2
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	f7f6 fef3 	bl	8001364 <_kill>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d102      	bne.n	800a588 <_kill_r+0x1c>
 800a582:	682b      	ldr	r3, [r5, #0]
 800a584:	b103      	cbz	r3, 800a588 <_kill_r+0x1c>
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	bd38      	pop	{r3, r4, r5, pc}
 800a58a:	bf00      	nop
 800a58c:	2000037c 	.word	0x2000037c

0800a590 <_getpid_r>:
 800a590:	f7f6 bee0 	b.w	8001354 <_getpid>

0800a594 <_init>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_fini>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr
